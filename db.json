{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/pacman.png","path":"img/pacman.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/img/author.jpg","path":"css/img/author.jpg","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/my/css3_1.css","path":"css/my/css3_1.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/my/css3_2.css","path":"css/my/css3_2.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/css/my/flexincss.css","path":"css/my/flexincss.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/img/article/cssbox.gif","path":"img/article/cssbox.gif","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/my/css3_1.js","path":"js/my/css3_1.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/my/css3_2.js","path":"js/my/css3_2.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/js/my/flexincss.js","path":"js/my/flexincss.js","modified":1,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/pacman/LICENSE","hash":"4847e5a63399a0ef85af6844fd19a48c69a8869c","modified":1487489679671},{"_id":"themes/pacman/README.md","hash":"39b62cdd8951d19b60fd65403c0adc821a85d124","modified":1489632819278},{"_id":"themes/pacman/_config.yml","hash":"0d14dff8b405e3cde2f1e80c1bc96427a0b4a00c","modified":1495034166582},{"_id":"source/_posts/CSS3伪类选择器.md","hash":"5e1865b6c7f2f9a5e65cc48684692232fa44c001","modified":1495101804389},{"_id":"source/_posts/CSS3新增属性.md","hash":"f6475643d329d262c20a6093ce5083ddfc048f1c","modified":1495101819140},{"_id":"source/_posts/SASS用法.md","hash":"280163e8db7fe29a3ff7234cdf3ee839cc32e04e","modified":1495789357595},{"_id":"source/_posts/css弹性布局-flex布局.md","hash":"b880bab6cbca469f6eb25adb699d21e3c3d8312a","modified":1495101794063},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1487573306344},{"_id":"source/_posts/hexo导入自定义css文件.md","hash":"d519d96da08a3aa65ef64216f11c49c0546fd62e","modified":1495101824884},{"_id":"source/_posts/js容易混淆的几个函数.md","hash":"1ac1208756746b0159be1855a4cf5c37303bc485","modified":1495101848057},{"_id":"source/_posts/js闭包.md","hash":"f7cc0846c42418e7227d0925ad0bd212d1bf8882","modified":1495101858576},{"_id":"source/_posts/原生js操作DOM元素.md","hash":"90aba53d6e34f8f6f2bf6cd2922e623101fa8a71","modified":1496723649159},{"_id":"source/_posts/常见前端知识点.md","hash":"f5c851824eb40bf24cd8a4c93f4f36a7b2643628","modified":1495031832569},{"_id":"source/_posts/数据结构的相互转换.md","hash":"93f5c152ee88b1ae47a30390e948da269443c628","modified":1491449308616},{"_id":"source/_posts/谷歌HTML-CSS规范.md","hash":"0c67694e8c95929d605ed837cb903dac188ebadb","modified":1493006067364},{"_id":"source/about/index.md","hash":"c7869ea814834d9607d6f4dc95bfd4d4e5a3e169","modified":1487507544042},{"_id":"source/essay/index.md","hash":"199a538c810a9bc4175543a5da1f90e8258fb1b0","modified":1487506048903},{"_id":"source/search/index.md","hash":"9fc9f75822f894ab874a4eb2826e7246d1e57afe","modified":1495034046354},{"_id":"source/share/index.md","hash":"61a77a966b5e60109f9fa0411f61ed3ef077e08a","modified":1496719543149},{"_id":"themes/pacman/languages/default.yml","hash":"9ffaaf4dbe83f1f343ea702e59493dc6f3f46877","modified":1487489679672},{"_id":"themes/pacman/languages/zh-CN.yml","hash":"680d877a531f8df04b30b462a5131b5d3a8ca372","modified":1487489679672},{"_id":"themes/pacman/languages/zh-TW.yml","hash":"08a6eae3c1e48f96690ca4c29ce67f8d6ff9a8bd","modified":1487489679672},{"_id":"themes/pacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1487489679679},{"_id":"themes/pacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1487489679680},{"_id":"themes/pacman/layout/index.ejs","hash":"dc463eb532313dcdddea9c1a0c8f5a35dbd55f6e","modified":1487489679680},{"_id":"themes/pacman/layout/layout.ejs","hash":"4a5ff6004214906b9ca159fc4187b8923c7bcd11","modified":1487489679680},{"_id":"themes/pacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1487489679680},{"_id":"themes/pacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1487489679681},{"_id":"themes/pacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1487489679681},{"_id":"themes/pacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1487489679681},{"_id":"source/_posts/SASS用法/goToDir.jpg","hash":"ef5113fc94b2041774d66f4fdcf09255e7628a95","modified":1495119329248},{"_id":"source/_posts/SASS用法/openRuby.jpg","hash":"1ed1be02ef732e2ce760d475497483f9704c3485","modified":1495119026565},{"_id":"source/_posts/SASS用法/runTestscss.jpg","hash":"f28aea7a5c686d9ccff3a43b6982d0ae647700b6","modified":1495121903107},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","hash":"faf5060310af2d24c62f10a435d509117b851489","modified":1490757571423},{"_id":"themes/pacman/layout/_partial/archive.ejs","hash":"2241d64f001c96cffa4a129ebea177a5421d147d","modified":1487489679673},{"_id":"themes/pacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1487489679673},{"_id":"themes/pacman/layout/_partial/article.ejs","hash":"8e446ec97c30774807657fc9fb7bceb6905699aa","modified":1487489679673},{"_id":"themes/pacman/layout/_partial/footer.ejs","hash":"497a37f6246d4f1b91039762655dfcb01849c4b6","modified":1487489679674},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","hash":"7ebccafcfdaca5cb5b8f4f06548f1d50958726ef","modified":1487489679674},{"_id":"themes/pacman/layout/_partial/head.ejs","hash":"dc9ecf58ae7990f16089784e33753dd94ed4becc","modified":1487580830945},{"_id":"themes/pacman/layout/_partial/header.ejs","hash":"dc77ad898bdd8273d5bff00923197a5345aa02ca","modified":1495034178675},{"_id":"themes/pacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1487489679675},{"_id":"themes/pacman/layout/_partial/search.ejs","hash":"5f1c22e78158cdb77f2af28517b6cbe96150fdd5","modified":1487489679678},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","hash":"565979955cecaab9105b23f668aa63bf97e9c20e","modified":1487489679678},{"_id":"themes/pacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1487489679678},{"_id":"themes/pacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1487489679678},{"_id":"themes/pacman/layout/_widget/category.ejs","hash":"ab647b97f55e550af54598dee0c4bb132ef43c46","modified":1487489679679},{"_id":"themes/pacman/layout/_widget/links.ejs","hash":"0d5ef5c05694fb61020fedffbdebe02cb6361c8d","modified":1487489679679},{"_id":"themes/pacman/layout/_widget/rss.ejs","hash":"7426991ce1c51cb9b0b3aa1037d5137c8ef7a0b0","modified":1487508427382},{"_id":"themes/pacman/layout/_widget/tag.ejs","hash":"b994f8c43b190b852568e355944d5af151dcefe6","modified":1487489679679},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1487489679679},{"_id":"themes/pacman/source/css/style.styl","hash":"fd9224ce13feac0a9b406c28d9bafbd4deda42f5","modified":1487575359597},{"_id":"themes/pacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487489679685},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487489679685},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487489679686},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487489679686},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487489679686},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487489679686},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1487489679688},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1487489679689},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1487489679689},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1487489679691},{"_id":"themes/pacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1487489679690},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1487489679694},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1487489679693},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1487489679694},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1487489679697},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1434441378000},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1434441378000},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1434441378000},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1434441378000},{"_id":"themes/pacman/source/img/author.jpg","hash":"78f534fbda5eb4fdb4e4ce01dce0bfc39e2f729d","modified":1487489679698},{"_id":"themes/pacman/source/img/favicon.ico","hash":"df319cb869021facdcd4c9c3f1585893824752c4","modified":1487562618063},{"_id":"themes/pacman/source/img/logo.png","hash":"22ee748e633cb7ccad613f662b614f4e979a92be","modified":1487562033157},{"_id":"themes/pacman/source/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1487489679699},{"_id":"themes/pacman/source/img/pacman.png","hash":"674dd65d5e76fadea7d447a71779dc14a3bad27c","modified":1487559557080},{"_id":"themes/pacman/source/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1434442370000},{"_id":"themes/pacman/source/css/bootstrap.min.css","hash":"08df9a96752852f2cbd310c30facd934e348c2c5","modified":1487580739178},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1487489679692},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1487489679697},{"_id":"themes/pacman/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1434441378000},{"_id":"themes/pacman/source/js/bootstrap.js","hash":"bbf55e20f1ebb6368522799f29db39830a08ef93","modified":1434442370000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","hash":"0faaa0c56f563693cdeafa299f97e3d5bd6fcdd8","modified":1487489679700},{"_id":"themes/pacman/layout/_partial/post/article.ejs","hash":"d6f989cf2be408cb8573629f260c75b20df42982","modified":1487489679676},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","hash":"fa03892b35dc344de7a722b9393978286c0376fe","modified":1487489679676},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","hash":"f0e21c685c0e3fe78c9b5f5f6d4eb9c1b5cf036f","modified":1487489679676},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","hash":"a4dc14cd47d22f1b73860bc3c7f424eae3d282dd","modified":1487489679676},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","hash":"6bd8723f24b192158e6e840bf14028503ad50045","modified":1487489679676},{"_id":"themes/pacman/layout/_partial/post/header.ejs","hash":"953e6feaf7b156fab79165342e9bca0ef54384ba","modified":1487489679677},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","hash":"5043a5058887cf6ad15182cfde345d36cb6ab323","modified":1487489679677},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","hash":"7b2c70d381d6d6f8a55d89180a9bc0f27118812e","modified":1487489679678},{"_id":"themes/pacman/source/css/_base/code.styl","hash":"577798b3c101be20b7ceb3d1e0421b4c4426d0ce","modified":1487489679682},{"_id":"themes/pacman/source/css/_base/font.styl","hash":"772749cc7c6a47410bb667f8127b37767d029283","modified":1487489679682},{"_id":"themes/pacman/source/css/_base/public.styl","hash":"a9d7524315303734f3f47e5e875a14b867888a50","modified":1487489679682},{"_id":"themes/pacman/source/css/_base/variable.styl","hash":"07e46b4346982e51a5bd498d99976d28628d9f44","modified":1487489679682},{"_id":"themes/pacman/source/css/_partial/article.styl","hash":"ffc40f735883bea18297dd380ad78ed554c9d5fb","modified":1487575395691},{"_id":"themes/pacman/source/css/_partial/aside.styl","hash":"ac937e5921c4084f29249819d51224ebc4296225","modified":1487489679683},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1487489679683},{"_id":"themes/pacman/source/css/_partial/footer.styl","hash":"65c0ea98fdda93d266f9bc5b9af9032c46fb479b","modified":1487489679684},{"_id":"themes/pacman/source/css/_partial/gallery.styl","hash":"b85a32c4bc71f720d74143a17a202fe8fa067950","modified":1487489679684},{"_id":"themes/pacman/source/css/_partial/header.styl","hash":"7d4ef4b2b1916909f8f198519f576c3d712d7423","modified":1487489679684},{"_id":"themes/pacman/source/css/_partial/helper.styl","hash":"554a7bc576b1419f0055ff56113d4be803b118d1","modified":1487489679684},{"_id":"themes/pacman/source/css/_partial/index.styl","hash":"a00aafe86d0238bf58f093834b6ae7406e918ec0","modified":1487489679685},{"_id":"themes/pacman/source/css/bootstrap.css","hash":"6987e3bdad7a3a5d143ddf2453e29782dbd99c29","modified":1434442370000},{"_id":"themes/pacman/source/css/img/author.jpg","hash":"d2474f582b719b0608d7c863156d0cc85175c0ab","modified":1487520271274},{"_id":"themes/pacman/source/css/my/css3_1.css","hash":"ead56236cee26c3c14b9d4e3c0bf3d389b13c909","modified":1487594149686},{"_id":"themes/pacman/source/css/my/css3_2.css","hash":"492e20eb2148a0b19e837c69e9cdc155614aff51","modified":1487767669473},{"_id":"themes/pacman/source/css/my/flexincss.css","hash":"54e11c07d17b69a1e097aa557ea500c866e236c4","modified":1490350368275},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487489679687},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1487489679687},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1487489679687},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1487489679687},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1487489679688},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1487489679688},{"_id":"themes/pacman/source/img/article/cssbox.gif","hash":"c8d19a1cfc4910bafec9109031ab3465adacf5d3","modified":1494215890564},{"_id":"themes/pacman/source/js/my/css3_1.js","hash":"9924c898abb34265351f60d11217877d7b694363","modified":1487578843258},{"_id":"themes/pacman/source/js/my/css3_2.js","hash":"ca7b8103d6e372310715672e9a0fc260565eac7e","modified":1487766499914},{"_id":"themes/pacman/source/js/my/flexincss.js","hash":"5204c103bd2ab63b8449b0532e63569e28165eec","modified":1490324171732},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1487489679696}],"Category":[{"name":"CSS","_id":"cj3l2uxy500041gwdnx98nr1q"},{"name":"hexo","_id":"cj3l2uxzg000o1gwd4vpiz892"},{"name":"Javascript","_id":"cj3l2uxzq000u1gwdb65xe9ky"},{"name":"前端开发","_id":"cj3l2uy0400141gwd91ovqqld"},{"name":"ECMAScript 6","_id":"cj3l2uy0h001c1gwdfwk787rf"}],"Data":[],"Page":[{"title":"关于我","date":"2017-02-19T08:00:54.000Z","_content":"\n<div>姓名：杨康</div>\n<div>毕业学校：西北农林科技大学</div>\n<div>学历：大学本科</div>\n<div>专业：软件工程</div>\n<div>联系方式：yk1062008412@gmail.com</div>\n<a href=\"http://weibo.com/yk1062008412\" target=\"_blank\">新浪微博</a><br/>\n<a href=\"https://github.com/yk1062008412\" target=\"_blank\">GitHub</a><br/>\n<a href=\"http://blog.sina.com.cn/yk1062008412\" target=\"_blank\">新浪博客</a>","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-02-19 16:00:54\n---\n\n<div>姓名：杨康</div>\n<div>毕业学校：西北农林科技大学</div>\n<div>学历：大学本科</div>\n<div>专业：软件工程</div>\n<div>联系方式：yk1062008412@gmail.com</div>\n<a href=\"http://weibo.com/yk1062008412\" target=\"_blank\">新浪微博</a><br/>\n<a href=\"https://github.com/yk1062008412\" target=\"_blank\">GitHub</a><br/>\n<a href=\"http://blog.sina.com.cn/yk1062008412\" target=\"_blank\">新浪博客</a>","updated":"2017-02-19T12:32:24.042Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3l2uxxx00011gwdmdns869c","content":"<p><div>姓名：杨康</div></p>\n<p><div>毕业学校：西北农林科技大学</div></p>\n<p><div>学历：大学本科</div></p>\n<p><div>专业：软件工程</div></p>\n<p><div>联系方式：yk1062008412@gmail.com</div><br><a href=\"http://weibo.com/yk1062008412\" target=\"_blank\">新浪微博</a><br><br><a href=\"https://github.com/yk1062008412\" target=\"_blank\">GitHub</a><br><br><a href=\"http://blog.sina.com.cn/yk1062008412\" target=\"_blank\">新浪博客</a></p>\n","excerpt":"","more":"<p><div>姓名：杨康</div></p>\n<p><div>毕业学校：西北农林科技大学</div></p>\n<p><div>学历：大学本科</div></p>\n<p><div>专业：软件工程</div></p>\n<p><div>联系方式：yk1062008412@gmail.com</div><br><a href=\"http://weibo.com/yk1062008412\" target=\"_blank\">新浪微博</a><br/><br><a href=\"https://github.com/yk1062008412\" target=\"_blank\">GitHub</a><br/><br><a href=\"http://blog.sina.com.cn/yk1062008412\" target=\"_blank\">新浪博客</a></p>\n"},{"title":"essay","date":"2017-02-19T12:07:08.000Z","_content":"\n## 随笔","source":"essay/index.md","raw":"---\ntitle: essay\ndate: 2017-02-19 20:07:08\n---\n\n## 随笔","updated":"2017-02-19T12:07:28.903Z","path":"essay/index.html","comments":1,"layout":"page","_id":"cj3l2uxy200031gwd4h8ppuvp","content":"<h2 id=\"随笔\"><a href=\"#随笔\" class=\"headerlink\" title=\"随笔\"></a>随笔</h2>","excerpt":"","more":"<h2 id=\"随笔\"><a href=\"#随笔\" class=\"headerlink\" title=\"随笔\"></a>随笔</h2>"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n----","date":"2017-05-17T15:14:06.416Z","updated":"2017-05-17T15:14:06.354Z","path":"search/index.html","comments":1,"_id":"cj3l2uxyg00071gwdw3gcljkg","content":"","excerpt":"","more":""},{"title":"share","date":"2017-02-19T12:05:41.000Z","_content":"\n## 1. Web前端\n\n### 1.1 UI设计\n\n- [calltoidea](http://www.calltoidea.com/) 样式。\n- [配色参考](http://www.colorhunt.co/) 网页配色搭配参考\n- [KISSY](http://docs.kissyui.com/) 电子商务网站UI组件\n\n### 1.2 常用工具\n\n- [BootStrap](http://www.bootcss.com/) 开发响应式布局\n- [AmazeUI](http://amazeui.org/) 开发响应式布局\n- [jQuery之家](http://www.htmleaf.com/) 页面布局。\n- [CodePen](https://codepen.io/) 页面布局(网页特效)。\n- [17素材网](http://www.17sucai.com/) 页面布局\n- [51Web](http://www.5iweb.com.cn/) 网页特效库\n- [Echarts](http://echarts.baidu.com/index.html) 数据可视化\n- [D3.js](https://d3js.org/) 数据可视化\n- [百度地图API](http://lbsyun.baidu.com/index.php) 调用百度地图相关服务\n- [kindeditor](http://kindeditor.net/demo.php) 在线Word编辑器\n- [AngularJs](http://www.ngnice.com/)\n- [jQuery](http://jquery.com/)\n- [CanIuse](http://caniuse.com/) 查询各种浏览器对CSS样式,html标签，SVG,API等的支持性\n- [LESS](http://lesscss.cn/) CSS预处理器\n- [SASS](https://www.sass.hk/) CSS预处理器\n- [json解析](http://www.json.cn/)\n- [百度CDN库](http://cdn.code.baidu.com/)\n- [Swiper](http://www.swiper.com.cn/) 轮播图插件\n- [MUI](http://dev.dcloud.net.cn/mui/) H5框架做APP端\n- [CSS参考手册](http://css.doyoe.com/) CSS参考手册\n- [CSS参考手册](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference) CSS参考手册\n- [zTree](http://www.jyvtc.com/dzb/uiFramework/js/zTree-v3.2/api/API_cn.html) 树结构\n- [Datatables](http://www.datatables.club/) 表格分页，搜索插件\n- [DropzoneJS](http://www.dropzonejs.com/) 拖动上传文件\n- [Nodejs](https://nodejs.org/zh-cn/)\n- [croppie](http://www.croppic.net/) 前端图片裁剪插件\n\n### 1.3 常用技术\n\n- jQuery懒加载 [lazyload](http://appelsiini.net/projects/lazyload/)\n\n### 1.4 前端教学\n\n- [瓢城Web俱乐部](http://www.ycku.com/)\n- [ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n## 2. Android\n\n### 2.1 UI设计\n\n- [uplab](https://material.uplabs.com/) 样式+代码。\n\n### 2.2 Android开发\n\n- [龙零](https://zhezaoyizhuding.github.io/) Android知识点\n\n## 3. 教学课程\n\n- [慕课网](http://www.imooc.com/)\n- [极客学院](http://www.jikexueyuan.com/)\n- [菜鸟教程](http://www.runoob.com/)\n\n## 4. 常用工具\n\n- [摄图网](http://www.699pic.com) 高清图片\n- [昵图网](http://www.nipic.com) 高清图片\n- [500PX](http://www.500px.com) 高清图片","source":"share/index.md","raw":"---\ntitle: share\ndate: 2017-02-19 20:05:41\n---\n\n## 1. Web前端\n\n### 1.1 UI设计\n\n- [calltoidea](http://www.calltoidea.com/) 样式。\n- [配色参考](http://www.colorhunt.co/) 网页配色搭配参考\n- [KISSY](http://docs.kissyui.com/) 电子商务网站UI组件\n\n### 1.2 常用工具\n\n- [BootStrap](http://www.bootcss.com/) 开发响应式布局\n- [AmazeUI](http://amazeui.org/) 开发响应式布局\n- [jQuery之家](http://www.htmleaf.com/) 页面布局。\n- [CodePen](https://codepen.io/) 页面布局(网页特效)。\n- [17素材网](http://www.17sucai.com/) 页面布局\n- [51Web](http://www.5iweb.com.cn/) 网页特效库\n- [Echarts](http://echarts.baidu.com/index.html) 数据可视化\n- [D3.js](https://d3js.org/) 数据可视化\n- [百度地图API](http://lbsyun.baidu.com/index.php) 调用百度地图相关服务\n- [kindeditor](http://kindeditor.net/demo.php) 在线Word编辑器\n- [AngularJs](http://www.ngnice.com/)\n- [jQuery](http://jquery.com/)\n- [CanIuse](http://caniuse.com/) 查询各种浏览器对CSS样式,html标签，SVG,API等的支持性\n- [LESS](http://lesscss.cn/) CSS预处理器\n- [SASS](https://www.sass.hk/) CSS预处理器\n- [json解析](http://www.json.cn/)\n- [百度CDN库](http://cdn.code.baidu.com/)\n- [Swiper](http://www.swiper.com.cn/) 轮播图插件\n- [MUI](http://dev.dcloud.net.cn/mui/) H5框架做APP端\n- [CSS参考手册](http://css.doyoe.com/) CSS参考手册\n- [CSS参考手册](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference) CSS参考手册\n- [zTree](http://www.jyvtc.com/dzb/uiFramework/js/zTree-v3.2/api/API_cn.html) 树结构\n- [Datatables](http://www.datatables.club/) 表格分页，搜索插件\n- [DropzoneJS](http://www.dropzonejs.com/) 拖动上传文件\n- [Nodejs](https://nodejs.org/zh-cn/)\n- [croppie](http://www.croppic.net/) 前端图片裁剪插件\n\n### 1.3 常用技术\n\n- jQuery懒加载 [lazyload](http://appelsiini.net/projects/lazyload/)\n\n### 1.4 前端教学\n\n- [瓢城Web俱乐部](http://www.ycku.com/)\n- [ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n## 2. Android\n\n### 2.1 UI设计\n\n- [uplab](https://material.uplabs.com/) 样式+代码。\n\n### 2.2 Android开发\n\n- [龙零](https://zhezaoyizhuding.github.io/) Android知识点\n\n## 3. 教学课程\n\n- [慕课网](http://www.imooc.com/)\n- [极客学院](http://www.jikexueyuan.com/)\n- [菜鸟教程](http://www.runoob.com/)\n\n## 4. 常用工具\n\n- [摄图网](http://www.699pic.com) 高清图片\n- [昵图网](http://www.nipic.com) 高清图片\n- [500PX](http://www.500px.com) 高清图片","updated":"2017-06-06T03:25:43.149Z","path":"share/index.html","comments":1,"layout":"page","_id":"cj3l2uxyp00091gwdtlawo59p","content":"<h2 id=\"1-Web前端\"><a href=\"#1-Web前端\" class=\"headerlink\" title=\"1. Web前端\"></a>1. Web前端</h2><h3 id=\"1-1-UI设计\"><a href=\"#1-1-UI设计\" class=\"headerlink\" title=\"1.1 UI设计\"></a>1.1 UI设计</h3><ul>\n<li><a href=\"http://www.calltoidea.com/\" target=\"_blank\" rel=\"external\">calltoidea</a> 样式。</li>\n<li><a href=\"http://www.colorhunt.co/\" target=\"_blank\" rel=\"external\">配色参考</a> 网页配色搭配参考</li>\n<li><a href=\"http://docs.kissyui.com/\" target=\"_blank\" rel=\"external\">KISSY</a> 电子商务网站UI组件</li>\n</ul>\n<h3 id=\"1-2-常用工具\"><a href=\"#1-2-常用工具\" class=\"headerlink\" title=\"1.2 常用工具\"></a>1.2 常用工具</h3><ul>\n<li><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">BootStrap</a> 开发响应式布局</li>\n<li><a href=\"http://amazeui.org/\" target=\"_blank\" rel=\"external\">AmazeUI</a> 开发响应式布局</li>\n<li><a href=\"http://www.htmleaf.com/\" target=\"_blank\" rel=\"external\">jQuery之家</a> 页面布局。</li>\n<li><a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">CodePen</a> 页面布局(网页特效)。</li>\n<li><a href=\"http://www.17sucai.com/\" target=\"_blank\" rel=\"external\">17素材网</a> 页面布局</li>\n<li><a href=\"http://www.5iweb.com.cn/\" target=\"_blank\" rel=\"external\">51Web</a> 网页特效库</li>\n<li><a href=\"http://echarts.baidu.com/index.html\" target=\"_blank\" rel=\"external\">Echarts</a> 数据可视化</li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">D3.js</a> 数据可视化</li>\n<li><a href=\"http://lbsyun.baidu.com/index.php\" target=\"_blank\" rel=\"external\">百度地图API</a> 调用百度地图相关服务</li>\n<li><a href=\"http://kindeditor.net/demo.php\" target=\"_blank\" rel=\"external\">kindeditor</a> 在线Word编辑器</li>\n<li><a href=\"http://www.ngnice.com/\" target=\"_blank\" rel=\"external\">AngularJs</a></li>\n<li><a href=\"http://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a></li>\n<li><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">CanIuse</a> 查询各种浏览器对CSS样式,html标签，SVG,API等的支持性</li>\n<li><a href=\"http://lesscss.cn/\" target=\"_blank\" rel=\"external\">LESS</a> CSS预处理器</li>\n<li><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"external\">SASS</a> CSS预处理器</li>\n<li><a href=\"http://www.json.cn/\" target=\"_blank\" rel=\"external\">json解析</a></li>\n<li><a href=\"http://cdn.code.baidu.com/\" target=\"_blank\" rel=\"external\">百度CDN库</a></li>\n<li><a href=\"http://www.swiper.com.cn/\" target=\"_blank\" rel=\"external\">Swiper</a> 轮播图插件</li>\n<li><a href=\"http://dev.dcloud.net.cn/mui/\" target=\"_blank\" rel=\"external\">MUI</a> H5框架做APP端</li>\n<li><a href=\"http://css.doyoe.com/\" target=\"_blank\" rel=\"external\">CSS参考手册</a> CSS参考手册</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"external\">CSS参考手册</a> CSS参考手册</li>\n<li><a href=\"http://www.jyvtc.com/dzb/uiFramework/js/zTree-v3.2/api/API_cn.html\" target=\"_blank\" rel=\"external\">zTree</a> 树结构</li>\n<li><a href=\"http://www.datatables.club/\" target=\"_blank\" rel=\"external\">Datatables</a> 表格分页，搜索插件</li>\n<li><a href=\"http://www.dropzonejs.com/\" target=\"_blank\" rel=\"external\">DropzoneJS</a> 拖动上传文件</li>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">Nodejs</a></li>\n<li><a href=\"http://www.croppic.net/\" target=\"_blank\" rel=\"external\">croppie</a> 前端图片裁剪插件</li>\n</ul>\n<h3 id=\"1-3-常用技术\"><a href=\"#1-3-常用技术\" class=\"headerlink\" title=\"1.3 常用技术\"></a>1.3 常用技术</h3><ul>\n<li>jQuery懒加载 <a href=\"http://appelsiini.net/projects/lazyload/\" target=\"_blank\" rel=\"external\">lazyload</a></li>\n</ul>\n<h3 id=\"1-4-前端教学\"><a href=\"#1-4-前端教学\" class=\"headerlink\" title=\"1.4 前端教学\"></a>1.4 前端教学</h3><ul>\n<li><a href=\"http://www.ycku.com/\" target=\"_blank\" rel=\"external\">瓢城Web俱乐部</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript6入门</a></li>\n</ul>\n<h2 id=\"2-Android\"><a href=\"#2-Android\" class=\"headerlink\" title=\"2. Android\"></a>2. Android</h2><h3 id=\"2-1-UI设计\"><a href=\"#2-1-UI设计\" class=\"headerlink\" title=\"2.1 UI设计\"></a>2.1 UI设计</h3><ul>\n<li><a href=\"https://material.uplabs.com/\" target=\"_blank\" rel=\"external\">uplab</a> 样式+代码。</li>\n</ul>\n<h3 id=\"2-2-Android开发\"><a href=\"#2-2-Android开发\" class=\"headerlink\" title=\"2.2 Android开发\"></a>2.2 Android开发</h3><ul>\n<li><a href=\"https://zhezaoyizhuding.github.io/\" target=\"_blank\" rel=\"external\">龙零</a> Android知识点</li>\n</ul>\n<h2 id=\"3-教学课程\"><a href=\"#3-教学课程\" class=\"headerlink\" title=\"3. 教学课程\"></a>3. 教学课程</h2><ul>\n<li><a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">慕课网</a></li>\n<li><a href=\"http://www.jikexueyuan.com/\" target=\"_blank\" rel=\"external\">极客学院</a></li>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">菜鸟教程</a></li>\n</ul>\n<h2 id=\"4-常用工具\"><a href=\"#4-常用工具\" class=\"headerlink\" title=\"4. 常用工具\"></a>4. 常用工具</h2><ul>\n<li><a href=\"http://www.699pic.com\" target=\"_blank\" rel=\"external\">摄图网</a> 高清图片</li>\n<li><a href=\"http://www.nipic.com\" target=\"_blank\" rel=\"external\">昵图网</a> 高清图片</li>\n<li><a href=\"http://www.500px.com\" target=\"_blank\" rel=\"external\">500PX</a> 高清图片</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1-Web前端\"><a href=\"#1-Web前端\" class=\"headerlink\" title=\"1. Web前端\"></a>1. Web前端</h2><h3 id=\"1-1-UI设计\"><a href=\"#1-1-UI设计\" class=\"headerlink\" title=\"1.1 UI设计\"></a>1.1 UI设计</h3><ul>\n<li><a href=\"http://www.calltoidea.com/\">calltoidea</a> 样式。</li>\n<li><a href=\"http://www.colorhunt.co/\">配色参考</a> 网页配色搭配参考</li>\n<li><a href=\"http://docs.kissyui.com/\">KISSY</a> 电子商务网站UI组件</li>\n</ul>\n<h3 id=\"1-2-常用工具\"><a href=\"#1-2-常用工具\" class=\"headerlink\" title=\"1.2 常用工具\"></a>1.2 常用工具</h3><ul>\n<li><a href=\"http://www.bootcss.com/\">BootStrap</a> 开发响应式布局</li>\n<li><a href=\"http://amazeui.org/\">AmazeUI</a> 开发响应式布局</li>\n<li><a href=\"http://www.htmleaf.com/\">jQuery之家</a> 页面布局。</li>\n<li><a href=\"https://codepen.io/\">CodePen</a> 页面布局(网页特效)。</li>\n<li><a href=\"http://www.17sucai.com/\">17素材网</a> 页面布局</li>\n<li><a href=\"http://www.5iweb.com.cn/\">51Web</a> 网页特效库</li>\n<li><a href=\"http://echarts.baidu.com/index.html\">Echarts</a> 数据可视化</li>\n<li><a href=\"https://d3js.org/\">D3.js</a> 数据可视化</li>\n<li><a href=\"http://lbsyun.baidu.com/index.php\">百度地图API</a> 调用百度地图相关服务</li>\n<li><a href=\"http://kindeditor.net/demo.php\">kindeditor</a> 在线Word编辑器</li>\n<li><a href=\"http://www.ngnice.com/\">AngularJs</a></li>\n<li><a href=\"http://jquery.com/\">jQuery</a></li>\n<li><a href=\"http://caniuse.com/\">CanIuse</a> 查询各种浏览器对CSS样式,html标签，SVG,API等的支持性</li>\n<li><a href=\"http://lesscss.cn/\">LESS</a> CSS预处理器</li>\n<li><a href=\"https://www.sass.hk/\">SASS</a> CSS预处理器</li>\n<li><a href=\"http://www.json.cn/\">json解析</a></li>\n<li><a href=\"http://cdn.code.baidu.com/\">百度CDN库</a></li>\n<li><a href=\"http://www.swiper.com.cn/\">Swiper</a> 轮播图插件</li>\n<li><a href=\"http://dev.dcloud.net.cn/mui/\">MUI</a> H5框架做APP端</li>\n<li><a href=\"http://css.doyoe.com/\">CSS参考手册</a> CSS参考手册</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\">CSS参考手册</a> CSS参考手册</li>\n<li><a href=\"http://www.jyvtc.com/dzb/uiFramework/js/zTree-v3.2/api/API_cn.html\">zTree</a> 树结构</li>\n<li><a href=\"http://www.datatables.club/\">Datatables</a> 表格分页，搜索插件</li>\n<li><a href=\"http://www.dropzonejs.com/\">DropzoneJS</a> 拖动上传文件</li>\n<li><a href=\"https://nodejs.org/zh-cn/\">Nodejs</a></li>\n<li><a href=\"http://www.croppic.net/\">croppie</a> 前端图片裁剪插件</li>\n</ul>\n<h3 id=\"1-3-常用技术\"><a href=\"#1-3-常用技术\" class=\"headerlink\" title=\"1.3 常用技术\"></a>1.3 常用技术</h3><ul>\n<li>jQuery懒加载 <a href=\"http://appelsiini.net/projects/lazyload/\">lazyload</a></li>\n</ul>\n<h3 id=\"1-4-前端教学\"><a href=\"#1-4-前端教学\" class=\"headerlink\" title=\"1.4 前端教学\"></a>1.4 前端教学</h3><ul>\n<li><a href=\"http://www.ycku.com/\">瓢城Web俱乐部</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\">ECMAScript6入门</a></li>\n</ul>\n<h2 id=\"2-Android\"><a href=\"#2-Android\" class=\"headerlink\" title=\"2. Android\"></a>2. Android</h2><h3 id=\"2-1-UI设计\"><a href=\"#2-1-UI设计\" class=\"headerlink\" title=\"2.1 UI设计\"></a>2.1 UI设计</h3><ul>\n<li><a href=\"https://material.uplabs.com/\">uplab</a> 样式+代码。</li>\n</ul>\n<h3 id=\"2-2-Android开发\"><a href=\"#2-2-Android开发\" class=\"headerlink\" title=\"2.2 Android开发\"></a>2.2 Android开发</h3><ul>\n<li><a href=\"https://zhezaoyizhuding.github.io/\">龙零</a> Android知识点</li>\n</ul>\n<h2 id=\"3-教学课程\"><a href=\"#3-教学课程\" class=\"headerlink\" title=\"3. 教学课程\"></a>3. 教学课程</h2><ul>\n<li><a href=\"http://www.imooc.com/\">慕课网</a></li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a></li>\n<li><a href=\"http://www.runoob.com/\">菜鸟教程</a></li>\n</ul>\n<h2 id=\"4-常用工具\"><a href=\"#4-常用工具\" class=\"headerlink\" title=\"4. 常用工具\"></a>4. 常用工具</h2><ul>\n<li><a href=\"http://www.699pic.com\">摄图网</a> 高清图片</li>\n<li><a href=\"http://www.nipic.com\">昵图网</a> 高清图片</li>\n<li><a href=\"http://www.500px.com\">500PX</a> 高清图片</li>\n</ul>\n"}],"Post":[{"title":"CSS3伪类选择器","date":"2017-02-22T11:58:26.000Z","_content":"\n本文主要针对伪类选择器的使用进行说明，伪类选择器可以动态的对页面的内容进行样式化，目前有16个强大的新伪类选择器被列入最新的W3C规范中。\n\n## 早期伪类选择器\n\nCSS1时期(1996年)就被纳入规范中的伪类选择器,也是我们最常用到的选择器,这些选择器最常被用到 \"a\" 标签中。\n\n``` bash\n:link\n:visited\n:hover\n:active\n```\n\n1. :link 为链接平常的状态。\n2. :visited 链接被访问过后的状态。\n3. :hover 鼠标放在链接上时的状态。\n4. :active 鼠标被按下，还未松开鼠标时的状态。\n\n## CSS2时期引入的伪类选择器\n\nCSS2规范实在1998年5月发布的。\n\n``` bash\n:lang\n:first-child\n```\n\n1. :lang 指明一个文档所使用的语言。类似于\n\n``` bash\n<html lang=\"en\">\n```\n\n2. :first-child 指明父元素下的一组同级元素中的第一个。\n\n## CSS3时代\n\n### 结构伪类\n\n#### root\n\n``` bash\n:root\n```\n\n:root 伪类选择器表示页面的根元素。即 &lt; html &rt; 元素。\n\n``` bash\n:nth-child(n)\n```\n\n#### nth-child(n)\n\n:nth-child(n) 伪类选择器表示第n个子元素。\n\n``` bash\n<ul>\n\t<li>1</li> ------- li:nth-child(1)\n\t<li>2</li> ------- li:nth-child(2)\n\t<li>3</li> ------- li:nth-child(3)\n\t<li>4</li> ------- li:nth-child(4)\n\t<li>5</li> ------- li:nth-child(5)\n</ul>\n```\n\nli:nth-child(even) 代表代码中偶数行，也可以用 li:nth-child(2n)\nli:nth-child(odd) 代表代码中奇数行，也可以用 li:nth-child(2n+1)\n\n<ul class=\"myli_nth\"><li>列表第1行</li><li>列表第2行</li><li>列表第3行</li><li>列表第4行</li><li>列表第5行</li></ul>\n\n可以看出，偶数行与奇数行表现的颜色不同。\n\n代码如下:\n\nhtml代码\n\n``` bash\n<ul class=\"myli_nth\">\n\t<li>列表第1行</li>\n\t<li>列表第2行</li>\n\t<li>列表第3行</li>\n\t<li>列表第4行</li>\n\t<li>列表第5行</li>\n</ul>\n```\n\nCSS代码\n\n``` bash\n.myli_nth li:nth-child(odd){\n\tbackground: #FFD700;\n}\n\n.myli_nth li:nth-child(even){\n\tbackground: #BFEFFF;\n}\n```\n\n假如要选中一个列表的前3项，我们可以写\n\n``` bash\nli:nth-child(-n+3)\n```\n\n#### nth-last-child(n)\n\n:nth-last-child(n) 和 nth-child(n) 用法完全相同，唯一不同的就是 nth-child(n) 是从第一个开始往下算。而 :nth-last-child(n)是从最后一个往前倒着算。\n\n``` bash\n<ul>\n\t<li>1</li> ------- li:nth-last-child(5)\n\t<li>2</li> ------- li:nth-last-child(4)\n\t<li>3</li> ------- li:nth-last-child(3)\n\t<li>4</li> ------- li:nth-last-child(2)\n\t<li>5</li> ------- li:nth-last-child(1)\n</ul>\n```\n\n#### nth-of-type(n)\n\n:nth-of-type(n) 只针对特定类型的元素应用样式。\n\n例如：我们需要使用更大的字体来表示文章的第一个段落：\n\n``` bash\narticle p:nth-of-type(1) {font-size: 1.5em;}\n```\n\n#### nth-last-of-type(n)\n\n同 :nth-of-type(n) 原理一样，唯一不同的就是 :nth-last-of-type(n) 是从后往前倒序工作。\n\n#### first-of-type\n\n相当于 :nth-of-type(1)\n\n#### last-of-type\n\n相当于 :nth-last-of-type(1)\n\n#### only-of-type\n\n这个伪类用来选择父元素下只有唯一一个某种类型的元素。\n\n``` bash\n<div>\n\t<p>第1个段落</p>\n\t<p>第2个段落</p>\n</div>\n<div>\n\t<p>第3个段落</p>\n</div>\n```\n\n如果上面一段代码有这样一个css：\n\n``` bash\np:only-of-type{color: red;}\n```\n\n那么结果是只有第三个段落的字体颜色会变红。因为只有第三个段落的父元素div有唯一的一个p元素。\n\n#### last-child\n\n:first-child 代表的是第一个子元素。\n:last-child 代表的是最后一个子元素。\n\n#### only-child\n\n如果一个元素是它父元素下的唯一子元素，就可以使用 :only-child 来选中该元素。\n\n#### empty\n\n:empty 这个伪类选择器用来选择没有子元素和内容的元素。\n\n``` bash\n#result:empty{\n\tbackground-color: #f00;\n}\n```\n\n我们可以使用上边的CSS代码来表示用户搜索结果为空的情况。\n\n### 目标伪类\n\n#### target\n\n:target 这个伪类允许我们基于url对页面上的元素设置样式。如果url中有一个标识符(即以'#'开头的字符串)，那么 :target 就可以对以该标识符为id的元素进行样式设置。\n\n如果有这样一个url：\n\n``` bash\nhttp://www.test.com/test#summary\n```\n\nid属性为summary的区域可以这样来写\n\n``` bash\n:target{\n\tbackground-color: #f00;\n}\n```\n\n### 元素状态伪类\n\n#### enabled\n\n:enabled 表示元素可编辑状态时的样式。例如：\n\n``` bash\ninput:enabled{\n\tbackground-color: green;\n}\n```\n\n表示input输入框在可编辑状态下时背景为绿色。\n\n#### disabled\n\n:disabled 表示元素在不可编辑状态时的样式。例如：\n\n``` bash\ninput:disabled{\n\tbackground-color: red;\n}\n```\n\n表示input输入框在可编辑状态下时背景为红色。\n\n#### checked\n\n:checked 表示单选框或多选框在选中状态下时的样式。\n\n``` bash\ninput[type=checkbox]:checked{\n\tfont-weight: bold;\n}\n```\n\n表示多选框在选中状态下时，变为粗体。\n\n### 否定伪类选择器\n\n#### not\n\n:not 选择器表示除指定元素外的所有元素。\n\n``` bash\n:not(header){\n\tbackground-color: blue;\n}\n```\n\n表示页面上除了 header 元素以外的所有元素。\n\n## 总结\n\n一般的项目中，可能我们用到的伪类选择器就那么几个，但是其他不常用的选择器还是需要稍微了解一下，万一在用到的时候，不至于一时想不起来。\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_2.js\"></script>\n","source":"_posts/CSS3伪类选择器.md","raw":"---\ntitle: CSS3伪类选择器\ndate: 2017-02-22 19:58:26\ncategories: \"CSS\"\ntags:\n\t- CSS3\n---\n\n本文主要针对伪类选择器的使用进行说明，伪类选择器可以动态的对页面的内容进行样式化，目前有16个强大的新伪类选择器被列入最新的W3C规范中。\n\n## 早期伪类选择器\n\nCSS1时期(1996年)就被纳入规范中的伪类选择器,也是我们最常用到的选择器,这些选择器最常被用到 \"a\" 标签中。\n\n``` bash\n:link\n:visited\n:hover\n:active\n```\n\n1. :link 为链接平常的状态。\n2. :visited 链接被访问过后的状态。\n3. :hover 鼠标放在链接上时的状态。\n4. :active 鼠标被按下，还未松开鼠标时的状态。\n\n## CSS2时期引入的伪类选择器\n\nCSS2规范实在1998年5月发布的。\n\n``` bash\n:lang\n:first-child\n```\n\n1. :lang 指明一个文档所使用的语言。类似于\n\n``` bash\n<html lang=\"en\">\n```\n\n2. :first-child 指明父元素下的一组同级元素中的第一个。\n\n## CSS3时代\n\n### 结构伪类\n\n#### root\n\n``` bash\n:root\n```\n\n:root 伪类选择器表示页面的根元素。即 &lt; html &rt; 元素。\n\n``` bash\n:nth-child(n)\n```\n\n#### nth-child(n)\n\n:nth-child(n) 伪类选择器表示第n个子元素。\n\n``` bash\n<ul>\n\t<li>1</li> ------- li:nth-child(1)\n\t<li>2</li> ------- li:nth-child(2)\n\t<li>3</li> ------- li:nth-child(3)\n\t<li>4</li> ------- li:nth-child(4)\n\t<li>5</li> ------- li:nth-child(5)\n</ul>\n```\n\nli:nth-child(even) 代表代码中偶数行，也可以用 li:nth-child(2n)\nli:nth-child(odd) 代表代码中奇数行，也可以用 li:nth-child(2n+1)\n\n<ul class=\"myli_nth\"><li>列表第1行</li><li>列表第2行</li><li>列表第3行</li><li>列表第4行</li><li>列表第5行</li></ul>\n\n可以看出，偶数行与奇数行表现的颜色不同。\n\n代码如下:\n\nhtml代码\n\n``` bash\n<ul class=\"myli_nth\">\n\t<li>列表第1行</li>\n\t<li>列表第2行</li>\n\t<li>列表第3行</li>\n\t<li>列表第4行</li>\n\t<li>列表第5行</li>\n</ul>\n```\n\nCSS代码\n\n``` bash\n.myli_nth li:nth-child(odd){\n\tbackground: #FFD700;\n}\n\n.myli_nth li:nth-child(even){\n\tbackground: #BFEFFF;\n}\n```\n\n假如要选中一个列表的前3项，我们可以写\n\n``` bash\nli:nth-child(-n+3)\n```\n\n#### nth-last-child(n)\n\n:nth-last-child(n) 和 nth-child(n) 用法完全相同，唯一不同的就是 nth-child(n) 是从第一个开始往下算。而 :nth-last-child(n)是从最后一个往前倒着算。\n\n``` bash\n<ul>\n\t<li>1</li> ------- li:nth-last-child(5)\n\t<li>2</li> ------- li:nth-last-child(4)\n\t<li>3</li> ------- li:nth-last-child(3)\n\t<li>4</li> ------- li:nth-last-child(2)\n\t<li>5</li> ------- li:nth-last-child(1)\n</ul>\n```\n\n#### nth-of-type(n)\n\n:nth-of-type(n) 只针对特定类型的元素应用样式。\n\n例如：我们需要使用更大的字体来表示文章的第一个段落：\n\n``` bash\narticle p:nth-of-type(1) {font-size: 1.5em;}\n```\n\n#### nth-last-of-type(n)\n\n同 :nth-of-type(n) 原理一样，唯一不同的就是 :nth-last-of-type(n) 是从后往前倒序工作。\n\n#### first-of-type\n\n相当于 :nth-of-type(1)\n\n#### last-of-type\n\n相当于 :nth-last-of-type(1)\n\n#### only-of-type\n\n这个伪类用来选择父元素下只有唯一一个某种类型的元素。\n\n``` bash\n<div>\n\t<p>第1个段落</p>\n\t<p>第2个段落</p>\n</div>\n<div>\n\t<p>第3个段落</p>\n</div>\n```\n\n如果上面一段代码有这样一个css：\n\n``` bash\np:only-of-type{color: red;}\n```\n\n那么结果是只有第三个段落的字体颜色会变红。因为只有第三个段落的父元素div有唯一的一个p元素。\n\n#### last-child\n\n:first-child 代表的是第一个子元素。\n:last-child 代表的是最后一个子元素。\n\n#### only-child\n\n如果一个元素是它父元素下的唯一子元素，就可以使用 :only-child 来选中该元素。\n\n#### empty\n\n:empty 这个伪类选择器用来选择没有子元素和内容的元素。\n\n``` bash\n#result:empty{\n\tbackground-color: #f00;\n}\n```\n\n我们可以使用上边的CSS代码来表示用户搜索结果为空的情况。\n\n### 目标伪类\n\n#### target\n\n:target 这个伪类允许我们基于url对页面上的元素设置样式。如果url中有一个标识符(即以'#'开头的字符串)，那么 :target 就可以对以该标识符为id的元素进行样式设置。\n\n如果有这样一个url：\n\n``` bash\nhttp://www.test.com/test#summary\n```\n\nid属性为summary的区域可以这样来写\n\n``` bash\n:target{\n\tbackground-color: #f00;\n}\n```\n\n### 元素状态伪类\n\n#### enabled\n\n:enabled 表示元素可编辑状态时的样式。例如：\n\n``` bash\ninput:enabled{\n\tbackground-color: green;\n}\n```\n\n表示input输入框在可编辑状态下时背景为绿色。\n\n#### disabled\n\n:disabled 表示元素在不可编辑状态时的样式。例如：\n\n``` bash\ninput:disabled{\n\tbackground-color: red;\n}\n```\n\n表示input输入框在可编辑状态下时背景为红色。\n\n#### checked\n\n:checked 表示单选框或多选框在选中状态下时的样式。\n\n``` bash\ninput[type=checkbox]:checked{\n\tfont-weight: bold;\n}\n```\n\n表示多选框在选中状态下时，变为粗体。\n\n### 否定伪类选择器\n\n#### not\n\n:not 选择器表示除指定元素外的所有元素。\n\n``` bash\n:not(header){\n\tbackground-color: blue;\n}\n```\n\n表示页面上除了 header 元素以外的所有元素。\n\n## 总结\n\n一般的项目中，可能我们用到的伪类选择器就那么几个，但是其他不常用的选择器还是需要稍微了解一下，万一在用到的时候，不至于一时想不起来。\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_2.js\"></script>\n","slug":"CSS3伪类选择器","published":1,"updated":"2017-05-18T10:03:24.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxxp00001gwdoohubl8s","content":"<p>本文主要针对伪类选择器的使用进行说明，伪类选择器可以动态的对页面的内容进行样式化，目前有16个强大的新伪类选择器被列入最新的W3C规范中。</p>\n<h2 id=\"早期伪类选择器\"><a href=\"#早期伪类选择器\" class=\"headerlink\" title=\"早期伪类选择器\"></a>早期伪类选择器</h2><p>CSS1时期(1996年)就被纳入规范中的伪类选择器,也是我们最常用到的选择器,这些选择器最常被用到 “a” 标签中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:link</div><div class=\"line\">:visited</div><div class=\"line\">:hover</div><div class=\"line\">:active</div></pre></td></tr></table></figure>\n<ol>\n<li>:link 为链接平常的状态。</li>\n<li>:visited 链接被访问过后的状态。</li>\n<li>:hover 鼠标放在链接上时的状态。</li>\n<li>:active 鼠标被按下，还未松开鼠标时的状态。</li>\n</ol>\n<h2 id=\"CSS2时期引入的伪类选择器\"><a href=\"#CSS2时期引入的伪类选择器\" class=\"headerlink\" title=\"CSS2时期引入的伪类选择器\"></a>CSS2时期引入的伪类选择器</h2><p>CSS2规范实在1998年5月发布的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">:lang</div><div class=\"line\">:first-child</div></pre></td></tr></table></figure>\n<ol>\n<li>:lang 指明一个文档所使用的语言。类似于</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>:first-child 指明父元素下的一组同级元素中的第一个。</li>\n</ol>\n<h2 id=\"CSS3时代\"><a href=\"#CSS3时代\" class=\"headerlink\" title=\"CSS3时代\"></a>CSS3时代</h2><h3 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h3><h4 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:root</div></pre></td></tr></table></figure>\n<p>:root 伪类选择器表示页面的根元素。即 &lt; html &rt; 元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:nth-child(n)</div></pre></td></tr></table></figure>\n<h4 id=\"nth-child-n\"><a href=\"#nth-child-n\" class=\"headerlink\" title=\"nth-child(n)\"></a>nth-child(n)</h4><p>:nth-child(n) 伪类选择器表示第n个子元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">\t&lt;li&gt;1&lt;/li&gt; ------- li:nth-child(1)</div><div class=\"line\">\t&lt;li&gt;2&lt;/li&gt; ------- li:nth-child(2)</div><div class=\"line\">\t&lt;li&gt;3&lt;/li&gt; ------- li:nth-child(3)</div><div class=\"line\">\t&lt;li&gt;4&lt;/li&gt; ------- li:nth-child(4)</div><div class=\"line\">\t&lt;li&gt;5&lt;/li&gt; ------- li:nth-child(5)</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>li:nth-child(even) 代表代码中偶数行，也可以用 li:nth-child(2n)<br>li:nth-child(odd) 代表代码中奇数行，也可以用 li:nth-child(2n+1)</p>\n<ul class=\"myli_nth\"><li>列表第1行</li><li>列表第2行</li><li>列表第3行</li><li>列表第4行</li><li>列表第5行</li></ul>\n\n<p>可以看出，偶数行与奇数行表现的颜色不同。</p>\n<p>代码如下:</p>\n<p>html代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"myli_nth\"</span>&gt;</div><div class=\"line\">\t&lt;li&gt;列表第1行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第2行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第3行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第4行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第5行&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>CSS代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.myli_nth li:nth-child(odd)&#123;</div><div class=\"line\">\tbackground: <span class=\"comment\">#FFD700;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.myli_nth li:nth-child(even)&#123;</div><div class=\"line\">\tbackground: <span class=\"comment\">#BFEFFF;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假如要选中一个列表的前3项，我们可以写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">li:nth-child(-n+3)</div></pre></td></tr></table></figure>\n<h4 id=\"nth-last-child-n\"><a href=\"#nth-last-child-n\" class=\"headerlink\" title=\"nth-last-child(n)\"></a>nth-last-child(n)</h4><p>:nth-last-child(n) 和 nth-child(n) 用法完全相同，唯一不同的就是 nth-child(n) 是从第一个开始往下算。而 :nth-last-child(n)是从最后一个往前倒着算。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">\t&lt;li&gt;1&lt;/li&gt; ------- li:nth-last-child(5)</div><div class=\"line\">\t&lt;li&gt;2&lt;/li&gt; ------- li:nth-last-child(4)</div><div class=\"line\">\t&lt;li&gt;3&lt;/li&gt; ------- li:nth-last-child(3)</div><div class=\"line\">\t&lt;li&gt;4&lt;/li&gt; ------- li:nth-last-child(2)</div><div class=\"line\">\t&lt;li&gt;5&lt;/li&gt; ------- li:nth-last-child(1)</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"nth-of-type-n\"><a href=\"#nth-of-type-n\" class=\"headerlink\" title=\"nth-of-type(n)\"></a>nth-of-type(n)</h4><p>:nth-of-type(n) 只针对特定类型的元素应用样式。</p>\n<p>例如：我们需要使用更大的字体来表示文章的第一个段落：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">article p:nth-of-type(1) &#123;font-size: 1.5em;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"nth-last-of-type-n\"><a href=\"#nth-last-of-type-n\" class=\"headerlink\" title=\"nth-last-of-type(n)\"></a>nth-last-of-type(n)</h4><p>同 :nth-of-type(n) 原理一样，唯一不同的就是 :nth-last-of-type(n) 是从后往前倒序工作。</p>\n<h4 id=\"first-of-type\"><a href=\"#first-of-type\" class=\"headerlink\" title=\"first-of-type\"></a>first-of-type</h4><p>相当于 :nth-of-type(1)</p>\n<h4 id=\"last-of-type\"><a href=\"#last-of-type\" class=\"headerlink\" title=\"last-of-type\"></a>last-of-type</h4><p>相当于 :nth-last-of-type(1)</p>\n<h4 id=\"only-of-type\"><a href=\"#only-of-type\" class=\"headerlink\" title=\"only-of-type\"></a>only-of-type</h4><p>这个伪类用来选择父元素下只有唯一一个某种类型的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;p&gt;第1个段落&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;第2个段落&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;p&gt;第3个段落&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>如果上面一段代码有这样一个css：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">p:only-of-type&#123;color: red;&#125;</div></pre></td></tr></table></figure>\n<p>那么结果是只有第三个段落的字体颜色会变红。因为只有第三个段落的父元素div有唯一的一个p元素。</p>\n<h4 id=\"last-child\"><a href=\"#last-child\" class=\"headerlink\" title=\"last-child\"></a>last-child</h4><p>:first-child 代表的是第一个子元素。<br>:last-child 代表的是最后一个子元素。</p>\n<h4 id=\"only-child\"><a href=\"#only-child\" class=\"headerlink\" title=\"only-child\"></a>only-child</h4><p>如果一个元素是它父元素下的唯一子元素，就可以使用 :only-child 来选中该元素。</p>\n<h4 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h4><p>:empty 这个伪类选择器用来选择没有子元素和内容的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#result:empty&#123;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#f00;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以使用上边的CSS代码来表示用户搜索结果为空的情况。</p>\n<h3 id=\"目标伪类\"><a href=\"#目标伪类\" class=\"headerlink\" title=\"目标伪类\"></a>目标伪类</h3><h4 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h4><p>:target 这个伪类允许我们基于url对页面上的元素设置样式。如果url中有一个标识符(即以’#’开头的字符串)，那么 :target 就可以对以该标识符为id的元素进行样式设置。</p>\n<p>如果有这样一个url：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.test.com/<span class=\"built_in\">test</span><span class=\"comment\">#summary</span></div></pre></td></tr></table></figure>\n<p>id属性为summary的区域可以这样来写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:target&#123;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#f00;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"元素状态伪类\"><a href=\"#元素状态伪类\" class=\"headerlink\" title=\"元素状态伪类\"></a>元素状态伪类</h3><h4 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h4><p>:enabled 表示元素可编辑状态时的样式。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input:enabled&#123;</div><div class=\"line\">\tbackground-color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示input输入框在可编辑状态下时背景为绿色。</p>\n<h4 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h4><p>:disabled 表示元素在不可编辑状态时的样式。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input:disabled&#123;</div><div class=\"line\">\tbackground-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示input输入框在可编辑状态下时背景为红色。</p>\n<h4 id=\"checked\"><a href=\"#checked\" class=\"headerlink\" title=\"checked\"></a>checked</h4><p>:checked 表示单选框或多选框在选中状态下时的样式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input[<span class=\"built_in\">type</span>=checkbox]:checked&#123;</div><div class=\"line\">\tfont-weight: bold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示多选框在选中状态下时，变为粗体。</p>\n<h3 id=\"否定伪类选择器\"><a href=\"#否定伪类选择器\" class=\"headerlink\" title=\"否定伪类选择器\"></a>否定伪类选择器</h3><h4 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a>not</h4><p>:not 选择器表示除指定元素外的所有元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:not(header)&#123;</div><div class=\"line\">\tbackground-color: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示页面上除了 header 元素以外的所有元素。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一般的项目中，可能我们用到的伪类选择器就那么几个，但是其他不常用的选择器还是需要稍微了解一下，万一在用到的时候，不至于一时想不起来。</p>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_2.js\"></script>\n","excerpt":"","more":"<p>本文主要针对伪类选择器的使用进行说明，伪类选择器可以动态的对页面的内容进行样式化，目前有16个强大的新伪类选择器被列入最新的W3C规范中。</p>\n<h2 id=\"早期伪类选择器\"><a href=\"#早期伪类选择器\" class=\"headerlink\" title=\"早期伪类选择器\"></a>早期伪类选择器</h2><p>CSS1时期(1996年)就被纳入规范中的伪类选择器,也是我们最常用到的选择器,这些选择器最常被用到 “a” 标签中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:link</div><div class=\"line\">:visited</div><div class=\"line\">:hover</div><div class=\"line\">:active</div></pre></td></tr></table></figure>\n<ol>\n<li>:link 为链接平常的状态。</li>\n<li>:visited 链接被访问过后的状态。</li>\n<li>:hover 鼠标放在链接上时的状态。</li>\n<li>:active 鼠标被按下，还未松开鼠标时的状态。</li>\n</ol>\n<h2 id=\"CSS2时期引入的伪类选择器\"><a href=\"#CSS2时期引入的伪类选择器\" class=\"headerlink\" title=\"CSS2时期引入的伪类选择器\"></a>CSS2时期引入的伪类选择器</h2><p>CSS2规范实在1998年5月发布的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">:lang</div><div class=\"line\">:first-child</div></pre></td></tr></table></figure>\n<ol>\n<li>:lang 指明一个文档所使用的语言。类似于</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>:first-child 指明父元素下的一组同级元素中的第一个。</li>\n</ol>\n<h2 id=\"CSS3时代\"><a href=\"#CSS3时代\" class=\"headerlink\" title=\"CSS3时代\"></a>CSS3时代</h2><h3 id=\"结构伪类\"><a href=\"#结构伪类\" class=\"headerlink\" title=\"结构伪类\"></a>结构伪类</h3><h4 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:root</div></pre></td></tr></table></figure>\n<p>:root 伪类选择器表示页面的根元素。即 &lt; html &rt; 元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:nth-child(n)</div></pre></td></tr></table></figure>\n<h4 id=\"nth-child-n\"><a href=\"#nth-child-n\" class=\"headerlink\" title=\"nth-child(n)\"></a>nth-child(n)</h4><p>:nth-child(n) 伪类选择器表示第n个子元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">\t&lt;li&gt;1&lt;/li&gt; ------- li:nth-child(1)</div><div class=\"line\">\t&lt;li&gt;2&lt;/li&gt; ------- li:nth-child(2)</div><div class=\"line\">\t&lt;li&gt;3&lt;/li&gt; ------- li:nth-child(3)</div><div class=\"line\">\t&lt;li&gt;4&lt;/li&gt; ------- li:nth-child(4)</div><div class=\"line\">\t&lt;li&gt;5&lt;/li&gt; ------- li:nth-child(5)</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>li:nth-child(even) 代表代码中偶数行，也可以用 li:nth-child(2n)<br>li:nth-child(odd) 代表代码中奇数行，也可以用 li:nth-child(2n+1)</p>\n<ul class=\"myli_nth\"><li>列表第1行</li><li>列表第2行</li><li>列表第3行</li><li>列表第4行</li><li>列表第5行</li></ul>\n\n<p>可以看出，偶数行与奇数行表现的颜色不同。</p>\n<p>代码如下:</p>\n<p>html代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"myli_nth\"</span>&gt;</div><div class=\"line\">\t&lt;li&gt;列表第1行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第2行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第3行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第4行&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;列表第5行&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>CSS代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.myli_nth li:nth-child(odd)&#123;</div><div class=\"line\">\tbackground: <span class=\"comment\">#FFD700;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.myli_nth li:nth-child(even)&#123;</div><div class=\"line\">\tbackground: <span class=\"comment\">#BFEFFF;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假如要选中一个列表的前3项，我们可以写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">li:nth-child(-n+3)</div></pre></td></tr></table></figure>\n<h4 id=\"nth-last-child-n\"><a href=\"#nth-last-child-n\" class=\"headerlink\" title=\"nth-last-child(n)\"></a>nth-last-child(n)</h4><p>:nth-last-child(n) 和 nth-child(n) 用法完全相同，唯一不同的就是 nth-child(n) 是从第一个开始往下算。而 :nth-last-child(n)是从最后一个往前倒着算。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">\t&lt;li&gt;1&lt;/li&gt; ------- li:nth-last-child(5)</div><div class=\"line\">\t&lt;li&gt;2&lt;/li&gt; ------- li:nth-last-child(4)</div><div class=\"line\">\t&lt;li&gt;3&lt;/li&gt; ------- li:nth-last-child(3)</div><div class=\"line\">\t&lt;li&gt;4&lt;/li&gt; ------- li:nth-last-child(2)</div><div class=\"line\">\t&lt;li&gt;5&lt;/li&gt; ------- li:nth-last-child(1)</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"nth-of-type-n\"><a href=\"#nth-of-type-n\" class=\"headerlink\" title=\"nth-of-type(n)\"></a>nth-of-type(n)</h4><p>:nth-of-type(n) 只针对特定类型的元素应用样式。</p>\n<p>例如：我们需要使用更大的字体来表示文章的第一个段落：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">article p:nth-of-type(1) &#123;font-size: 1.5em;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"nth-last-of-type-n\"><a href=\"#nth-last-of-type-n\" class=\"headerlink\" title=\"nth-last-of-type(n)\"></a>nth-last-of-type(n)</h4><p>同 :nth-of-type(n) 原理一样，唯一不同的就是 :nth-last-of-type(n) 是从后往前倒序工作。</p>\n<h4 id=\"first-of-type\"><a href=\"#first-of-type\" class=\"headerlink\" title=\"first-of-type\"></a>first-of-type</h4><p>相当于 :nth-of-type(1)</p>\n<h4 id=\"last-of-type\"><a href=\"#last-of-type\" class=\"headerlink\" title=\"last-of-type\"></a>last-of-type</h4><p>相当于 :nth-last-of-type(1)</p>\n<h4 id=\"only-of-type\"><a href=\"#only-of-type\" class=\"headerlink\" title=\"only-of-type\"></a>only-of-type</h4><p>这个伪类用来选择父元素下只有唯一一个某种类型的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;p&gt;第1个段落&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;第2个段落&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;p&gt;第3个段落&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>如果上面一段代码有这样一个css：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">p:only-of-type&#123;color: red;&#125;</div></pre></td></tr></table></figure>\n<p>那么结果是只有第三个段落的字体颜色会变红。因为只有第三个段落的父元素div有唯一的一个p元素。</p>\n<h4 id=\"last-child\"><a href=\"#last-child\" class=\"headerlink\" title=\"last-child\"></a>last-child</h4><p>:first-child 代表的是第一个子元素。<br>:last-child 代表的是最后一个子元素。</p>\n<h4 id=\"only-child\"><a href=\"#only-child\" class=\"headerlink\" title=\"only-child\"></a>only-child</h4><p>如果一个元素是它父元素下的唯一子元素，就可以使用 :only-child 来选中该元素。</p>\n<h4 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h4><p>:empty 这个伪类选择器用来选择没有子元素和内容的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#result:empty&#123;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#f00;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以使用上边的CSS代码来表示用户搜索结果为空的情况。</p>\n<h3 id=\"目标伪类\"><a href=\"#目标伪类\" class=\"headerlink\" title=\"目标伪类\"></a>目标伪类</h3><h4 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h4><p>:target 这个伪类允许我们基于url对页面上的元素设置样式。如果url中有一个标识符(即以’#’开头的字符串)，那么 :target 就可以对以该标识符为id的元素进行样式设置。</p>\n<p>如果有这样一个url：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.test.com/<span class=\"built_in\">test</span><span class=\"comment\">#summary</span></div></pre></td></tr></table></figure>\n<p>id属性为summary的区域可以这样来写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:target&#123;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#f00;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"元素状态伪类\"><a href=\"#元素状态伪类\" class=\"headerlink\" title=\"元素状态伪类\"></a>元素状态伪类</h3><h4 id=\"enabled\"><a href=\"#enabled\" class=\"headerlink\" title=\"enabled\"></a>enabled</h4><p>:enabled 表示元素可编辑状态时的样式。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input:enabled&#123;</div><div class=\"line\">\tbackground-color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示input输入框在可编辑状态下时背景为绿色。</p>\n<h4 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h4><p>:disabled 表示元素在不可编辑状态时的样式。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input:disabled&#123;</div><div class=\"line\">\tbackground-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示input输入框在可编辑状态下时背景为红色。</p>\n<h4 id=\"checked\"><a href=\"#checked\" class=\"headerlink\" title=\"checked\"></a>checked</h4><p>:checked 表示单选框或多选框在选中状态下时的样式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">input[<span class=\"built_in\">type</span>=checkbox]:checked&#123;</div><div class=\"line\">\tfont-weight: bold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示多选框在选中状态下时，变为粗体。</p>\n<h3 id=\"否定伪类选择器\"><a href=\"#否定伪类选择器\" class=\"headerlink\" title=\"否定伪类选择器\"></a>否定伪类选择器</h3><h4 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a>not</h4><p>:not 选择器表示除指定元素外的所有元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:not(header)&#123;</div><div class=\"line\">\tbackground-color: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表示页面上除了 header 元素以外的所有元素。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一般的项目中，可能我们用到的伪类选择器就那么几个，但是其他不常用的选择器还是需要稍微了解一下，万一在用到的时候，不至于一时想不起来。</p>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_2.js\"></script>\n"},{"title":"SASS用法","date":"2017-05-18T09:50:09.000Z","_content":"\n## SASS起源\n\nCSS不是一种编程语言，写起来比较麻烦，而且如果要修改整体颜色风格的话，比较费事，需要改很多地方，还要一个一个地找。所以如果将一些公共元素定义为函数中的变量，就可以只修改一处，多处共同更新了。这就是\"CSS预处理器\"的初步提现。\n\nCSS预处理器：CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题。其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。\n\n常用的\"CSS预处理器\"有：[SASS](http://sass-lang.com/) , [LESS](http://lesscss.org/) , [Stylus](http://www.zhangxinxu.com/jq/stylus/)\n\n## SASS简介\n\nSASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n## 安装\n\nSASS底层是由Ruby语言编写的，但是这两者没有必然的联系，不需要学会Ruby语言也可以编写SASS。但是，在安装SASS之前，必须先安装Ruby。\n\n### 安装Ruby\n\n- Mac OS 或 Linux 安装Ruby ,[点击查看安装方法](http://www.jianshu.com/p/daa92187621c);\n\n- Windows 安装Ruby ,[点击进入下载页面](http://rubyinstaller.org/downloads);\n\n### 安装SASS\n\nRuby安装完成后，Windows打开安装好的Ruby，点击\"Start Command Prompt with Ruby\"，出现命令行，在命令行中输入\n\n``` bash\ngem install sass\n```\n\n然后等待安装完成就可以使用了。\n\n## 配置\n\n打开Ruby命令行\n\n{% asset_img openRuby.jpg 打开Ruby %}\n\n通过Ruby命令行，进入到需要创建css的目录(此处以windows为例)。\n{% asset_img goToDir.jpg 进入目录 %}\n\n在目录下新建文件test.scss。新建完成后，在test.scss文件中，写以下css：\n\n``` bash\n$blue: #2828ff;\ndiv {\n\tcolor: $blue;\n}\n```\n\n完成后，保存，并运行：\n\n``` bash\nsass test.scss\n```\n\n命令行窗口显示编译后的css样式：\n\n{% asset_img runTestscss.jpg test.scss %}\n\n这时候我们需要生成test.css文件，在命令行窗口运行\n\n``` bash\nsass test.scss test.css\n```\n\n运行后，将在同级目录下自动生成test.css文件。\n\n一般我们不可能每修改一次test.scss文件，编译一次。所以，SASS提供了监听机制，用来监听文件或目录，一旦修改源文件，编译后的文件也会自动生成。\n\n``` bash\n//监听单文件\nsass --watch test.scss:test.css\n//监听目录 sassStudy和sassToCss都是文件夹，即目录。\nsass --watch sassStudy:sassToCss\n```\n\n** SASS提供了四种编译风格 **\n\n- nested：嵌套缩进的css代码，它是默认值。\n- expanded：没有缩进的、扩展的css代码。\n- compact：简洁格式的css代码。\n- compressed：压缩后的css代码。\n\n一般我们使用compressed编译风格，使用方法为：\n\n``` bash\nsass --style compressed test.sass test.css\n```\n\n## 基本语法\n\n### 后缀名\n\nSASS有两种文件后缀名：test.sass和test.scss。两个的用法都差不多，区别在于，sass语法更适用于python类不带括号和分号的程序员，scss跟我们平时写css的格式差不多。\n\n``` bash\n//后缀名为.sass的写法\nbody\n  background: #eee\n  font-size:12px\np\n  background: #0982c1\n  \n//后缀名为.scss的写法\nbody {\n  background: #eee;\n  font-size:12px;\n}\np {\n  background: #0982c1;\n}\n```\n\n### 变量\n\n#### 普通变量\n\nSASS允许使用变量来定义属性名,CSS类名,或属性值，变量的定义类似于PHP，以\"$\"符号开头：\n\n定义属性值：\n\n``` bash\n$red: #f00;\n  \ndiv {\n\tcolor: $red;\n}\n```\n\n定义属性名：\n\n``` bash\n$direction: top;\n  \ndiv{\n\tborder-#{$direction}: 1px solid #eee;\n}\n```\n\n定义类名：\n\n``` bash\n$direction: top;\n  \n.myborder-#{$direction} {\n\tborder-#{$direction}: 1px solid #eee;\n}\n```\n\n#### 默认变量\n\nSASS设置默认变量\n\n``` bash\n$baseLineHeight: 1.5 !default;\n  \nbody{\n\tline-height: $baseLineHeight; //line-height: 1.5;\n}\n```\n\nSASS的默认变量一般用来设置默认值，然后根据需求来覆盖，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。\n\n``` bash\n//sass style\n//-------------------------------\n$baseLineHeight:        2;\n$baseLineHeight:        1.5 !default;\n\nbody{\n\tline-height: $baseLineHeight; //line-height: 2;\n}\n```\n\n#### 多值变量\n\n多值变量分为list类型和map类型，list类似于js中的数组，map类似于js中的对象。\n\n- list变量\n\n``` bash\n$linkColor:#08c #333 !default;//第一个值为默认值，第二个鼠标滑过值\na {\n  color:nth($linkColor,1); //color: #08c;\n  \n  &:hover {\n    color:nth($linkColor,2); //color: #333; \n  }\n}\n```\n\n- map变量\n\n``` bash\n// SASS\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n  \n// CSS\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n### 注释\n\nSASS提供了两种类型的注释：\n\n- 单行注释 \"// 注释\",只保留在SASS源文件中，编译后的CSS文件无该注释。\n\n- 多行注释 \"/* 注释 */\",这种注释会保留到编译后的CSS文件里。\n\n- 多行注释里还有一种, \"/*! 注释 */\",在 \"/* \"后面加一个感叹号 \"!\",表明这是重要注释，即使是压缩模式编译，也会保留这行注释，通常用来声明版权信息。\n\n### 嵌套\n\nSASS嵌套分为两种：选择器嵌套和属性嵌套。\n\n1.选择器嵌套\n\n选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性.\n\n在选择器嵌套中，可以使用&表示父元素选择器.\n\n``` bash\n// SASS\n#top_nav{\n  background-color:#333;\n  li{\n    float:left;\n  }\n  a{\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n  \n    &:hover{\n      color:#ddd;\n    }\n  }\n}\n  \n// CSS\n#top_nav{\n  background-color:#333;\n}  \n#top_nav li{\n  float:left;\n}\n#top_nav a{\n  display: block;\n  padding: 0 10px;\n  color: #fff;\n}\n#top_nav a:hover{\n  color:#ddd;\n}\n```\n\n2.属性嵌套\n\n** 属性后面必须加上冒号 **\n\n``` bash\n//SASS\np {\n  border: {\n    color: red;\n  }\n}\n  \n//CSS\np {\n  border-color: red;\n}\n```\n\n### 运算\n\nSASS支持运算功能，可以对数值型的参数，变量等进行加减乘除等运算。\n\n** 运算符前后请留一个空格，不然会出错。 **\n\n``` bash\n$var: 80%;\nbody {\n  margin: (14px/2);\n  top: 50px + 100px;\n  width: $var + 10%;\n}\n```\n\n## CSS重用\n\n### 继承@extend\n\nSASS允许一个选择器，继承另一个选择器的样式。关键词为 \"@extend\".\n\n例：class2要继承class1的样式。\n``` bash\n// SASS\n.class1 {\n  border: 1px solid #ddd;\n}\n.class2 {\n  @extend .class1;\n  font-size: 1.2em;\n}\n  \n// CSS\n.class1 {\n  border: 1px solid #ddd;\n}\n.class2 {\n  border: 1px solid #ddd;\n  font-size: 1.2em;\n}\n```\n\n### 定义代码块@mixin,@include\n\nMixin类似于C语言的宏，是可以重用的代码块。\n\nmixin有两种类型：一种是不带参数的mixin，一种是带参数的mixin；\n\n#### 不带参数mixin\n\n``` bash\n// SASS\n@mixin center-block {\n  margin-left:auto;\n  margin-right:auto;\n}\n.demo {\n  @include center-block;\n}\n\n//CSS\n.demo {\n  margin-left:auto;\n  margin-right:auto;\n}\n```\n\n#### 带参数mixin\n\n带参数的mixin，如果不指定参数，则使用默认值。\n\n``` bash\n// SASS\n@mixin left($value: 10px) {\n  float: left;\n  margin-right: $value;\n}\ndiv1 {\n  @include left;\n}\ndiv2 {\n  @include left(20px);\n}\n  \n// CSS\ndiv1 {\n  float: left;\n  margin-right: 10px;\n}\ndiv2 {\n  float: left;\n  margin-right: 20px;\n}\n```\n\n### 导入CSS @import\n\n- @import命令，用来插入外部文件。\n\t@import \"path/filename.scss\";\n- 如果插入的是.css文件，则等同于css的import命令。\n\t@import \"foo.css\";\n  \n通过@import将b.css文件导入a.scss文件,b.css文件的内容不会被导入编译后的a.css文件中。\n\n通过@import将c.scss文件导入a.scss文件,c.scss文件的内容将会被导入编译后的a.css文件中。\n\n## 高级用法\n\nSASS不仅有变量，运算符等用法，还有循环、判断等函数用法，使CSS更灵活。\n\n### if,else判断\n\n``` bash\np {\n  @if 1 + 1 == 2 { border: 1px solid; }\n  @if 5 < 3 { border: 2px dotted; }\n}\n\n@if lightness($color) > 30% {\n  background-color: #000;\n} @else {\n  background-color: #fff;\n}\n```\n\n### for循环\n\n``` bash\n// SASS\n@for $i from 1 to 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n  \n// CSS\n.item-1 {\n  width: 2em; \n}\n.item-2 {\n  width: 4em; \n}\n.item-3 {\n  width: 6em; \n}\n```\n\n### while循环\n\n``` bash\n// SASS\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n// CSS\n.item-6 {\n  width: 12em;\n}\n.item-4 {\n  width: 8em;\n}\n.item-2 {\n  width: 4em;\n}\n```\n\n### each循环\n\n``` bash\n// SASS\n$img-list: a,b,c,d;\n@each $img in img-list {\n  .show-#{$img} {\n    background-image: url(\"/image/#{$img}.jpg\");\n  }\n}\n  \n// CSS\n.show-a {\n  background-image: url(\"/image/a.jpg\");\n}\n.show-b {\n  background-image: url(\"/image/b.jpg\");\n}\n.show-c {\n  background-image: url(\"/image/c.jpg\");\n}\n.show-d {\n  background-image: url(\"/image/d.jpg\");\n}\n```\n\n### 自定义函数@function\n\nSASS为用户提供了自定义编写函数的方法。\n\n``` bash\n// SASS\n@function multiply($i) {\n  @return $i * 2;\n}\n#navbar {\n  font-size: multiply(15px);\n}\n  \n// CSS\n#navbar {\n  font-size: 30px;\n}\n```\n\n本章完！","source":"_posts/SASS用法.md","raw":"---\ntitle: SASS用法\ndate: 2017-05-18 17:50:09\ncategories: \"CSS\"\ntags: \n\t- CSS\n\t- SASS\n---\n\n## SASS起源\n\nCSS不是一种编程语言，写起来比较麻烦，而且如果要修改整体颜色风格的话，比较费事，需要改很多地方，还要一个一个地找。所以如果将一些公共元素定义为函数中的变量，就可以只修改一处，多处共同更新了。这就是\"CSS预处理器\"的初步提现。\n\nCSS预处理器：CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题。其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。\n\n常用的\"CSS预处理器\"有：[SASS](http://sass-lang.com/) , [LESS](http://lesscss.org/) , [Stylus](http://www.zhangxinxu.com/jq/stylus/)\n\n## SASS简介\n\nSASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n## 安装\n\nSASS底层是由Ruby语言编写的，但是这两者没有必然的联系，不需要学会Ruby语言也可以编写SASS。但是，在安装SASS之前，必须先安装Ruby。\n\n### 安装Ruby\n\n- Mac OS 或 Linux 安装Ruby ,[点击查看安装方法](http://www.jianshu.com/p/daa92187621c);\n\n- Windows 安装Ruby ,[点击进入下载页面](http://rubyinstaller.org/downloads);\n\n### 安装SASS\n\nRuby安装完成后，Windows打开安装好的Ruby，点击\"Start Command Prompt with Ruby\"，出现命令行，在命令行中输入\n\n``` bash\ngem install sass\n```\n\n然后等待安装完成就可以使用了。\n\n## 配置\n\n打开Ruby命令行\n\n{% asset_img openRuby.jpg 打开Ruby %}\n\n通过Ruby命令行，进入到需要创建css的目录(此处以windows为例)。\n{% asset_img goToDir.jpg 进入目录 %}\n\n在目录下新建文件test.scss。新建完成后，在test.scss文件中，写以下css：\n\n``` bash\n$blue: #2828ff;\ndiv {\n\tcolor: $blue;\n}\n```\n\n完成后，保存，并运行：\n\n``` bash\nsass test.scss\n```\n\n命令行窗口显示编译后的css样式：\n\n{% asset_img runTestscss.jpg test.scss %}\n\n这时候我们需要生成test.css文件，在命令行窗口运行\n\n``` bash\nsass test.scss test.css\n```\n\n运行后，将在同级目录下自动生成test.css文件。\n\n一般我们不可能每修改一次test.scss文件，编译一次。所以，SASS提供了监听机制，用来监听文件或目录，一旦修改源文件，编译后的文件也会自动生成。\n\n``` bash\n//监听单文件\nsass --watch test.scss:test.css\n//监听目录 sassStudy和sassToCss都是文件夹，即目录。\nsass --watch sassStudy:sassToCss\n```\n\n** SASS提供了四种编译风格 **\n\n- nested：嵌套缩进的css代码，它是默认值。\n- expanded：没有缩进的、扩展的css代码。\n- compact：简洁格式的css代码。\n- compressed：压缩后的css代码。\n\n一般我们使用compressed编译风格，使用方法为：\n\n``` bash\nsass --style compressed test.sass test.css\n```\n\n## 基本语法\n\n### 后缀名\n\nSASS有两种文件后缀名：test.sass和test.scss。两个的用法都差不多，区别在于，sass语法更适用于python类不带括号和分号的程序员，scss跟我们平时写css的格式差不多。\n\n``` bash\n//后缀名为.sass的写法\nbody\n  background: #eee\n  font-size:12px\np\n  background: #0982c1\n  \n//后缀名为.scss的写法\nbody {\n  background: #eee;\n  font-size:12px;\n}\np {\n  background: #0982c1;\n}\n```\n\n### 变量\n\n#### 普通变量\n\nSASS允许使用变量来定义属性名,CSS类名,或属性值，变量的定义类似于PHP，以\"$\"符号开头：\n\n定义属性值：\n\n``` bash\n$red: #f00;\n  \ndiv {\n\tcolor: $red;\n}\n```\n\n定义属性名：\n\n``` bash\n$direction: top;\n  \ndiv{\n\tborder-#{$direction}: 1px solid #eee;\n}\n```\n\n定义类名：\n\n``` bash\n$direction: top;\n  \n.myborder-#{$direction} {\n\tborder-#{$direction}: 1px solid #eee;\n}\n```\n\n#### 默认变量\n\nSASS设置默认变量\n\n``` bash\n$baseLineHeight: 1.5 !default;\n  \nbody{\n\tline-height: $baseLineHeight; //line-height: 1.5;\n}\n```\n\nSASS的默认变量一般用来设置默认值，然后根据需求来覆盖，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。\n\n``` bash\n//sass style\n//-------------------------------\n$baseLineHeight:        2;\n$baseLineHeight:        1.5 !default;\n\nbody{\n\tline-height: $baseLineHeight; //line-height: 2;\n}\n```\n\n#### 多值变量\n\n多值变量分为list类型和map类型，list类似于js中的数组，map类似于js中的对象。\n\n- list变量\n\n``` bash\n$linkColor:#08c #333 !default;//第一个值为默认值，第二个鼠标滑过值\na {\n  color:nth($linkColor,1); //color: #08c;\n  \n  &:hover {\n    color:nth($linkColor,2); //color: #333; \n  }\n}\n```\n\n- map变量\n\n``` bash\n// SASS\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n  \n// CSS\nh1 {\n  font-size: 2em; \n}\nh2 {\n  font-size: 1.5em; \n}\nh3 {\n  font-size: 1.2em; \n}\n```\n\n### 注释\n\nSASS提供了两种类型的注释：\n\n- 单行注释 \"// 注释\",只保留在SASS源文件中，编译后的CSS文件无该注释。\n\n- 多行注释 \"/* 注释 */\",这种注释会保留到编译后的CSS文件里。\n\n- 多行注释里还有一种, \"/*! 注释 */\",在 \"/* \"后面加一个感叹号 \"!\",表明这是重要注释，即使是压缩模式编译，也会保留这行注释，通常用来声明版权信息。\n\n### 嵌套\n\nSASS嵌套分为两种：选择器嵌套和属性嵌套。\n\n1.选择器嵌套\n\n选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性.\n\n在选择器嵌套中，可以使用&表示父元素选择器.\n\n``` bash\n// SASS\n#top_nav{\n  background-color:#333;\n  li{\n    float:left;\n  }\n  a{\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n  \n    &:hover{\n      color:#ddd;\n    }\n  }\n}\n  \n// CSS\n#top_nav{\n  background-color:#333;\n}  \n#top_nav li{\n  float:left;\n}\n#top_nav a{\n  display: block;\n  padding: 0 10px;\n  color: #fff;\n}\n#top_nav a:hover{\n  color:#ddd;\n}\n```\n\n2.属性嵌套\n\n** 属性后面必须加上冒号 **\n\n``` bash\n//SASS\np {\n  border: {\n    color: red;\n  }\n}\n  \n//CSS\np {\n  border-color: red;\n}\n```\n\n### 运算\n\nSASS支持运算功能，可以对数值型的参数，变量等进行加减乘除等运算。\n\n** 运算符前后请留一个空格，不然会出错。 **\n\n``` bash\n$var: 80%;\nbody {\n  margin: (14px/2);\n  top: 50px + 100px;\n  width: $var + 10%;\n}\n```\n\n## CSS重用\n\n### 继承@extend\n\nSASS允许一个选择器，继承另一个选择器的样式。关键词为 \"@extend\".\n\n例：class2要继承class1的样式。\n``` bash\n// SASS\n.class1 {\n  border: 1px solid #ddd;\n}\n.class2 {\n  @extend .class1;\n  font-size: 1.2em;\n}\n  \n// CSS\n.class1 {\n  border: 1px solid #ddd;\n}\n.class2 {\n  border: 1px solid #ddd;\n  font-size: 1.2em;\n}\n```\n\n### 定义代码块@mixin,@include\n\nMixin类似于C语言的宏，是可以重用的代码块。\n\nmixin有两种类型：一种是不带参数的mixin，一种是带参数的mixin；\n\n#### 不带参数mixin\n\n``` bash\n// SASS\n@mixin center-block {\n  margin-left:auto;\n  margin-right:auto;\n}\n.demo {\n  @include center-block;\n}\n\n//CSS\n.demo {\n  margin-left:auto;\n  margin-right:auto;\n}\n```\n\n#### 带参数mixin\n\n带参数的mixin，如果不指定参数，则使用默认值。\n\n``` bash\n// SASS\n@mixin left($value: 10px) {\n  float: left;\n  margin-right: $value;\n}\ndiv1 {\n  @include left;\n}\ndiv2 {\n  @include left(20px);\n}\n  \n// CSS\ndiv1 {\n  float: left;\n  margin-right: 10px;\n}\ndiv2 {\n  float: left;\n  margin-right: 20px;\n}\n```\n\n### 导入CSS @import\n\n- @import命令，用来插入外部文件。\n\t@import \"path/filename.scss\";\n- 如果插入的是.css文件，则等同于css的import命令。\n\t@import \"foo.css\";\n  \n通过@import将b.css文件导入a.scss文件,b.css文件的内容不会被导入编译后的a.css文件中。\n\n通过@import将c.scss文件导入a.scss文件,c.scss文件的内容将会被导入编译后的a.css文件中。\n\n## 高级用法\n\nSASS不仅有变量，运算符等用法，还有循环、判断等函数用法，使CSS更灵活。\n\n### if,else判断\n\n``` bash\np {\n  @if 1 + 1 == 2 { border: 1px solid; }\n  @if 5 < 3 { border: 2px dotted; }\n}\n\n@if lightness($color) > 30% {\n  background-color: #000;\n} @else {\n  background-color: #fff;\n}\n```\n\n### for循环\n\n``` bash\n// SASS\n@for $i from 1 to 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n  \n// CSS\n.item-1 {\n  width: 2em; \n}\n.item-2 {\n  width: 4em; \n}\n.item-3 {\n  width: 6em; \n}\n```\n\n### while循环\n\n``` bash\n// SASS\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n// CSS\n.item-6 {\n  width: 12em;\n}\n.item-4 {\n  width: 8em;\n}\n.item-2 {\n  width: 4em;\n}\n```\n\n### each循环\n\n``` bash\n// SASS\n$img-list: a,b,c,d;\n@each $img in img-list {\n  .show-#{$img} {\n    background-image: url(\"/image/#{$img}.jpg\");\n  }\n}\n  \n// CSS\n.show-a {\n  background-image: url(\"/image/a.jpg\");\n}\n.show-b {\n  background-image: url(\"/image/b.jpg\");\n}\n.show-c {\n  background-image: url(\"/image/c.jpg\");\n}\n.show-d {\n  background-image: url(\"/image/d.jpg\");\n}\n```\n\n### 自定义函数@function\n\nSASS为用户提供了自定义编写函数的方法。\n\n``` bash\n// SASS\n@function multiply($i) {\n  @return $i * 2;\n}\n#navbar {\n  font-size: multiply(15px);\n}\n  \n// CSS\n#navbar {\n  font-size: 30px;\n}\n```\n\n本章完！","slug":"SASS用法","published":1,"updated":"2017-05-26T09:02:37.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxy000021gwds2ilmbfq","content":"<h2 id=\"SASS起源\"><a href=\"#SASS起源\" class=\"headerlink\" title=\"SASS起源\"></a>SASS起源</h2><p>CSS不是一种编程语言，写起来比较麻烦，而且如果要修改整体颜色风格的话，比较费事，需要改很多地方，还要一个一个地找。所以如果将一些公共元素定义为函数中的变量，就可以只修改一处，多处共同更新了。这就是”CSS预处理器”的初步提现。</p>\n<p>CSS预处理器：CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题。其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</p>\n<p>常用的”CSS预处理器”有：<a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"external\">SASS</a> , <a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"external\">LESS</a> , <a href=\"http://www.zhangxinxu.com/jq/stylus/\" target=\"_blank\" rel=\"external\">Stylus</a></p>\n<h2 id=\"SASS简介\"><a href=\"#SASS简介\" class=\"headerlink\" title=\"SASS简介\"></a>SASS简介</h2><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>SASS底层是由Ruby语言编写的，但是这两者没有必然的联系，不需要学会Ruby语言也可以编写SASS。但是，在安装SASS之前，必须先安装Ruby。</p>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><ul>\n<li><p>Mac OS 或 Linux 安装Ruby ,<a href=\"http://www.jianshu.com/p/daa92187621c\" target=\"_blank\" rel=\"external\">点击查看安装方法</a>;</p>\n</li>\n<li><p>Windows 安装Ruby ,<a href=\"http://rubyinstaller.org/downloads\" target=\"_blank\" rel=\"external\">点击进入下载页面</a>;</p>\n</li>\n</ul>\n<h3 id=\"安装SASS\"><a href=\"#安装SASS\" class=\"headerlink\" title=\"安装SASS\"></a>安装SASS</h3><p>Ruby安装完成后，Windows打开安装好的Ruby，点击”Start Command Prompt with Ruby”，出现命令行，在命令行中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install sass</div></pre></td></tr></table></figure>\n<p>然后等待安装完成就可以使用了。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>打开Ruby命令行</p>\n<img src=\"/2017/05/18/SASS用法/openRuby.jpg\" alt=\"打开Ruby\" title=\"打开Ruby\">\n<p>通过Ruby命令行，进入到需要创建css的目录(此处以windows为例)。<br><img src=\"/2017/05/18/SASS用法/goToDir.jpg\" alt=\"进入目录\" title=\"进入目录\"></p>\n<p>在目录下新建文件test.scss。新建完成后，在test.scss文件中，写以下css：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"comment\">#2828ff;</span></div><div class=\"line\">div &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$blue</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成后，保存，并运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass test.scss</div></pre></td></tr></table></figure>\n<p>命令行窗口显示编译后的css样式：</p>\n<img src=\"/2017/05/18/SASS用法/runTestscss.jpg\" alt=\"test.scss\" title=\"test.scss\">\n<p>这时候我们需要生成test.css文件，在命令行窗口运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass test.scss test.css</div></pre></td></tr></table></figure>\n<p>运行后，将在同级目录下自动生成test.css文件。</p>\n<p>一般我们不可能每修改一次test.scss文件，编译一次。所以，SASS提供了监听机制，用来监听文件或目录，一旦修改源文件，编译后的文件也会自动生成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//监听单文件</div><div class=\"line\">sass --watch test.scss:test.css</div><div class=\"line\">//监听目录 sassStudy和sassToCss都是文件夹，即目录。</div><div class=\"line\">sass --watch sassStudy:sassToCss</div></pre></td></tr></table></figure>\n<p><strong> SASS提供了四种编译风格 </strong></p>\n<ul>\n<li>nested：嵌套缩进的css代码，它是默认值。</li>\n<li>expanded：没有缩进的、扩展的css代码。</li>\n<li>compact：简洁格式的css代码。</li>\n<li>compressed：压缩后的css代码。</li>\n</ul>\n<p>一般我们使用compressed编译风格，使用方法为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass --style compressed test.sass test.css</div></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"后缀名\"><a href=\"#后缀名\" class=\"headerlink\" title=\"后缀名\"></a>后缀名</h3><p>SASS有两种文件后缀名：test.sass和test.scss。两个的用法都差不多，区别在于，sass语法更适用于python类不带括号和分号的程序员，scss跟我们平时写css的格式差不多。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//后缀名为.sass的写法</div><div class=\"line\">body</div><div class=\"line\">  background: <span class=\"comment\">#eee</span></div><div class=\"line\">  font-size:12px</div><div class=\"line\">p</div><div class=\"line\">  background: <span class=\"comment\">#0982c1</span></div><div class=\"line\">  </div><div class=\"line\">//后缀名为.scss的写法</div><div class=\"line\">body &#123;</div><div class=\"line\">  background: <span class=\"comment\">#eee;</span></div><div class=\"line\">  font-size:12px;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  background: <span class=\"comment\">#0982c1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><h4 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h4><p>SASS允许使用变量来定义属性名,CSS类名,或属性值，变量的定义类似于PHP，以”$”符号开头：</p>\n<p>定义属性值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$red</span>: <span class=\"comment\">#f00;</span></div><div class=\"line\">  </div><div class=\"line\">div &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$red</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义属性名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$direction</span>: top;</div><div class=\"line\">  </div><div class=\"line\">div&#123;</div><div class=\"line\">\tborder-<span class=\"comment\">#&#123;$direction&#125;: 1px solid #eee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义类名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$direction</span>: top;</div><div class=\"line\">  </div><div class=\"line\">.myborder-<span class=\"comment\">#&#123;$direction&#125; &#123;</span></div><div class=\"line\">\tborder-<span class=\"comment\">#&#123;$direction&#125;: 1px solid #eee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h4><p>SASS设置默认变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 1.5 !default;</div><div class=\"line\">  </div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; //line-height: 1.5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SASS的默认变量一般用来设置默认值，然后根据需求来覆盖，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//sass style</div><div class=\"line\">//-------------------------------</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:        2;</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:        1.5 !default;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; //line-height: 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"多值变量\"><a href=\"#多值变量\" class=\"headerlink\" title=\"多值变量\"></a>多值变量</h4><p>多值变量分为list类型和map类型，list类似于js中的数组，map类似于js中的对象。</p>\n<ul>\n<li>list变量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$linkColor</span>:<span class=\"comment\">#08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span></div><div class=\"line\">a &#123;</div><div class=\"line\">  color:nth(<span class=\"variable\">$linkColor</span>,1); //color: <span class=\"comment\">#08c;</span></div><div class=\"line\">  </div><div class=\"line\">  &amp;:hover &#123;</div><div class=\"line\">    color:nth(<span class=\"variable\">$linkColor</span>,2); //color: <span class=\"comment\">#333; </span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>map变量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$headings</span>: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> <span class=\"keyword\">in</span> <span class=\"variable\">$headings</span> &#123;</div><div class=\"line\">  <span class=\"comment\">#&#123;$header&#125; &#123;</span></div><div class=\"line\">    font-size: <span class=\"variable\">$size</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">h1 &#123;</div><div class=\"line\">  font-size: 2em; </div><div class=\"line\">&#125;</div><div class=\"line\">h2 &#123;</div><div class=\"line\">  font-size: 1.5em; </div><div class=\"line\">&#125;</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-size: 1.2em; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>SASS提供了两种类型的注释：</p>\n<ul>\n<li><p>单行注释 “// 注释”,只保留在SASS源文件中，编译后的CSS文件无该注释。</p>\n</li>\n<li><p>多行注释 “/<em> 注释 </em>/“,这种注释会保留到编译后的CSS文件里。</p>\n</li>\n<li><p>多行注释里还有一种, “/<em>! 注释 </em>/“,在 “/* “后面加一个感叹号 “!”,表明这是重要注释，即使是压缩模式编译，也会保留这行注释，通常用来声明版权信息。</p>\n</li>\n</ul>\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>SASS嵌套分为两种：选择器嵌套和属性嵌套。</p>\n<p>1.选择器嵌套</p>\n<p>选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性.</p>\n<p>在选择器嵌套中，可以使用&amp;表示父元素选择器.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"comment\">#top_nav&#123;</span></div><div class=\"line\">  background-color:<span class=\"comment\">#333;</span></div><div class=\"line\">  li&#123;</div><div class=\"line\">    <span class=\"built_in\">float</span>:left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 0 10px;</div><div class=\"line\">    color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  </div><div class=\"line\">    &amp;:hover&#123;</div><div class=\"line\">      color:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\"><span class=\"comment\">#top_nav&#123;</span></div><div class=\"line\">  background-color:<span class=\"comment\">#333;</span></div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">#top_nav li&#123;</span></div><div class=\"line\">  <span class=\"built_in\">float</span>:left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#top_nav a&#123;</span></div><div class=\"line\">  display: block;</div><div class=\"line\">  padding: 0 10px;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#top_nav a:hover&#123;</span></div><div class=\"line\">  color:<span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.属性嵌套</p>\n<p><strong> 属性后面必须加上冒号 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SASS</div><div class=\"line\">p &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">//CSS</div><div class=\"line\">p &#123;</div><div class=\"line\">  border-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>SASS支持运算功能，可以对数值型的参数，变量等进行加减乘除等运算。</p>\n<p><strong> 运算符前后请留一个空格，不然会出错。 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$var</span>: 80%;</div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: (14px/2);</div><div class=\"line\">  top: 50px + 100px;</div><div class=\"line\">  width: <span class=\"variable\">$var</span> + 10%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS重用\"><a href=\"#CSS重用\" class=\"headerlink\" title=\"CSS重用\"></a>CSS重用</h2><h3 id=\"继承-extend\"><a href=\"#继承-extend\" class=\"headerlink\" title=\"继承@extend\"></a>继承@extend</h3><p>SASS允许一个选择器，继承另一个选择器的样式。关键词为 “@extend”.</p>\n<p>例：class2要继承class1的样式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">.class1 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.class2 &#123;</div><div class=\"line\">  @extend .class1;</div><div class=\"line\">  font-size: 1.2em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.class1 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.class2 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">  font-size: 1.2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"定义代码块-mixin-include\"><a href=\"#定义代码块-mixin-include\" class=\"headerlink\" title=\"定义代码块@mixin,@include\"></a>定义代码块@mixin,@include</h3><p>Mixin类似于C语言的宏，是可以重用的代码块。</p>\n<p>mixin有两种类型：一种是不带参数的mixin，一种是带参数的mixin；</p>\n<h4 id=\"不带参数mixin\"><a href=\"#不带参数mixin\" class=\"headerlink\" title=\"不带参数mixin\"></a>不带参数mixin</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@mixin center-block &#123;</div><div class=\"line\">  margin-left:auto;</div><div class=\"line\">  margin-right:auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  @include center-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//CSS</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  margin-left:auto;</div><div class=\"line\">  margin-right:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"带参数mixin\"><a href=\"#带参数mixin\" class=\"headerlink\" title=\"带参数mixin\"></a>带参数mixin</h4><p>带参数的mixin，如果不指定参数，则使用默认值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@mixin left(<span class=\"variable\">$value</span>: 10px) &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: <span class=\"variable\">$value</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">div1 &#123;</div><div class=\"line\">  @include left;</div><div class=\"line\">&#125;</div><div class=\"line\">div2 &#123;</div><div class=\"line\">  @include left(20px);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">div1 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\">div2 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: 20px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"导入CSS-import\"><a href=\"#导入CSS-import\" class=\"headerlink\" title=\"导入CSS @import\"></a>导入CSS @import</h3><ul>\n<li>@import命令，用来插入外部文件。<br>  @import “path/filename.scss”;</li>\n<li>如果插入的是.css文件，则等同于css的import命令。<br>  @import “foo.css”;</li>\n</ul>\n<p>通过@import将b.css文件导入a.scss文件,b.css文件的内容不会被导入编译后的a.css文件中。</p>\n<p>通过@import将c.scss文件导入a.scss文件,c.scss文件的内容将会被导入编译后的a.css文件中。</p>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><p>SASS不仅有变量，运算符等用法，还有循环、判断等函数用法，使CSS更灵活。</p>\n<h3 id=\"if-else判断\"><a href=\"#if-else判断\" class=\"headerlink\" title=\"if,else判断\"></a>if,else判断</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> 1 + 1 == 2 &#123; border: 1px solid; &#125;</div><div class=\"line\">  @<span class=\"keyword\">if</span> 5 &lt; 3 &#123; border: 2px dotted; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">if</span> lightness(<span class=\"variable\">$color</span>) &gt; 30% &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#000;</span></div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 to 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em; </div><div class=\"line\">&#125;</div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em; </div><div class=\"line\">&#125;</div><div class=\"line\">.item-3 &#123;</div><div class=\"line\">  width: 6em; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$i</span>: 6;</div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$i</span> &gt; 0 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">  <span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - 2;</div><div class=\"line\">&#125;</div><div class=\"line\">// CSS</div><div class=\"line\">.item-6 &#123;</div><div class=\"line\">  width: 12em;</div><div class=\"line\">&#125;</div><div class=\"line\">.item-4 &#123;</div><div class=\"line\">  width: 8em;</div><div class=\"line\">&#125;</div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$img</span>-list: a,b,c,d;</div><div class=\"line\">@each <span class=\"variable\">$img</span> <span class=\"keyword\">in</span> img-list &#123;</div><div class=\"line\">  .show-<span class=\"comment\">#&#123;$img&#125; &#123;</span></div><div class=\"line\">    background-image: url(<span class=\"string\">\"/image/#&#123;<span class=\"variable\">$img</span>&#125;.jpg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.show<span class=\"_\">-a</span> &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/a.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show-b &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/b.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show-c &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/c.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show<span class=\"_\">-d</span> &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/d.jpg\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"自定义函数-function\"><a href=\"#自定义函数-function\" class=\"headerlink\" title=\"自定义函数@function\"></a>自定义函数@function</h3><p>SASS为用户提供了自定义编写函数的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@<span class=\"keyword\">function</span> multiply(<span class=\"variable\">$i</span>) &#123;</div><div class=\"line\">  @<span class=\"built_in\">return</span> <span class=\"variable\">$i</span> * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#navbar &#123;</span></div><div class=\"line\">  font-size: multiply(15px);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\"><span class=\"comment\">#navbar &#123;</span></div><div class=\"line\">  font-size: 30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本章完！</p>\n","excerpt":"","more":"<h2 id=\"SASS起源\"><a href=\"#SASS起源\" class=\"headerlink\" title=\"SASS起源\"></a>SASS起源</h2><p>CSS不是一种编程语言，写起来比较麻烦，而且如果要修改整体颜色风格的话，比较费事，需要改很多地方，还要一个一个地找。所以如果将一些公共元素定义为函数中的变量，就可以只修改一处，多处共同更新了。这就是”CSS预处理器”的初步提现。</p>\n<p>CSS预处理器：CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题。其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</p>\n<p>常用的”CSS预处理器”有：<a href=\"http://sass-lang.com/\">SASS</a> , <a href=\"http://lesscss.org/\">LESS</a> , <a href=\"http://www.zhangxinxu.com/jq/stylus/\">Stylus</a></p>\n<h2 id=\"SASS简介\"><a href=\"#SASS简介\" class=\"headerlink\" title=\"SASS简介\"></a>SASS简介</h2><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>SASS底层是由Ruby语言编写的，但是这两者没有必然的联系，不需要学会Ruby语言也可以编写SASS。但是，在安装SASS之前，必须先安装Ruby。</p>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><ul>\n<li><p>Mac OS 或 Linux 安装Ruby ,<a href=\"http://www.jianshu.com/p/daa92187621c\">点击查看安装方法</a>;</p>\n</li>\n<li><p>Windows 安装Ruby ,<a href=\"http://rubyinstaller.org/downloads\">点击进入下载页面</a>;</p>\n</li>\n</ul>\n<h3 id=\"安装SASS\"><a href=\"#安装SASS\" class=\"headerlink\" title=\"安装SASS\"></a>安装SASS</h3><p>Ruby安装完成后，Windows打开安装好的Ruby，点击”Start Command Prompt with Ruby”，出现命令行，在命令行中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install sass</div></pre></td></tr></table></figure>\n<p>然后等待安装完成就可以使用了。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>打开Ruby命令行</p>\n<img src=\"/2017/05/18/SASS用法/openRuby.jpg\" alt=\"打开Ruby\" title=\"打开Ruby\">\n<p>通过Ruby命令行，进入到需要创建css的目录(此处以windows为例)。<br><img src=\"/2017/05/18/SASS用法/goToDir.jpg\" alt=\"进入目录\" title=\"进入目录\"></p>\n<p>在目录下新建文件test.scss。新建完成后，在test.scss文件中，写以下css：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"comment\">#2828ff;</span></div><div class=\"line\">div &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$blue</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成后，保存，并运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass test.scss</div></pre></td></tr></table></figure>\n<p>命令行窗口显示编译后的css样式：</p>\n<img src=\"/2017/05/18/SASS用法/runTestscss.jpg\" alt=\"test.scss\" title=\"test.scss\">\n<p>这时候我们需要生成test.css文件，在命令行窗口运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass test.scss test.css</div></pre></td></tr></table></figure>\n<p>运行后，将在同级目录下自动生成test.css文件。</p>\n<p>一般我们不可能每修改一次test.scss文件，编译一次。所以，SASS提供了监听机制，用来监听文件或目录，一旦修改源文件，编译后的文件也会自动生成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//监听单文件</div><div class=\"line\">sass --watch test.scss:test.css</div><div class=\"line\">//监听目录 sassStudy和sassToCss都是文件夹，即目录。</div><div class=\"line\">sass --watch sassStudy:sassToCss</div></pre></td></tr></table></figure>\n<p><strong> SASS提供了四种编译风格 </strong></p>\n<ul>\n<li>nested：嵌套缩进的css代码，它是默认值。</li>\n<li>expanded：没有缩进的、扩展的css代码。</li>\n<li>compact：简洁格式的css代码。</li>\n<li>compressed：压缩后的css代码。</li>\n</ul>\n<p>一般我们使用compressed编译风格，使用方法为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass --style compressed test.sass test.css</div></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"后缀名\"><a href=\"#后缀名\" class=\"headerlink\" title=\"后缀名\"></a>后缀名</h3><p>SASS有两种文件后缀名：test.sass和test.scss。两个的用法都差不多，区别在于，sass语法更适用于python类不带括号和分号的程序员，scss跟我们平时写css的格式差不多。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//后缀名为.sass的写法</div><div class=\"line\">body</div><div class=\"line\">  background: <span class=\"comment\">#eee</span></div><div class=\"line\">  font-size:12px</div><div class=\"line\">p</div><div class=\"line\">  background: <span class=\"comment\">#0982c1</span></div><div class=\"line\">  </div><div class=\"line\">//后缀名为.scss的写法</div><div class=\"line\">body &#123;</div><div class=\"line\">  background: <span class=\"comment\">#eee;</span></div><div class=\"line\">  font-size:12px;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  background: <span class=\"comment\">#0982c1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><h4 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h4><p>SASS允许使用变量来定义属性名,CSS类名,或属性值，变量的定义类似于PHP，以”$”符号开头：</p>\n<p>定义属性值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$red</span>: <span class=\"comment\">#f00;</span></div><div class=\"line\">  </div><div class=\"line\">div &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$red</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义属性名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$direction</span>: top;</div><div class=\"line\">  </div><div class=\"line\">div&#123;</div><div class=\"line\">\tborder-<span class=\"comment\">#&#123;$direction&#125;: 1px solid #eee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义类名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$direction</span>: top;</div><div class=\"line\">  </div><div class=\"line\">.myborder-<span class=\"comment\">#&#123;$direction&#125; &#123;</span></div><div class=\"line\">\tborder-<span class=\"comment\">#&#123;$direction&#125;: 1px solid #eee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"默认变量\"><a href=\"#默认变量\" class=\"headerlink\" title=\"默认变量\"></a>默认变量</h4><p>SASS设置默认变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 1.5 !default;</div><div class=\"line\">  </div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; //line-height: 1.5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SASS的默认变量一般用来设置默认值，然后根据需求来覆盖，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//sass style</div><div class=\"line\">//-------------------------------</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:        2;</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:        1.5 !default;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; //line-height: 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"多值变量\"><a href=\"#多值变量\" class=\"headerlink\" title=\"多值变量\"></a>多值变量</h4><p>多值变量分为list类型和map类型，list类似于js中的数组，map类似于js中的对象。</p>\n<ul>\n<li>list变量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$linkColor</span>:<span class=\"comment\">#08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span></div><div class=\"line\">a &#123;</div><div class=\"line\">  color:nth(<span class=\"variable\">$linkColor</span>,1); //color: <span class=\"comment\">#08c;</span></div><div class=\"line\">  </div><div class=\"line\">  &amp;:hover &#123;</div><div class=\"line\">    color:nth(<span class=\"variable\">$linkColor</span>,2); //color: <span class=\"comment\">#333; </span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>map变量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$headings</span>: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each <span class=\"variable\">$header</span>, <span class=\"variable\">$size</span> <span class=\"keyword\">in</span> <span class=\"variable\">$headings</span> &#123;</div><div class=\"line\">  <span class=\"comment\">#&#123;$header&#125; &#123;</span></div><div class=\"line\">    font-size: <span class=\"variable\">$size</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">h1 &#123;</div><div class=\"line\">  font-size: 2em; </div><div class=\"line\">&#125;</div><div class=\"line\">h2 &#123;</div><div class=\"line\">  font-size: 1.5em; </div><div class=\"line\">&#125;</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-size: 1.2em; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>SASS提供了两种类型的注释：</p>\n<ul>\n<li><p>单行注释 “// 注释”,只保留在SASS源文件中，编译后的CSS文件无该注释。</p>\n</li>\n<li><p>多行注释 “/<em> 注释 </em>/“,这种注释会保留到编译后的CSS文件里。</p>\n</li>\n<li><p>多行注释里还有一种, “/<em>! 注释 </em>/“,在 “/* “后面加一个感叹号 “!”,表明这是重要注释，即使是压缩模式编译，也会保留这行注释，通常用来声明版权信息。</p>\n</li>\n</ul>\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>SASS嵌套分为两种：选择器嵌套和属性嵌套。</p>\n<p>1.选择器嵌套</p>\n<p>选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性.</p>\n<p>在选择器嵌套中，可以使用&amp;表示父元素选择器.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"comment\">#top_nav&#123;</span></div><div class=\"line\">  background-color:<span class=\"comment\">#333;</span></div><div class=\"line\">  li&#123;</div><div class=\"line\">    <span class=\"built_in\">float</span>:left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  a&#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 0 10px;</div><div class=\"line\">    color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  </div><div class=\"line\">    &amp;:hover&#123;</div><div class=\"line\">      color:<span class=\"comment\">#ddd;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\"><span class=\"comment\">#top_nav&#123;</span></div><div class=\"line\">  background-color:<span class=\"comment\">#333;</span></div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">#top_nav li&#123;</span></div><div class=\"line\">  <span class=\"built_in\">float</span>:left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#top_nav a&#123;</span></div><div class=\"line\">  display: block;</div><div class=\"line\">  padding: 0 10px;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#top_nav a:hover&#123;</span></div><div class=\"line\">  color:<span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.属性嵌套</p>\n<p><strong> 属性后面必须加上冒号 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SASS</div><div class=\"line\">p &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">//CSS</div><div class=\"line\">p &#123;</div><div class=\"line\">  border-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>SASS支持运算功能，可以对数值型的参数，变量等进行加减乘除等运算。</p>\n<p><strong> 运算符前后请留一个空格，不然会出错。 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$var</span>: 80%;</div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: (14px/2);</div><div class=\"line\">  top: 50px + 100px;</div><div class=\"line\">  width: <span class=\"variable\">$var</span> + 10%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS重用\"><a href=\"#CSS重用\" class=\"headerlink\" title=\"CSS重用\"></a>CSS重用</h2><h3 id=\"继承-extend\"><a href=\"#继承-extend\" class=\"headerlink\" title=\"继承@extend\"></a>继承@extend</h3><p>SASS允许一个选择器，继承另一个选择器的样式。关键词为 “@extend”.</p>\n<p>例：class2要继承class1的样式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">.class1 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.class2 &#123;</div><div class=\"line\">  @extend .class1;</div><div class=\"line\">  font-size: 1.2em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.class1 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.class2 &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ddd;</span></div><div class=\"line\">  font-size: 1.2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"定义代码块-mixin-include\"><a href=\"#定义代码块-mixin-include\" class=\"headerlink\" title=\"定义代码块@mixin,@include\"></a>定义代码块@mixin,@include</h3><p>Mixin类似于C语言的宏，是可以重用的代码块。</p>\n<p>mixin有两种类型：一种是不带参数的mixin，一种是带参数的mixin；</p>\n<h4 id=\"不带参数mixin\"><a href=\"#不带参数mixin\" class=\"headerlink\" title=\"不带参数mixin\"></a>不带参数mixin</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@mixin center-block &#123;</div><div class=\"line\">  margin-left:auto;</div><div class=\"line\">  margin-right:auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  @include center-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//CSS</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  margin-left:auto;</div><div class=\"line\">  margin-right:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"带参数mixin\"><a href=\"#带参数mixin\" class=\"headerlink\" title=\"带参数mixin\"></a>带参数mixin</h4><p>带参数的mixin，如果不指定参数，则使用默认值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@mixin left(<span class=\"variable\">$value</span>: 10px) &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: <span class=\"variable\">$value</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">div1 &#123;</div><div class=\"line\">  @include left;</div><div class=\"line\">&#125;</div><div class=\"line\">div2 &#123;</div><div class=\"line\">  @include left(20px);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">div1 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\">div2 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-right: 20px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"导入CSS-import\"><a href=\"#导入CSS-import\" class=\"headerlink\" title=\"导入CSS @import\"></a>导入CSS @import</h3><ul>\n<li>@import命令，用来插入外部文件。<br>  @import “path/filename.scss”;</li>\n<li>如果插入的是.css文件，则等同于css的import命令。<br>  @import “foo.css”;</li>\n</ul>\n<p>通过@import将b.css文件导入a.scss文件,b.css文件的内容不会被导入编译后的a.css文件中。</p>\n<p>通过@import将c.scss文件导入a.scss文件,c.scss文件的内容将会被导入编译后的a.css文件中。</p>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><p>SASS不仅有变量，运算符等用法，还有循环、判断等函数用法，使CSS更灵活。</p>\n<h3 id=\"if-else判断\"><a href=\"#if-else判断\" class=\"headerlink\" title=\"if,else判断\"></a>if,else判断</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> 1 + 1 == 2 &#123; border: 1px solid; &#125;</div><div class=\"line\">  @<span class=\"keyword\">if</span> 5 &lt; 3 &#123; border: 2px dotted; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">if</span> lightness(<span class=\"variable\">$color</span>) &gt; 30% &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#000;</span></div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 to 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em; </div><div class=\"line\">&#125;</div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em; </div><div class=\"line\">&#125;</div><div class=\"line\">.item-3 &#123;</div><div class=\"line\">  width: 6em; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$i</span>: 6;</div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$i</span> &gt; 0 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">  <span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - 2;</div><div class=\"line\">&#125;</div><div class=\"line\">// CSS</div><div class=\"line\">.item-6 &#123;</div><div class=\"line\">  width: 12em;</div><div class=\"line\">&#125;</div><div class=\"line\">.item-4 &#123;</div><div class=\"line\">  width: 8em;</div><div class=\"line\">&#125;</div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\"><span class=\"variable\">$img</span>-list: a,b,c,d;</div><div class=\"line\">@each <span class=\"variable\">$img</span> <span class=\"keyword\">in</span> img-list &#123;</div><div class=\"line\">  .show-<span class=\"comment\">#&#123;$img&#125; &#123;</span></div><div class=\"line\">    background-image: url(<span class=\"string\">\"/image/#&#123;<span class=\"variable\">$img</span>&#125;.jpg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\">.show<span class=\"_\">-a</span> &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/a.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show-b &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/b.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show-c &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/c.jpg\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.show<span class=\"_\">-d</span> &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/d.jpg\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"自定义函数-function\"><a href=\"#自定义函数-function\" class=\"headerlink\" title=\"自定义函数@function\"></a>自定义函数@function</h3><p>SASS为用户提供了自定义编写函数的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">@<span class=\"keyword\">function</span> multiply(<span class=\"variable\">$i</span>) &#123;</div><div class=\"line\">  @<span class=\"built_in\">return</span> <span class=\"variable\">$i</span> * 2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#navbar &#123;</span></div><div class=\"line\">  font-size: multiply(15px);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">// CSS</div><div class=\"line\"><span class=\"comment\">#navbar &#123;</span></div><div class=\"line\">  font-size: 30px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本章完！</p>\n"},{"title":"CSS3新增属性(过渡、背景裁剪、动画、CSS变换)","date":"2017-02-20T03:43:05.000Z","_content":"本文简述CSS3的过渡效果[transition](http://www.runoob.com/css3/css3-transitions.html)、动画[animation](http://www.runoob.com/css3/css3-animations.html)、背景相关操作[background](http://www.runoob.com/css3/css3-backgrounds.html)等。\n\n## CSS3过渡效果transition\n\n### 效果图\n\n<div class=\"trans_div\">\n\t请把鼠标放在该区域\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"trans_div\">请把鼠标放在该区域</div>\n```\n\ncss样式：\n\n``` bash\n.trans_div{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #ff0000;\n\tcolor: #ffffff;\n\ttransition: width 2s , background 2s;\n\t-webkit-transition: width 2s , background 2s;\n\t-ms-transition: width 2s , background 2s;\n\t-moz-transition: width 2s , background 2s;\n}\n.trans_div:hover{\n\twidth: 300px;\n\tbackground: #0000ff;\n}\n```\n\n### 说明\n\ntrans_div这个class定义了div的过渡属性，width过渡时间为2s，background过渡时间为2s。之后在鼠标放上去hover的状态下，触发transition。\n\n### 备注\n\ntransition包含4个过渡属性\n\n| 属性 | 说明 |\n|:-----|:-----|\n|transition-property|定义应用过渡的 CSS 属性的名称。|\n|transition-duration|定义实现过渡效果需要花费的时间。默认是 0。|\n|transition-timing-function|规定过渡效果的时间曲线。默认是 \"ease\"。|\n|transition-delay|规定过渡效果何时开始。默认是 0。|\n\n## CSS变换transform\n\n### 效果图\n\n<div class=\"transform_div\">\n\tdiv旋转\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"transform_div\">div旋转</div>\n```\n\ncss代码：\n\n``` bash\n.transform_div{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #00ff00;\n\ttransform: rotate3d(1,2,3,30deg);\n}\n```\n### 说明\n\ntransform使元素实现了2D、3D的翻转、拉伸、缩放、移动、倾斜等效果。\n\n### 备注\n\ntransition包含2D和3D两种效果，属性太多了，懒得写了，请点击下面链接自行看。。。实在不好意思。。。\n链接为css3菜鸟教程内容:[2d效果](http://www.runoob.com/css3/css3-2dtransforms.html)\n链接为css3菜鸟教程内容:[3d效果](http://www.runoob.com/css3/css3-3dtransforms.html)\n\n## 盒阴影box-shadow\n\n### 效果图\n\n<div class=\"shadow_div\">\n\t阴影\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"shadow_div\">阴影</div>\n```\n\ncss代码：\n\n``` bash\n.shadow_div{\n\twidth: 100px;\n\theight: 100px;\n\tborder: 2px solid #fff;\n\tborder-radius: 5px;\n\tbox-shadow: 10px 10px 5px #888888;\n}\n```\n### 说明\n\nbox-shadow可以为img，div等添加阴影效果，使其出现层次感。border-radius实现边框圆角效果。\n\n### 语法\n\n``` bash\nbox-shadow: h-shadow v-shadow blur spread color inset;\n```\n| 值 | 说明 |\n|:-----|:-----|\n|h-shadow|必写。水平阴影的位置。允许负值|\n|v-shadow|必写。垂直阴影的位置。允许负值|\n|blur|可选。模糊距离|\n|spread|可选。阴影的大小|\n|color|可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表|\n|inset|可选。从外层的阴影（开始时）改变阴影内侧阴影|\n\n## CSS3动画\n\n### 效果图\n\n<div class=\"animation_div\">CSS3动画</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"animation_div\">CSS3动画</div>\n```\n\ncss代码：\n\n``` bash\n.animation_div{\n\tposition: relative;\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #ffff00;\n\tanimation: myanimate 4s infinite;\n}\n\n@keyframes myanimate{\n\t0% {\n\t\tbackground: #ffff00;\n\t\tleft: 0px;\n\t\ttransform: rotate(0deg);\n\t}\n\t25% {\n\t\tbackground: #00ff00;\n\t\tleft: 150px;\n\t\ttransform: rotate(90deg);\n\t}\n\t50% {\n\t\tbackground: #00ffff;\n\t\tleft: 300px;\n\t\ttransform: rotate(180deg);\n\t}\n\t75% {\n\t\tbackground: #00ff00;\n\t\tleft: 150px;\n\t\ttransform: rotate(270deg);\n\t}\n\t100% {\n\t\tbackground: #ffff00;\n\t\tleft: 0px;\n\t\ttransform: rotate(360deg);\n\t}\n}\n```\n\n### 说明\n\nanimate用来创建css动画效果，使用时，先给动画起个名字，然后用 @keyframes 语法来定义该动画的效果展示，动画效果开始为0%状态，结束为100%状态。根据不同时间节点，来定义该动画在不同节点上的展示效果。\n\n### 备注\n\n| 属性 | 说明 |\n|:-----|:-----|\n|@keyframes|规定动画在不同时间段的展示效果|\n|animation|所有动画属性的简写属性，除了 animation-play-state 属性。|\n|animation-name|规定 @keyframes 动画的名称。|\n|animation-duration|规定动画完成一个周期所花费的秒或毫秒。默认是 0。|\n|animation-timing-function|规定动画的速度曲线。默认是 \"ease\"。|\n|animation-delay|规定动画何时开始。默认是 0。|\n|animation-iteration-count|规定动画被播放的次数。默认是 1。无限循环为 infinite。|\n|animation-direction|规定动画何时开始。默认是 0。|\n|animation-play-state|规定动画是否正在运行或暂停。默认是 \"running\"。|\n\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_1.js\"></script>","source":"_posts/CSS3新增属性.md","raw":"---\ntitle: CSS3新增属性(过渡、背景裁剪、动画、CSS变换)\ndate: 2017-02-20 11:43:05\ncategories: \"CSS\"\ntags: \n\t- CSS3\n---\n本文简述CSS3的过渡效果[transition](http://www.runoob.com/css3/css3-transitions.html)、动画[animation](http://www.runoob.com/css3/css3-animations.html)、背景相关操作[background](http://www.runoob.com/css3/css3-backgrounds.html)等。\n\n## CSS3过渡效果transition\n\n### 效果图\n\n<div class=\"trans_div\">\n\t请把鼠标放在该区域\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"trans_div\">请把鼠标放在该区域</div>\n```\n\ncss样式：\n\n``` bash\n.trans_div{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #ff0000;\n\tcolor: #ffffff;\n\ttransition: width 2s , background 2s;\n\t-webkit-transition: width 2s , background 2s;\n\t-ms-transition: width 2s , background 2s;\n\t-moz-transition: width 2s , background 2s;\n}\n.trans_div:hover{\n\twidth: 300px;\n\tbackground: #0000ff;\n}\n```\n\n### 说明\n\ntrans_div这个class定义了div的过渡属性，width过渡时间为2s，background过渡时间为2s。之后在鼠标放上去hover的状态下，触发transition。\n\n### 备注\n\ntransition包含4个过渡属性\n\n| 属性 | 说明 |\n|:-----|:-----|\n|transition-property|定义应用过渡的 CSS 属性的名称。|\n|transition-duration|定义实现过渡效果需要花费的时间。默认是 0。|\n|transition-timing-function|规定过渡效果的时间曲线。默认是 \"ease\"。|\n|transition-delay|规定过渡效果何时开始。默认是 0。|\n\n## CSS变换transform\n\n### 效果图\n\n<div class=\"transform_div\">\n\tdiv旋转\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"transform_div\">div旋转</div>\n```\n\ncss代码：\n\n``` bash\n.transform_div{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #00ff00;\n\ttransform: rotate3d(1,2,3,30deg);\n}\n```\n### 说明\n\ntransform使元素实现了2D、3D的翻转、拉伸、缩放、移动、倾斜等效果。\n\n### 备注\n\ntransition包含2D和3D两种效果，属性太多了，懒得写了，请点击下面链接自行看。。。实在不好意思。。。\n链接为css3菜鸟教程内容:[2d效果](http://www.runoob.com/css3/css3-2dtransforms.html)\n链接为css3菜鸟教程内容:[3d效果](http://www.runoob.com/css3/css3-3dtransforms.html)\n\n## 盒阴影box-shadow\n\n### 效果图\n\n<div class=\"shadow_div\">\n\t阴影\n</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"shadow_div\">阴影</div>\n```\n\ncss代码：\n\n``` bash\n.shadow_div{\n\twidth: 100px;\n\theight: 100px;\n\tborder: 2px solid #fff;\n\tborder-radius: 5px;\n\tbox-shadow: 10px 10px 5px #888888;\n}\n```\n### 说明\n\nbox-shadow可以为img，div等添加阴影效果，使其出现层次感。border-radius实现边框圆角效果。\n\n### 语法\n\n``` bash\nbox-shadow: h-shadow v-shadow blur spread color inset;\n```\n| 值 | 说明 |\n|:-----|:-----|\n|h-shadow|必写。水平阴影的位置。允许负值|\n|v-shadow|必写。垂直阴影的位置。允许负值|\n|blur|可选。模糊距离|\n|spread|可选。阴影的大小|\n|color|可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表|\n|inset|可选。从外层的阴影（开始时）改变阴影内侧阴影|\n\n## CSS3动画\n\n### 效果图\n\n<div class=\"animation_div\">CSS3动画</div>\n\n### 代码实现\n\nhtml代码：\n\n``` bash\n<div class=\"animation_div\">CSS3动画</div>\n```\n\ncss代码：\n\n``` bash\n.animation_div{\n\tposition: relative;\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #ffff00;\n\tanimation: myanimate 4s infinite;\n}\n\n@keyframes myanimate{\n\t0% {\n\t\tbackground: #ffff00;\n\t\tleft: 0px;\n\t\ttransform: rotate(0deg);\n\t}\n\t25% {\n\t\tbackground: #00ff00;\n\t\tleft: 150px;\n\t\ttransform: rotate(90deg);\n\t}\n\t50% {\n\t\tbackground: #00ffff;\n\t\tleft: 300px;\n\t\ttransform: rotate(180deg);\n\t}\n\t75% {\n\t\tbackground: #00ff00;\n\t\tleft: 150px;\n\t\ttransform: rotate(270deg);\n\t}\n\t100% {\n\t\tbackground: #ffff00;\n\t\tleft: 0px;\n\t\ttransform: rotate(360deg);\n\t}\n}\n```\n\n### 说明\n\nanimate用来创建css动画效果，使用时，先给动画起个名字，然后用 @keyframes 语法来定义该动画的效果展示，动画效果开始为0%状态，结束为100%状态。根据不同时间节点，来定义该动画在不同节点上的展示效果。\n\n### 备注\n\n| 属性 | 说明 |\n|:-----|:-----|\n|@keyframes|规定动画在不同时间段的展示效果|\n|animation|所有动画属性的简写属性，除了 animation-play-state 属性。|\n|animation-name|规定 @keyframes 动画的名称。|\n|animation-duration|规定动画完成一个周期所花费的秒或毫秒。默认是 0。|\n|animation-timing-function|规定动画的速度曲线。默认是 \"ease\"。|\n|animation-delay|规定动画何时开始。默认是 0。|\n|animation-iteration-count|规定动画被播放的次数。默认是 1。无限循环为 infinite。|\n|animation-direction|规定动画何时开始。默认是 0。|\n|animation-play-state|规定动画是否正在运行或暂停。默认是 \"running\"。|\n\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_1.js\"></script>","slug":"CSS3新增属性","published":1,"updated":"2017-05-18T10:03:39.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxyb00061gwd7mep8884","content":"<p>本文简述CSS3的过渡效果<a href=\"http://www.runoob.com/css3/css3-transitions.html\" target=\"_blank\" rel=\"external\">transition</a>、动画<a href=\"http://www.runoob.com/css3/css3-animations.html\" target=\"_blank\" rel=\"external\">animation</a>、背景相关操作<a href=\"http://www.runoob.com/css3/css3-backgrounds.html\" target=\"_blank\" rel=\"external\">background</a>等。</p>\n<h2 id=\"CSS3过渡效果transition\"><a href=\"#CSS3过渡效果transition\" class=\"headerlink\" title=\"CSS3过渡效果transition\"></a>CSS3过渡效果transition</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"trans_div\"><br>    请把鼠标放在该区域<br></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"trans_div\"</span>&gt;请把鼠标放在该区域&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css样式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.trans_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#ff0000;</span></div><div class=\"line\">\tcolor: <span class=\"comment\">#ffffff;</span></div><div class=\"line\">\ttransition: width 2s , background 2s;</div><div class=\"line\">\t-webkit-transition: width 2s , background 2s;</div><div class=\"line\">\t-ms-transition: width 2s , background 2s;</div><div class=\"line\">\t-moz-transition: width 2s , background 2s;</div><div class=\"line\">&#125;</div><div class=\"line\">.trans_div:hover&#123;</div><div class=\"line\">\twidth: 300px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#0000ff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>trans_div这个class定义了div的过渡属性，width过渡时间为2s，background过渡时间为2s。之后在鼠标放上去hover的状态下，触发transition。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>transition包含4个过渡属性</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">transition-property</td>\n<td style=\"text-align:left\">定义应用过渡的 CSS 属性的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-duration</td>\n<td style=\"text-align:left\">定义实现过渡效果需要花费的时间。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-timing-function</td>\n<td style=\"text-align:left\">规定过渡效果的时间曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-delay</td>\n<td style=\"text-align:left\">规定过渡效果何时开始。默认是 0。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS变换transform\"><a href=\"#CSS变换transform\" class=\"headerlink\" title=\"CSS变换transform\"></a>CSS变换transform</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"transform_div\"><br>    div旋转<br></div>\n\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"transform_div\"</span>&gt;div旋转&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.transform_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\ttransform: rotate3d(1,2,3,30deg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>transform使元素实现了2D、3D的翻转、拉伸、缩放、移动、倾斜等效果。</p>\n<h3 id=\"备注-1\"><a href=\"#备注-1\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>transition包含2D和3D两种效果，属性太多了，懒得写了，请点击下面链接自行看。。。实在不好意思。。。<br>链接为css3菜鸟教程内容:<a href=\"http://www.runoob.com/css3/css3-2dtransforms.html\" target=\"_blank\" rel=\"external\">2d效果</a><br>链接为css3菜鸟教程内容:<a href=\"http://www.runoob.com/css3/css3-3dtransforms.html\" target=\"_blank\" rel=\"external\">3d效果</a></p>\n<h2 id=\"盒阴影box-shadow\"><a href=\"#盒阴影box-shadow\" class=\"headerlink\" title=\"盒阴影box-shadow\"></a>盒阴影box-shadow</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"shadow_div\"><br>    阴影<br></div>\n\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"shadow_div\"</span>&gt;阴影&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.shadow_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tborder: 2px solid <span class=\"comment\">#fff;</span></div><div class=\"line\">\tborder-radius: 5px;</div><div class=\"line\">\tbox-shadow: 10px 10px 5px <span class=\"comment\">#888888;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-2\"><a href=\"#说明-2\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>box-shadow可以为img，div等添加阴影效果，使其出现层次感。border-radius实现边框圆角效果。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">box-shadow: h-shadow v-shadow blur spread color inset;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h-shadow</td>\n<td style=\"text-align:left\">必写。水平阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v-shadow</td>\n<td style=\"text-align:left\">必写。垂直阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blur</td>\n<td style=\"text-align:left\">可选。模糊距离</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spread</td>\n<td style=\"text-align:left\">可选。阴影的大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inset</td>\n<td style=\"text-align:left\">可选。从外层的阴影（开始时）改变阴影内侧阴影</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS3动画\"><a href=\"#CSS3动画\" class=\"headerlink\" title=\"CSS3动画\"></a>CSS3动画</h2><h3 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"animation_div\">CSS3动画</div>\n\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"animation_div\"</span>&gt;CSS3动画&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">.animation_div&#123;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\tanimation: myanimate 4s infinite;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes myanimate&#123;</div><div class=\"line\">\t0% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\t\tleft: 0px;</div><div class=\"line\">\t\ttransform: rotate(0deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t25% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\t\tleft: 150px;</div><div class=\"line\">\t\ttransform: rotate(90deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t50% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ffff;</span></div><div class=\"line\">\t\tleft: 300px;</div><div class=\"line\">\t\ttransform: rotate(180deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t75% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\t\tleft: 150px;</div><div class=\"line\">\t\ttransform: rotate(270deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t100% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\t\tleft: 0px;</div><div class=\"line\">\t\ttransform: rotate(360deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-3\"><a href=\"#说明-3\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>animate用来创建css动画效果，使用时，先给动画起个名字，然后用 @keyframes 语法来定义该动画的效果展示，动画效果开始为0%状态，结束为100%状态。根据不同时间节点，来定义该动画在不同节点上的展示效果。</p>\n<h3 id=\"备注-2\"><a href=\"#备注-2\" class=\"headerlink\" title=\"备注\"></a>备注</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@keyframes</td>\n<td style=\"text-align:left\">规定动画在不同时间段的展示效果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation</td>\n<td style=\"text-align:left\">所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-name</td>\n<td style=\"text-align:left\">规定 @keyframes 动画的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-duration</td>\n<td style=\"text-align:left\">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-timing-function</td>\n<td style=\"text-align:left\">规定动画的速度曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-delay</td>\n<td style=\"text-align:left\">规定动画何时开始。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-iteration-count</td>\n<td style=\"text-align:left\">规定动画被播放的次数。默认是 1。无限循环为 infinite。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-direction</td>\n<td style=\"text-align:left\">规定动画何时开始。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-play-state</td>\n<td style=\"text-align:left\">规定动画是否正在运行或暂停。默认是 “running”。</td>\n</tr>\n</tbody>\n</table>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_1.js\"></script>","excerpt":"","more":"<p>本文简述CSS3的过渡效果<a href=\"http://www.runoob.com/css3/css3-transitions.html\">transition</a>、动画<a href=\"http://www.runoob.com/css3/css3-animations.html\">animation</a>、背景相关操作<a href=\"http://www.runoob.com/css3/css3-backgrounds.html\">background</a>等。</p>\n<h2 id=\"CSS3过渡效果transition\"><a href=\"#CSS3过渡效果transition\" class=\"headerlink\" title=\"CSS3过渡效果transition\"></a>CSS3过渡效果transition</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"trans_div\"><br>    请把鼠标放在该区域<br></div>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"trans_div\"</span>&gt;请把鼠标放在该区域&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css样式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.trans_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#ff0000;</span></div><div class=\"line\">\tcolor: <span class=\"comment\">#ffffff;</span></div><div class=\"line\">\ttransition: width 2s , background 2s;</div><div class=\"line\">\t-webkit-transition: width 2s , background 2s;</div><div class=\"line\">\t-ms-transition: width 2s , background 2s;</div><div class=\"line\">\t-moz-transition: width 2s , background 2s;</div><div class=\"line\">&#125;</div><div class=\"line\">.trans_div:hover&#123;</div><div class=\"line\">\twidth: 300px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#0000ff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>trans_div这个class定义了div的过渡属性，width过渡时间为2s，background过渡时间为2s。之后在鼠标放上去hover的状态下，触发transition。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>transition包含4个过渡属性</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">transition-property</td>\n<td style=\"text-align:left\">定义应用过渡的 CSS 属性的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-duration</td>\n<td style=\"text-align:left\">定义实现过渡效果需要花费的时间。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-timing-function</td>\n<td style=\"text-align:left\">规定过渡效果的时间曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition-delay</td>\n<td style=\"text-align:left\">规定过渡效果何时开始。默认是 0。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS变换transform\"><a href=\"#CSS变换transform\" class=\"headerlink\" title=\"CSS变换transform\"></a>CSS变换transform</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"transform_div\"><br>    div旋转<br></div>\n\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"transform_div\"</span>&gt;div旋转&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.transform_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\ttransform: rotate3d(1,2,3,30deg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>transform使元素实现了2D、3D的翻转、拉伸、缩放、移动、倾斜等效果。</p>\n<h3 id=\"备注-1\"><a href=\"#备注-1\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>transition包含2D和3D两种效果，属性太多了，懒得写了，请点击下面链接自行看。。。实在不好意思。。。<br>链接为css3菜鸟教程内容:<a href=\"http://www.runoob.com/css3/css3-2dtransforms.html\">2d效果</a><br>链接为css3菜鸟教程内容:<a href=\"http://www.runoob.com/css3/css3-3dtransforms.html\">3d效果</a></p>\n<h2 id=\"盒阴影box-shadow\"><a href=\"#盒阴影box-shadow\" class=\"headerlink\" title=\"盒阴影box-shadow\"></a>盒阴影box-shadow</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"shadow_div\"><br>    阴影<br></div>\n\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"shadow_div\"</span>&gt;阴影&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.shadow_div&#123;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tborder: 2px solid <span class=\"comment\">#fff;</span></div><div class=\"line\">\tborder-radius: 5px;</div><div class=\"line\">\tbox-shadow: 10px 10px 5px <span class=\"comment\">#888888;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-2\"><a href=\"#说明-2\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>box-shadow可以为img，div等添加阴影效果，使其出现层次感。border-radius实现边框圆角效果。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">box-shadow: h-shadow v-shadow blur spread color inset;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h-shadow</td>\n<td style=\"text-align:left\">必写。水平阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v-shadow</td>\n<td style=\"text-align:left\">必写。垂直阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blur</td>\n<td style=\"text-align:left\">可选。模糊距离</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spread</td>\n<td style=\"text-align:left\">可选。阴影的大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inset</td>\n<td style=\"text-align:left\">可选。从外层的阴影（开始时）改变阴影内侧阴影</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS3动画\"><a href=\"#CSS3动画\" class=\"headerlink\" title=\"CSS3动画\"></a>CSS3动画</h2><h3 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><div class=\"animation_div\">CSS3动画</div>\n\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>html代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"animation_div\"</span>&gt;CSS3动画&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>css代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">.animation_div&#123;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">\twidth: 100px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\tanimation: myanimate 4s infinite;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes myanimate&#123;</div><div class=\"line\">\t0% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\t\tleft: 0px;</div><div class=\"line\">\t\ttransform: rotate(0deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t25% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\t\tleft: 150px;</div><div class=\"line\">\t\ttransform: rotate(90deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t50% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ffff;</span></div><div class=\"line\">\t\tleft: 300px;</div><div class=\"line\">\t\ttransform: rotate(180deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t75% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#00ff00;</span></div><div class=\"line\">\t\tleft: 150px;</div><div class=\"line\">\t\ttransform: rotate(270deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t100% &#123;</div><div class=\"line\">\t\tbackground: <span class=\"comment\">#ffff00;</span></div><div class=\"line\">\t\tleft: 0px;</div><div class=\"line\">\t\ttransform: rotate(360deg);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"说明-3\"><a href=\"#说明-3\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>animate用来创建css动画效果，使用时，先给动画起个名字，然后用 @keyframes 语法来定义该动画的效果展示，动画效果开始为0%状态，结束为100%状态。根据不同时间节点，来定义该动画在不同节点上的展示效果。</p>\n<h3 id=\"备注-2\"><a href=\"#备注-2\" class=\"headerlink\" title=\"备注\"></a>备注</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@keyframes</td>\n<td style=\"text-align:left\">规定动画在不同时间段的展示效果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation</td>\n<td style=\"text-align:left\">所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-name</td>\n<td style=\"text-align:left\">规定 @keyframes 动画的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-duration</td>\n<td style=\"text-align:left\">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-timing-function</td>\n<td style=\"text-align:left\">规定动画的速度曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-delay</td>\n<td style=\"text-align:left\">规定动画何时开始。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-iteration-count</td>\n<td style=\"text-align:left\">规定动画被播放的次数。默认是 1。无限循环为 infinite。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-direction</td>\n<td style=\"text-align:left\">规定动画何时开始。默认是 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">animation-play-state</td>\n<td style=\"text-align:left\">规定动画是否正在运行或暂停。默认是 “running”。</td>\n</tr>\n</tbody>\n</table>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/css3_1.js\"></script>"},{"title":"css弹性布局-flex布局","date":"2017-03-24T02:51:50.000Z","_content":"\n本文介绍CSS3新增的布局方式，flex弹性布局，便于页面布局及项目。\n\n## 传统的css布局\n\n我们知道传统的css定位比较麻烦，比如垂直居中，比较难实现，但是问题比较多,很难实现自适应。\n\n<div class=\"oldcenter\"><div class=\"oldcenter-div\">居中</div></div>\n\n代码：\n\n``` bash\n// html代码\n<div class=\"oldcenter\">\n\t<div class=\"oldcenter-div\">居中</div>\n</div>\n// css代码\n.oldcenter{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n\tposition: relative;\n}\n.oldcenter-div {\n\twidth: 50px;\n\theight: 50px;\n\tbackground-color: #DF6A41;\n\tmargin: 0 auto;\t\t\t//左右居中\n\tmargin-top: 50%;\t\t//外边框距离父元素高度顶部框线50%\n\tbottom: 25px;\t\t\t//上移自身高度的一半 50/2 = 25px\n\tposition: relative;\t\t//设置为相对父元素定位\n}\n```\n\n上面的代码可以实现居中，原理是先让子div向下移动其父元素50%的高度，再向上移动自身高度50px的一半,即25px;实现了垂直居中。代码非常冗余。\n\n而且，如果是动态添加的列表元素，居中更麻烦\n\n<div class=\"oldcenter\"><ul class=\"old-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n代码：\n\n``` bash\n// html代码\n<div class=\"oldcenter\">\n\t<ul class=\"old-ul\">\n\t\t<li>列表1</li>\n\t\t<li>列表2</li>\n\t\t<li>列表3</li>\n\t\t<li>列表4</li>\n\t\t<li>列表5</li>\n\t</ul>\n</div>\n// css代码\n.oldcenter{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n\tposition: relative;\n}\n.old-ul{\n\tmargin-top: 0px;\n\theight: 250px;\n}\n.old-ul>li{\n\theight: 50px;\n\tline-height: 50px;\n}\n```\n\n这个列表样式看似简单，但是如果列表中的内容是动态添加的呢？我们应该怎样设置每一个列表项的高度和行高？不可能每添加一次就改一次css代码，是不是非常的不方便。\n\n传统的布局需要依赖于display,position,float等属性，样式调起来很不容易,所以需要改进。\n\n## flex布局\n\n2009年，W3C组织提出了一种新的布局方式--弹性布局，即flex布局。这种布局用少量、简单的代码，可以实现页面的响应式布局。并且如今已经得到除IE9-以外的所有浏览器的支持，完全不影响使用。\n\n### 初识flex\n\n我们先来认识一下flex，看看实现传统布局中的垂直居中是否方便。\n\n<div class=\"newcenter\">\n\t<div class=\"newcenter-div\">flex居中</div>\n</div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"newcenter\">\n\t<div class=\"newcenter-div\">flex居中</div>\n</div>\n// css代码\n.newcenter{\n\twidth: 250px;\n\theight: 250px;\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\tdisplay: flex;\t\t\t//声明为flex布局\n\tjustify-content: center;//水平方向左右居中\n\talign-items: center;\t//垂直方向上下居中\n}\n.newcenter-div{\n\twidth: 50px;\n\theight: 50px;\n\tbackground-color: #DF6A41;\n}\n```\n\n是不是觉得简单易懂，而且用起来也比较方便。\n\n### flex基本概念\n\n将元素的display属性设置为flex后，该元素就成为了\"flex容器\",之后的操作类似于在容器中操作，它的子元素都是容器中的部分。\n\n### flex容器属性\n\nflex容器有6个属性\n\n** 为了减少重复代码，且方便读者看懂，该标题(flex容器属性)下的所有代码的css均基于以下两个class属性 **\n\n``` bash\n.parent-container{\n\twidth: 400px;\n\theight: 300px;\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n}\n.parent-container>p{\n\twidth: 50px;\n\theight: 30px;\n\tborder: 1px solid #2548E7;\n\tbackground-color: #dbc21d;\n\tmargin: 5px;\n}\n```\n\n#### flex-direction\n\n该属性用来定义，子元素的排列方向.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|row|水平方向，从左往右依次排列(默认值)|\n|2|row-reverse|水平方向，从右往左依次排列|\n|3|column|垂直方向，从上往下依次排列|\n|4|column-reverse|垂直方向，从下往上依次排列|\n\n1.row\n\n<div class=\"parent-container container-row\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-row\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-row{\n\tdisplay: flex;\n\tflex-direction: row;\n}\n```\n\n2.row-reverse\n\n<div class=\"parent-container container-rowreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-rowreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-rowreverse{\n\tdisplay: flex;\n\tflex-direction: row-reverse;\n}\n```\n\n3.column\n\n<div class=\"parent-container container-column\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-column\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-column{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n```\n\n4.column-reverse\n\n<div class=\"parent-container container-columnreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-columnreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-columnreverse{\n\tdisplay: flex;\n\tflex-direction: column-reverse;\n}\n```\n\n#### flex-wrap\n\n该属性用来定义，如果子元素一排排不下，那么它的换行情况.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|nowrap|表示不换行(默认值)|\n|2|wrap|换行|\n|3|wrap-reverse|换行，并且反向排列|\n\n1.nowrap\n\n<div class=\"parent-container container-nowrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-nowrap\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-nowrap{\n\tdisplay: flex;\n\tflex-wrap: nowrap;\n}\n```\n\n2.wrap\n\n<div class=\"parent-container container-wrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-wrap\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-wrap{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n```\n\n3.wrap-reverse\n\n<div class=\"parent-container container-wrapreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-wrapreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-wrapreverse{\n\tdisplay: flex;\n\tflex-wrap: wrap-reverse;\n}\n```\n\n#### flex-flow\n\n该属性是flex-direction属性和flex-wrap属性的结合，即flex-direction属性和flex-wrap属性的简写形式,这里就不再说明.\n\n``` bash\n.container{\n\tflex-flow: flex-direction || flex-wrap;\n}\n```\n\n#### justify-content\n\n该属性用来定义，元素在水平方向上的对齐方式.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|靠左对齐(默认值)|\n|2|flex-end|靠右对齐|\n|3|center|水平居中对齐|\n|4|space-between|两端对齐，子元素之间间隔相等，两端无间隔|\n|5|space-around|平均对齐，子元素两侧间隔相等，且不重叠|\n\n1.flex-start\n\n<div class=\"parent-container container-justify-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-flexstart\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-flexstart{\n\tdisplay: flex;\n\tjustify-content: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-justify-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-flexend\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-flexend{\n\tdisplay: flex;\n\tjustify-content: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-justify-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-center\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-center{\n\tdisplay: flex;\n\tjustify-content: center;\n}\n```\n\n4.space-between\n\n<div class=\"parent-container container-justify-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-spacebetween\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-spacebetween{\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n```\n\n5.space-around\n\n<div class=\"parent-container container-justify-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-spacearound\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-spacearound{\n\tdisplay: flex;\n\tjustify-content: space-around;\n}\n```\n\n#### align-items\n\n该属性用来定义，元素在垂直方向上的对齐方式.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|顶部对齐(默认值)|\n|2|flex-end|底部对齐|\n|3|center|垂直居中对齐|\n|4|baseline|子元素第一行文字的基线对齐|\n|5|stretch|占满父元素整个垂直方向的高度,即高度与父元素相同(项目未设置高度或设为auto的情况下生效)(默认值)|\n\n1.flex-start\n\n<div class=\"parent-container container-aItems-flexstart\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-flexstart\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-flexstart{\n\tdisplay: flex;\n\talign-items: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-aItems-flexend\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-flexend\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-flexend{\n\tdisplay: flex;\n\talign-items: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-aItems-center\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-center\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-center{\n\tdisplay: flex;\n\talign-items: center;\n}\n```\n\n4.baseline\n\n<div class=\"parent-container container-aItems-baseline\"><p style=\"height: 80px;font-size: 20px\">flex1</p><p style=\"height: 40px;font-size: 14px\">flex2</p><p style=\"height: 120px;font-size: 22px\">flex3</p><p style=\"height: 100px;font-size: 25px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-baseline\">\n\t<p style=\"height: 80px;font-size: 20px\">flex1</p>\n\t<p style=\"height: 40px;font-size: 14px\">flex2</p>\n\t<p style=\"height: 120px;font-size: 22px\">flex3</p>\n\t<p style=\"height: 100px;font-size: 25px\">flex4</p>\n</div>\n// css代码\n.container-aItems-baseline{\n\tdisplay: flex;\n\talign-items: baseline;\n}\n```\n\n5.stretch\n\n<div class=\"parent-container container-aItems-stretch\"><p style=\"height: initial;\">flex1</p><p style=\"height: initial;\">flex2</p><p style=\"height: 50px;\">flex3</p><p style=\"height: 150px;\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-stretch\">\n\t<p style=\"height: initial;\">flex1</p>\n\t<p style=\"height: initial;\">flex2</p>\n\t<p style=\"height: 50px;\">flex3</p>\n\t<p style=\"height: 150px;\">flex4</p>\n</div>\n// css代码\n.container-aItems-stretch{\n\tdisplay: flex;\n\talign-items: stretch;\n}\n```\n\n#### align-content\n\n该属性用来定义，多排子元素在垂直方向上每一排之间的对齐方式.\n\n** 该属性必须在具有多排子元素的父元素中才能生效，即必须有 flex-wrap: wrap; 或 flex-wrap: wrap-reverse;且父元素中有多个子元素，一排放不下的情况下才有效果. **\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|垂直方向上，排之间靠近顶部对齐|\n|2|flex-end|垂直方向上，排之间靠近底部对齐|\n|3|center|垂直方向上，排之间居中对齐|\n|4|space-between|垂直方向上，第一排与最后一排上下两端紧靠父元素，排之间的间隔平分|\n|5|space-around|垂直方向上平均对齐，排之间两侧间隔相等，且不重叠|\n|6|stretch|所有排占满父元素整个垂直方向的高度(默认值)|\n\n1.flex-start\n\n<div class=\"parent-container container-aContent-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-flexstart\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-flexstart{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-aContent-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-flexend\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-flexend{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-aContent-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-center\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-center{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: center;\n}\n```\n\n4.space-between\n\n<div class=\"parent-container container-aContent-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-spacebetween\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-spacebetween{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-between;\n}\n```\n\n5.space-around\n\n<div class=\"parent-container container-aContent-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-spacearound\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-spacearound{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-around;\n}\n```\n\n6.stretch\n\n<div class=\"parent-container container-aContent-stretch\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-stretch\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-stretch{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: stretch;\n}\n```\n\n### flex容器中子元素的属性\n\n** 为了减少重复代码，且方便读者看懂，该标题(flex容器中子元素的属性)下的所有代码的css均基于以下两个class属性 **\n\n``` bash\n.child-container{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 350px;\n\theight: 100px;\n\tdisplay: flex;\n}\n.child-container>p{\n\tbackground-color: #dbc21d;\n\theight: 50px;\n}\n```\n\nflex子元素具有6个相关的属性，可以将属性设置在子元素上。\n\n|序号|属性|含义|\n|------|------|------|\n|1|order|定义子元素的排列顺序。数值越小，排列越靠前，默认为0。|\n|2|flex-grow|定义子元素的放大比例，如果存在剩余空间，也会等比例放大，默认为0。|\n|3|flex-shrink|定义子元素的缩小比例，如果空间不足，该子元素将缩小，默认为1。|\n|4|flex-basis|定义在分配多余空间之前，子元素占据的水平或垂直空间，默认为auto。|\n|5|flex|是flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto。|\n|6|align-self|允许单个子元素有与其他子元素不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于默认值stretch。|\n\n#### order\n\n定义项目的排列顺序。数值越小，排列越靠前。\n\n<div class=\"child-container childorder\"><p style=\"order: 36\">flex1</p><p style=\"order: 18\">flex2</p><p style=\"order: 5\">flex3</p><p style=\"order: 9\">flex4</p><p style=\"order: 6\">flex5</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container childorder\">\n\t<p style=\"order: 36\">flex1</p>\n\t<p style=\"order: 18\">flex2</p>\n\t<p style=\"order: 5\">flex3</p>\n\t<p style=\"order: 9\">flex4</p>\n\t<p style=\"order: 6\">flex5</p>\n</div>\n// css代码\n.childorder>p{\n\twidth:50px;\n\tmargin: 5px;\n}\n```\n\n#### flex-grow\n\n如果所有子元素的flex-grow属性都为1，则它们将等分一排空间.\n如果一个子元素的flex-grow属性为2，其他子元素都为1，则前者占据的宽度是其他子元素的2倍。\n** 如果想要flex-grow样式正常执行，则不能给子元素定义宽度width！否则样式会与预想中的不同 **\n\n<div class=\"child-container\"><p style=\"background-color:#ff7f50;flex-grow: 1;\"></p><p style=\"background-color:#2bafd9;flex-grow: 2;\"></p><p style=\"background-color:#f0e68c;flex-grow: 1;\"></p><p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container\">\n\t<p style=\"background-color:#ff7f50;flex-grow: 1;\"></p>\n\t<p style=\"background-color:#2bafd9;flex-grow: 2;\"></p>\n\t<p style=\"background-color:#f0e68c;flex-grow: 1;\"></p>\n\t<p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p>\n</div>\n```\n\n#### flex-shrink\n\n如果所有子元素的flex-shrink属性都为1，当空间不足时，所有子元素都将等比例缩小。如果一个子元素的flex-shrink属性为0，其他子元素都为1，则空间不足时，前者不缩小。\n\n<div class=\"child-container child-flexshrink\"><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 0;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-flexshrink\">\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 0;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n</div>\n// css代码\n.child-flexshrink>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n#### flex-basis\n\n定义在一排空间未被占满之前，子元素的width或height的值(例如100px)，定义之后，子元素将占据固定空间。\n\n<div class=\"child-container child-flexshrink\"><p></p><p style=\"flex-basis: 100px;\"></p><p></p><p></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-flexshrink\">\n\t<p></p>\n\t<p style=\"flex-basis: 100px;\"></p>\n\t<p></p>\n\t<p></p>\n</div>\n// css代码\n.child-flexshrink>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n#### flex\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n``` bash\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n#### align-self\n\n该属性有6个属性值\n\n|序号|属性值|\n|------|------|\n|1|flex-start|\n|2|flex-end|\n|3|center|\n|4|baseline|\n|5|stretch|\n|6|auto|\n\n属性值含义可查看 [align-items](#align-items) 与align-items属性值的含义相同(auto除外);\n\nalign-self默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch属性值。\n\n<div class=\"child-container child-alignself\"><p></p><p style=\"align-self: flex-end;\"></p><p></p><p></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-alignself\">\n\t<p></p>\n\t<p style=\"align-self: flex-end;\"></p>\n\t<p></p>\n\t<p></p>\n</div>\n// css代码\n.child-alignself>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n## 总结\n\nflex弹性布局的诞生，解决了传统CSS布局的很多问题，而且使用起来更加方便。\n\n我们回到之前最开始的那个问题，如果列表是动态的话，使用flex是不是很方便？\n\n``` bash\n// html代码\n<div class=\"newlist\">\n\t<ul class=\"new-ul\">\n\t\t<li>列表1</li>\n\t\t<li>列表2</li>\n\t\t<li>列表3</li>\n\t</ul>\n</div>\n// css代码\n.newlist{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n}\n.new-ul{\n\tmargin-top: 0px;\n\theight: 250px;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-around;\n}\n.new-ul>li{\n\twidth: 100%;\n}\n```\n三个列表的情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li></ul></div>\n\n四个列表情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li></ul></div>\n\n五个列表情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n无需一直修改css文件，非常方便！\n\n本章完~\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/flexincss.js\"></script>","source":"_posts/css弹性布局-flex布局.md","raw":"---\ntitle: css弹性布局-flex布局\ndate: 2017-03-24 10:51:50\ncategories: \"CSS\"\ntags: \n\t- CSS3\n---\n\n本文介绍CSS3新增的布局方式，flex弹性布局，便于页面布局及项目。\n\n## 传统的css布局\n\n我们知道传统的css定位比较麻烦，比如垂直居中，比较难实现，但是问题比较多,很难实现自适应。\n\n<div class=\"oldcenter\"><div class=\"oldcenter-div\">居中</div></div>\n\n代码：\n\n``` bash\n// html代码\n<div class=\"oldcenter\">\n\t<div class=\"oldcenter-div\">居中</div>\n</div>\n// css代码\n.oldcenter{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n\tposition: relative;\n}\n.oldcenter-div {\n\twidth: 50px;\n\theight: 50px;\n\tbackground-color: #DF6A41;\n\tmargin: 0 auto;\t\t\t//左右居中\n\tmargin-top: 50%;\t\t//外边框距离父元素高度顶部框线50%\n\tbottom: 25px;\t\t\t//上移自身高度的一半 50/2 = 25px\n\tposition: relative;\t\t//设置为相对父元素定位\n}\n```\n\n上面的代码可以实现居中，原理是先让子div向下移动其父元素50%的高度，再向上移动自身高度50px的一半,即25px;实现了垂直居中。代码非常冗余。\n\n而且，如果是动态添加的列表元素，居中更麻烦\n\n<div class=\"oldcenter\"><ul class=\"old-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n代码：\n\n``` bash\n// html代码\n<div class=\"oldcenter\">\n\t<ul class=\"old-ul\">\n\t\t<li>列表1</li>\n\t\t<li>列表2</li>\n\t\t<li>列表3</li>\n\t\t<li>列表4</li>\n\t\t<li>列表5</li>\n\t</ul>\n</div>\n// css代码\n.oldcenter{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n\tposition: relative;\n}\n.old-ul{\n\tmargin-top: 0px;\n\theight: 250px;\n}\n.old-ul>li{\n\theight: 50px;\n\tline-height: 50px;\n}\n```\n\n这个列表样式看似简单，但是如果列表中的内容是动态添加的呢？我们应该怎样设置每一个列表项的高度和行高？不可能每添加一次就改一次css代码，是不是非常的不方便。\n\n传统的布局需要依赖于display,position,float等属性，样式调起来很不容易,所以需要改进。\n\n## flex布局\n\n2009年，W3C组织提出了一种新的布局方式--弹性布局，即flex布局。这种布局用少量、简单的代码，可以实现页面的响应式布局。并且如今已经得到除IE9-以外的所有浏览器的支持，完全不影响使用。\n\n### 初识flex\n\n我们先来认识一下flex，看看实现传统布局中的垂直居中是否方便。\n\n<div class=\"newcenter\">\n\t<div class=\"newcenter-div\">flex居中</div>\n</div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"newcenter\">\n\t<div class=\"newcenter-div\">flex居中</div>\n</div>\n// css代码\n.newcenter{\n\twidth: 250px;\n\theight: 250px;\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\tdisplay: flex;\t\t\t//声明为flex布局\n\tjustify-content: center;//水平方向左右居中\n\talign-items: center;\t//垂直方向上下居中\n}\n.newcenter-div{\n\twidth: 50px;\n\theight: 50px;\n\tbackground-color: #DF6A41;\n}\n```\n\n是不是觉得简单易懂，而且用起来也比较方便。\n\n### flex基本概念\n\n将元素的display属性设置为flex后，该元素就成为了\"flex容器\",之后的操作类似于在容器中操作，它的子元素都是容器中的部分。\n\n### flex容器属性\n\nflex容器有6个属性\n\n** 为了减少重复代码，且方便读者看懂，该标题(flex容器属性)下的所有代码的css均基于以下两个class属性 **\n\n``` bash\n.parent-container{\n\twidth: 400px;\n\theight: 300px;\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n}\n.parent-container>p{\n\twidth: 50px;\n\theight: 30px;\n\tborder: 1px solid #2548E7;\n\tbackground-color: #dbc21d;\n\tmargin: 5px;\n}\n```\n\n#### flex-direction\n\n该属性用来定义，子元素的排列方向.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|row|水平方向，从左往右依次排列(默认值)|\n|2|row-reverse|水平方向，从右往左依次排列|\n|3|column|垂直方向，从上往下依次排列|\n|4|column-reverse|垂直方向，从下往上依次排列|\n\n1.row\n\n<div class=\"parent-container container-row\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-row\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-row{\n\tdisplay: flex;\n\tflex-direction: row;\n}\n```\n\n2.row-reverse\n\n<div class=\"parent-container container-rowreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-rowreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-rowreverse{\n\tdisplay: flex;\n\tflex-direction: row-reverse;\n}\n```\n\n3.column\n\n<div class=\"parent-container container-column\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-column\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-column{\n\tdisplay: flex;\n\tflex-direction: column;\n}\n```\n\n4.column-reverse\n\n<div class=\"parent-container container-columnreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-columnreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n</div>\n// css代码\n.container-columnreverse{\n\tdisplay: flex;\n\tflex-direction: column-reverse;\n}\n```\n\n#### flex-wrap\n\n该属性用来定义，如果子元素一排排不下，那么它的换行情况.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|nowrap|表示不换行(默认值)|\n|2|wrap|换行|\n|3|wrap-reverse|换行，并且反向排列|\n\n1.nowrap\n\n<div class=\"parent-container container-nowrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-nowrap\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-nowrap{\n\tdisplay: flex;\n\tflex-wrap: nowrap;\n}\n```\n\n2.wrap\n\n<div class=\"parent-container container-wrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-wrap\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-wrap{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n```\n\n3.wrap-reverse\n\n<div class=\"parent-container container-wrapreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-wrapreverse\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n\t<p>flex5</p>\n\t<p>flex6</p>\n\t<p>flex7</p>\n\t<p>flex8</p>\n\t<p>flex9</p>\n\t<p>flex10</p>\n\t<p>flex11</p>\n</div>\n// css代码\n.container-wrapreverse{\n\tdisplay: flex;\n\tflex-wrap: wrap-reverse;\n}\n```\n\n#### flex-flow\n\n该属性是flex-direction属性和flex-wrap属性的结合，即flex-direction属性和flex-wrap属性的简写形式,这里就不再说明.\n\n``` bash\n.container{\n\tflex-flow: flex-direction || flex-wrap;\n}\n```\n\n#### justify-content\n\n该属性用来定义，元素在水平方向上的对齐方式.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|靠左对齐(默认值)|\n|2|flex-end|靠右对齐|\n|3|center|水平居中对齐|\n|4|space-between|两端对齐，子元素之间间隔相等，两端无间隔|\n|5|space-around|平均对齐，子元素两侧间隔相等，且不重叠|\n\n1.flex-start\n\n<div class=\"parent-container container-justify-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-flexstart\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-flexstart{\n\tdisplay: flex;\n\tjustify-content: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-justify-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-flexend\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-flexend{\n\tdisplay: flex;\n\tjustify-content: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-justify-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-center\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-center{\n\tdisplay: flex;\n\tjustify-content: center;\n}\n```\n\n4.space-between\n\n<div class=\"parent-container container-justify-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-spacebetween\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-spacebetween{\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n```\n\n5.space-around\n\n<div class=\"parent-container container-justify-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-justify-spacearound\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t<p>flex4</p>\n</div>\n// css代码\n.container-justify-spacearound{\n\tdisplay: flex;\n\tjustify-content: space-around;\n}\n```\n\n#### align-items\n\n该属性用来定义，元素在垂直方向上的对齐方式.\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|顶部对齐(默认值)|\n|2|flex-end|底部对齐|\n|3|center|垂直居中对齐|\n|4|baseline|子元素第一行文字的基线对齐|\n|5|stretch|占满父元素整个垂直方向的高度,即高度与父元素相同(项目未设置高度或设为auto的情况下生效)(默认值)|\n\n1.flex-start\n\n<div class=\"parent-container container-aItems-flexstart\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-flexstart\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-flexstart{\n\tdisplay: flex;\n\talign-items: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-aItems-flexend\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-flexend\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-flexend{\n\tdisplay: flex;\n\talign-items: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-aItems-center\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-center\">\n\t<p style=\"height: 80px\">flex1</p>\n\t<p style=\"height: 40px\">flex2</p>\n\t<p style=\"height: 120px\">flex3</p>\n\t<p style=\"height: 100px\">flex4</p>\n</div>\n// css代码\n.container-aItems-center{\n\tdisplay: flex;\n\talign-items: center;\n}\n```\n\n4.baseline\n\n<div class=\"parent-container container-aItems-baseline\"><p style=\"height: 80px;font-size: 20px\">flex1</p><p style=\"height: 40px;font-size: 14px\">flex2</p><p style=\"height: 120px;font-size: 22px\">flex3</p><p style=\"height: 100px;font-size: 25px\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-baseline\">\n\t<p style=\"height: 80px;font-size: 20px\">flex1</p>\n\t<p style=\"height: 40px;font-size: 14px\">flex2</p>\n\t<p style=\"height: 120px;font-size: 22px\">flex3</p>\n\t<p style=\"height: 100px;font-size: 25px\">flex4</p>\n</div>\n// css代码\n.container-aItems-baseline{\n\tdisplay: flex;\n\talign-items: baseline;\n}\n```\n\n5.stretch\n\n<div class=\"parent-container container-aItems-stretch\"><p style=\"height: initial;\">flex1</p><p style=\"height: initial;\">flex2</p><p style=\"height: 50px;\">flex3</p><p style=\"height: 150px;\">flex4</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aItems-stretch\">\n\t<p style=\"height: initial;\">flex1</p>\n\t<p style=\"height: initial;\">flex2</p>\n\t<p style=\"height: 50px;\">flex3</p>\n\t<p style=\"height: 150px;\">flex4</p>\n</div>\n// css代码\n.container-aItems-stretch{\n\tdisplay: flex;\n\talign-items: stretch;\n}\n```\n\n#### align-content\n\n该属性用来定义，多排子元素在垂直方向上每一排之间的对齐方式.\n\n** 该属性必须在具有多排子元素的父元素中才能生效，即必须有 flex-wrap: wrap; 或 flex-wrap: wrap-reverse;且父元素中有多个子元素，一排放不下的情况下才有效果. **\n\n\n|序号|属性值|含义|\n|------|------|------|\n|1|flex-start|垂直方向上，排之间靠近顶部对齐|\n|2|flex-end|垂直方向上，排之间靠近底部对齐|\n|3|center|垂直方向上，排之间居中对齐|\n|4|space-between|垂直方向上，第一排与最后一排上下两端紧靠父元素，排之间的间隔平分|\n|5|space-around|垂直方向上平均对齐，排之间两侧间隔相等，且不重叠|\n|6|stretch|所有排占满父元素整个垂直方向的高度(默认值)|\n\n1.flex-start\n\n<div class=\"parent-container container-aContent-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-flexstart\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-flexstart{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n}\n```\n\n2.flex-end\n\n<div class=\"parent-container container-aContent-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-flexend\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-flexend{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: flex-end;\n}\n```\n\n3.center\n\n<div class=\"parent-container container-aContent-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-center\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-center{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: center;\n}\n```\n\n4.space-between\n\n<div class=\"parent-container container-aContent-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-spacebetween\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-spacebetween{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-between;\n}\n```\n\n5.space-around\n\n<div class=\"parent-container container-aContent-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-spacearound\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-spacearound{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-around;\n}\n```\n\n6.stretch\n\n<div class=\"parent-container container-aContent-stretch\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"parent-container container-aContent-stretch\">\n\t<p>flex1</p>\n\t<p>flex2</p>\n\t<p>flex3</p>\n\t···\t\t\t//多个p元素\n\t<p>flex23</p>\n\t<p>flex24</p>\n\t<p>flex25</p>\n</div>\n// css代码\n.container-aContent-stretch{\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: stretch;\n}\n```\n\n### flex容器中子元素的属性\n\n** 为了减少重复代码，且方便读者看懂，该标题(flex容器中子元素的属性)下的所有代码的css均基于以下两个class属性 **\n\n``` bash\n.child-container{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 350px;\n\theight: 100px;\n\tdisplay: flex;\n}\n.child-container>p{\n\tbackground-color: #dbc21d;\n\theight: 50px;\n}\n```\n\nflex子元素具有6个相关的属性，可以将属性设置在子元素上。\n\n|序号|属性|含义|\n|------|------|------|\n|1|order|定义子元素的排列顺序。数值越小，排列越靠前，默认为0。|\n|2|flex-grow|定义子元素的放大比例，如果存在剩余空间，也会等比例放大，默认为0。|\n|3|flex-shrink|定义子元素的缩小比例，如果空间不足，该子元素将缩小，默认为1。|\n|4|flex-basis|定义在分配多余空间之前，子元素占据的水平或垂直空间，默认为auto。|\n|5|flex|是flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto。|\n|6|align-self|允许单个子元素有与其他子元素不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于默认值stretch。|\n\n#### order\n\n定义项目的排列顺序。数值越小，排列越靠前。\n\n<div class=\"child-container childorder\"><p style=\"order: 36\">flex1</p><p style=\"order: 18\">flex2</p><p style=\"order: 5\">flex3</p><p style=\"order: 9\">flex4</p><p style=\"order: 6\">flex5</p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container childorder\">\n\t<p style=\"order: 36\">flex1</p>\n\t<p style=\"order: 18\">flex2</p>\n\t<p style=\"order: 5\">flex3</p>\n\t<p style=\"order: 9\">flex4</p>\n\t<p style=\"order: 6\">flex5</p>\n</div>\n// css代码\n.childorder>p{\n\twidth:50px;\n\tmargin: 5px;\n}\n```\n\n#### flex-grow\n\n如果所有子元素的flex-grow属性都为1，则它们将等分一排空间.\n如果一个子元素的flex-grow属性为2，其他子元素都为1，则前者占据的宽度是其他子元素的2倍。\n** 如果想要flex-grow样式正常执行，则不能给子元素定义宽度width！否则样式会与预想中的不同 **\n\n<div class=\"child-container\"><p style=\"background-color:#ff7f50;flex-grow: 1;\"></p><p style=\"background-color:#2bafd9;flex-grow: 2;\"></p><p style=\"background-color:#f0e68c;flex-grow: 1;\"></p><p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container\">\n\t<p style=\"background-color:#ff7f50;flex-grow: 1;\"></p>\n\t<p style=\"background-color:#2bafd9;flex-grow: 2;\"></p>\n\t<p style=\"background-color:#f0e68c;flex-grow: 1;\"></p>\n\t<p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p>\n</div>\n```\n\n#### flex-shrink\n\n如果所有子元素的flex-shrink属性都为1，当空间不足时，所有子元素都将等比例缩小。如果一个子元素的flex-shrink属性为0，其他子元素都为1，则空间不足时，前者不缩小。\n\n<div class=\"child-container child-flexshrink\"><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 0;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-flexshrink\">\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 0;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n\t<p style=\"flex-shrink: 1;\"></p>\n</div>\n// css代码\n.child-flexshrink>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n#### flex-basis\n\n定义在一排空间未被占满之前，子元素的width或height的值(例如100px)，定义之后，子元素将占据固定空间。\n\n<div class=\"child-container child-flexshrink\"><p></p><p style=\"flex-basis: 100px;\"></p><p></p><p></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-flexshrink\">\n\t<p></p>\n\t<p style=\"flex-basis: 100px;\"></p>\n\t<p></p>\n\t<p></p>\n</div>\n// css代码\n.child-flexshrink>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n#### flex\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n``` bash\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n#### align-self\n\n该属性有6个属性值\n\n|序号|属性值|\n|------|------|\n|1|flex-start|\n|2|flex-end|\n|3|center|\n|4|baseline|\n|5|stretch|\n|6|auto|\n\n属性值含义可查看 [align-items](#align-items) 与align-items属性值的含义相同(auto除外);\n\nalign-self默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch属性值。\n\n<div class=\"child-container child-alignself\"><p></p><p style=\"align-self: flex-end;\"></p><p></p><p></p></div>\n\n代码:\n\n``` bash\n// html代码\n<div class=\"child-container child-alignself\">\n\t<p></p>\n\t<p style=\"align-self: flex-end;\"></p>\n\t<p></p>\n\t<p></p>\n</div>\n// css代码\n.child-alignself>p{\n\theight: 50px;\n\twidth: 50px;\n\tmargin: 5px;\n\tbackground-color:#be5ad1;\n}\n```\n\n## 总结\n\nflex弹性布局的诞生，解决了传统CSS布局的很多问题，而且使用起来更加方便。\n\n我们回到之前最开始的那个问题，如果列表是动态的话，使用flex是不是很方便？\n\n``` bash\n// html代码\n<div class=\"newlist\">\n\t<ul class=\"new-ul\">\n\t\t<li>列表1</li>\n\t\t<li>列表2</li>\n\t\t<li>列表3</li>\n\t</ul>\n</div>\n// css代码\n.newlist{\n\tborder: 1px solid #D53419;\n\tbackground-color: #50E9EE;\n\twidth: 250px;\n\theight: 250px;\n}\n.new-ul{\n\tmargin-top: 0px;\n\theight: 250px;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: space-around;\n}\n.new-ul>li{\n\twidth: 100%;\n}\n```\n三个列表的情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li></ul></div>\n\n四个列表情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li></ul></div>\n\n五个列表情况\n\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n无需一直修改css文件，非常方便！\n\n本章完~\n\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/flexincss.js\"></script>","slug":"css弹性布局-flex布局","published":1,"updated":"2017-05-18T10:03:14.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxyj00081gwdsvzp8gju","content":"<p>本文介绍CSS3新增的布局方式，flex弹性布局，便于页面布局及项目。</p>\n<h2 id=\"传统的css布局\"><a href=\"#传统的css布局\" class=\"headerlink\" title=\"传统的css布局\"></a>传统的css布局</h2><p>我们知道传统的css定位比较麻烦，比如垂直居中，比较难实现，但是问题比较多,很难实现自适应。</p>\n<div class=\"oldcenter\"><div class=\"oldcenter-div\">居中</div></div>\n\n<p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"oldcenter\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"oldcenter-div\"</span>&gt;居中&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.oldcenter&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.oldcenter-div &#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#DF6A41;</span></div><div class=\"line\">\tmargin: 0 auto;\t\t\t//左右居中</div><div class=\"line\">\tmargin-top: 50%;\t\t//外边框距离父元素高度顶部框线50%</div><div class=\"line\">\tbottom: 25px;\t\t\t//上移自身高度的一半 50/2 = 25px</div><div class=\"line\">\tposition: relative;\t\t//设置为相对父元素定位</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码可以实现居中，原理是先让子div向下移动其父元素50%的高度，再向上移动自身高度50px的一半,即25px;实现了垂直居中。代码非常冗余。</p>\n<p>而且，如果是动态添加的列表元素，居中更麻烦</p>\n<div class=\"oldcenter\"><ul class=\"old-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n<p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"oldcenter\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"old-ul\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表1&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表2&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表3&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表4&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表5&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.oldcenter&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.old-ul&#123;</div><div class=\"line\">\tmargin-top: 0px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">&#125;</div><div class=\"line\">.old-ul&gt;li&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tline-height: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个列表样式看似简单，但是如果列表中的内容是动态添加的呢？我们应该怎样设置每一个列表项的高度和行高？不可能每添加一次就改一次css代码，是不是非常的不方便。</p>\n<p>传统的布局需要依赖于display,position,float等属性，样式调起来很不容易,所以需要改进。</p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>2009年，W3C组织提出了一种新的布局方式–弹性布局，即flex布局。这种布局用少量、简单的代码，可以实现页面的响应式布局。并且如今已经得到除IE9-以外的所有浏览器的支持，完全不影响使用。</p>\n<h3 id=\"初识flex\"><a href=\"#初识flex\" class=\"headerlink\" title=\"初识flex\"></a>初识flex</h3><p>我们先来认识一下flex，看看实现传统布局中的垂直居中是否方便。</p>\n<div class=\"newcenter\"><br>    <div class=\"newcenter-div\">flex居中</div><br></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"newcenter\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"newcenter-div\"</span>&gt;flex居中&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.newcenter&#123;</div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\tdisplay: flex;\t\t\t//声明为flex布局</div><div class=\"line\">\tjustify-content: center;//水平方向左右居中</div><div class=\"line\">\talign-items: center;\t//垂直方向上下居中</div><div class=\"line\">&#125;</div><div class=\"line\">.newcenter-div&#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#DF6A41;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>是不是觉得简单易懂，而且用起来也比较方便。</p>\n<h3 id=\"flex基本概念\"><a href=\"#flex基本概念\" class=\"headerlink\" title=\"flex基本概念\"></a>flex基本概念</h3><p>将元素的display属性设置为flex后，该元素就成为了”flex容器”,之后的操作类似于在容器中操作，它的子元素都是容器中的部分。</p>\n<h3 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h3><p>flex容器有6个属性</p>\n<p><strong> 为了减少重复代码，且方便读者看懂，该标题(flex容器属性)下的所有代码的css均基于以下两个class属性 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent-container&#123;</div><div class=\"line\">\twidth: 400px;</div><div class=\"line\">\theight: 300px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.parent-container&gt;p&#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 30px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#2548E7;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#dbc21d;</span></div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h4><p>该属性用来定义，子元素的排列方向.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>row</td>\n<td>水平方向，从左往右依次排列(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>row-reverse</td>\n<td>水平方向，从右往左依次排列</td>\n</tr>\n<tr>\n<td>3</td>\n<td>column</td>\n<td>垂直方向，从上往下依次排列</td>\n</tr>\n<tr>\n<td>4</td>\n<td>column-reverse</td>\n<td>垂直方向，从下往上依次排列</td>\n</tr>\n</tbody>\n</table>\n<p>1.row</p>\n<div class=\"parent-container container-row\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-row\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-row&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: row;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.row-reverse</p>\n<div class=\"parent-container container-rowreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-rowreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-rowreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: row-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.column</p>\n<div class=\"parent-container container-column\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-column\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-column&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: column;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.column-reverse</p>\n<div class=\"parent-container container-columnreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-columnreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-columnreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h4><p>该属性用来定义，如果子元素一排排不下，那么它的换行情况.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>nowrap</td>\n<td>表示不换行(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>wrap</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>3</td>\n<td>wrap-reverse</td>\n<td>换行，并且反向排列</td>\n</tr>\n</tbody>\n</table>\n<p>1.nowrap</p>\n<div class=\"parent-container container-nowrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-nowrap\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-nowrap&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: nowrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.wrap</p>\n<div class=\"parent-container container-wrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-wrap\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-wrap&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.wrap-reverse</p>\n<div class=\"parent-container container-wrapreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-wrapreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-wrapreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h4><p>该属性是flex-direction属性和flex-wrap属性的结合，即flex-direction属性和flex-wrap属性的简写形式,这里就不再说明.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.container&#123;</div><div class=\"line\">\tflex-flow: flex-direction || flex-wrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h4><p>该属性用来定义，元素在水平方向上的对齐方式.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>靠左对齐(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>靠右对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>水平居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>space-between</td>\n<td>两端对齐，子元素之间间隔相等，两端无间隔</td>\n</tr>\n<tr>\n<td>5</td>\n<td>space-around</td>\n<td>平均对齐，子元素两侧间隔相等，且不重叠</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-justify-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-justify-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-justify-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-center\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.space-between</p>\n<div class=\"parent-container container-justify-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-spacebetween\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-spacebetween&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: space-between;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.space-around</p>\n<div class=\"parent-container container-justify-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-spacearound\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-spacearound&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h4><p>该属性用来定义，元素在垂直方向上的对齐方式.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>顶部对齐(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>底部对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>垂直居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>baseline</td>\n<td>子元素第一行文字的基线对齐</td>\n</tr>\n<tr>\n<td>5</td>\n<td>stretch</td>\n<td>占满父元素整个垂直方向的高度,即高度与父元素相同(项目未设置高度或设为auto的情况下生效)(默认值)</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-aItems-flexstart\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-aItems-flexend\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-aItems-center\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-center\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.baseline</p>\n<div class=\"parent-container container-aItems-baseline\"><p style=\"height: 80px;font-size: 20px\">flex1</p><p style=\"height: 40px;font-size: 14px\">flex2</p><p style=\"height: 120px;font-size: 22px\">flex3</p><p style=\"height: 100px;font-size: 25px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-baseline\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px;font-size: 20px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px;font-size: 14px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px;font-size: 22px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px;font-size: 25px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-baseline&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: baseline;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.stretch</p>\n<div class=\"parent-container container-aItems-stretch\"><p style=\"height: initial;\">flex1</p><p style=\"height: initial;\">flex2</p><p style=\"height: 50px;\">flex3</p><p style=\"height: 150px;\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-stretch\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: initial;\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: initial;\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 50px;\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 150px;\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-stretch&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h4><p>该属性用来定义，多排子元素在垂直方向上每一排之间的对齐方式.</p>\n<p><strong> 该属性必须在具有多排子元素的父元素中才能生效，即必须有 flex-wrap: wrap; 或 flex-wrap: wrap-reverse;且父元素中有多个子元素，一排放不下的情况下才有效果. </strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>垂直方向上，排之间靠近顶部对齐</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>垂直方向上，排之间靠近底部对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>垂直方向上，排之间居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>space-between</td>\n<td>垂直方向上，第一排与最后一排上下两端紧靠父元素，排之间的间隔平分</td>\n</tr>\n<tr>\n<td>5</td>\n<td>space-around</td>\n<td>垂直方向上平均对齐，排之间两侧间隔相等，且不重叠</td>\n</tr>\n<tr>\n<td>6</td>\n<td>stretch</td>\n<td>所有排占满父元素整个垂直方向的高度(默认值)</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-aContent-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-aContent-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-aContent-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-center\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.space-between</p>\n<div class=\"parent-container container-aContent-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-spacebetween\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-spacebetween&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-between;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.space-around</p>\n<div class=\"parent-container container-aContent-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-spacearound\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-spacearound&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>6.stretch</p>\n<div class=\"parent-container container-aContent-stretch\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-stretch\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-stretch&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"flex容器中子元素的属性\"><a href=\"#flex容器中子元素的属性\" class=\"headerlink\" title=\"flex容器中子元素的属性\"></a>flex容器中子元素的属性</h3><p><strong> 为了减少重复代码，且方便读者看懂，该标题(flex容器中子元素的属性)下的所有代码的css均基于以下两个class属性 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.child-container&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 350px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">&#125;</div><div class=\"line\">.child-container&gt;p&#123;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#dbc21d;</span></div><div class=\"line\">\theight: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>flex子元素具有6个相关的属性，可以将属性设置在子元素上。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>order</td>\n<td>定义子元素的排列顺序。数值越小，排列越靠前，默认为0。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-grow</td>\n<td>定义子元素的放大比例，如果存在剩余空间，也会等比例放大，默认为0。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>flex-shrink</td>\n<td>定义子元素的缩小比例，如果空间不足，该子元素将缩小，默认为1。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>flex-basis</td>\n<td>定义在分配多余空间之前，子元素占据的水平或垂直空间，默认为auto。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>flex</td>\n<td>是flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>align-self</td>\n<td>允许单个子元素有与其他子元素不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于默认值stretch。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h4><p>定义项目的排列顺序。数值越小，排列越靠前。</p>\n<div class=\"child-container childorder\"><p style=\"order: 36\">flex1</p><p style=\"order: 18\">flex2</p><p style=\"order: 5\">flex3</p><p style=\"order: 9\">flex4</p><p style=\"order: 6\">flex5</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container childorder\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 36\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 18\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 5\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 9\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 6\"</span>&gt;flex5&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.childorder&gt;p&#123;</div><div class=\"line\">\twidth:50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h4><p>如果所有子元素的flex-grow属性都为1，则它们将等分一排空间.<br>如果一个子元素的flex-grow属性为2，其他子元素都为1，则前者占据的宽度是其他子元素的2倍。<br><strong> 如果想要flex-grow样式正常执行，则不能给子元素定义宽度width！否则样式会与预想中的不同 </strong></p>\n<div class=\"child-container\"><p style=\"background-color:#ff7f50;flex-grow: 1;\"></p><p style=\"background-color:#2bafd9;flex-grow: 2;\"></p><p style=\"background-color:#f0e68c;flex-grow: 1;\"></p><p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#ff7f50;flex-grow: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#2bafd9;flex-grow: 2;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#f0e68c;flex-grow: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#ffc0cb;flex-grow: 3;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h4><p>如果所有子元素的flex-shrink属性都为1，当空间不足时，所有子元素都将等比例缩小。如果一个子元素的flex-shrink属性为0，其他子元素都为1，则空间不足时，前者不缩小。</p>\n<div class=\"child-container child-flexshrink\"><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 0;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-flexshrink\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 0;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-flexshrink&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h4><p>定义在一排空间未被占满之前，子元素的width或height的值(例如100px)，定义之后，子元素将占据固定空间。</p>\n<div class=\"child-container child-flexshrink\"><p></p><p style=\"flex-basis: 100px;\"></p><p></p><p></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-flexshrink\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-basis: 100px;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-flexshrink&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h4 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h4><p>该属性有6个属性值</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n</tr>\n<tr>\n<td>4</td>\n<td>baseline</td>\n</tr>\n<tr>\n<td>5</td>\n<td>stretch</td>\n</tr>\n<tr>\n<td>6</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>属性值含义可查看 <a href=\"#align-items\">align-items</a> 与align-items属性值的含义相同(auto除外);</p>\n<p>align-self默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch属性值。</p>\n<div class=\"child-container child-alignself\"><p></p><p style=\"align-self: flex-end;\"></p><p></p><p></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-alignself\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"align-self: flex-end;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-alignself&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>flex弹性布局的诞生，解决了传统CSS布局的很多问题，而且使用起来更加方便。</p>\n<p>我们回到之前最开始的那个问题，如果列表是动态的话，使用flex是不是很方便？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"newlist\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"new-ul\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表1&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表2&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表3&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.newlist&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">&#125;</div><div class=\"line\">.new-ul&#123;</div><div class=\"line\">\tmargin-top: 0px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-around;</div><div class=\"line\">&#125;</div><div class=\"line\">.new-ul&gt;li&#123;</div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三个列表的情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li></ul></div>\n\n<p>四个列表情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li></ul></div>\n\n<p>五个列表情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n<p>无需一直修改css文件，非常方便！</p>\n<p>本章完~</p>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/flexincss.js\"></script>","excerpt":"","more":"<p>本文介绍CSS3新增的布局方式，flex弹性布局，便于页面布局及项目。</p>\n<h2 id=\"传统的css布局\"><a href=\"#传统的css布局\" class=\"headerlink\" title=\"传统的css布局\"></a>传统的css布局</h2><p>我们知道传统的css定位比较麻烦，比如垂直居中，比较难实现，但是问题比较多,很难实现自适应。</p>\n<div class=\"oldcenter\"><div class=\"oldcenter-div\">居中</div></div>\n\n<p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"oldcenter\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"oldcenter-div\"</span>&gt;居中&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.oldcenter&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.oldcenter-div &#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#DF6A41;</span></div><div class=\"line\">\tmargin: 0 auto;\t\t\t//左右居中</div><div class=\"line\">\tmargin-top: 50%;\t\t//外边框距离父元素高度顶部框线50%</div><div class=\"line\">\tbottom: 25px;\t\t\t//上移自身高度的一半 50/2 = 25px</div><div class=\"line\">\tposition: relative;\t\t//设置为相对父元素定位</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码可以实现居中，原理是先让子div向下移动其父元素50%的高度，再向上移动自身高度50px的一半,即25px;实现了垂直居中。代码非常冗余。</p>\n<p>而且，如果是动态添加的列表元素，居中更麻烦</p>\n<div class=\"oldcenter\"><ul class=\"old-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n<p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"oldcenter\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"old-ul\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表1&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表2&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表3&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表4&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表5&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.oldcenter&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tposition: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.old-ul&#123;</div><div class=\"line\">\tmargin-top: 0px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">&#125;</div><div class=\"line\">.old-ul&gt;li&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tline-height: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个列表样式看似简单，但是如果列表中的内容是动态添加的呢？我们应该怎样设置每一个列表项的高度和行高？不可能每添加一次就改一次css代码，是不是非常的不方便。</p>\n<p>传统的布局需要依赖于display,position,float等属性，样式调起来很不容易,所以需要改进。</p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><p>2009年，W3C组织提出了一种新的布局方式–弹性布局，即flex布局。这种布局用少量、简单的代码，可以实现页面的响应式布局。并且如今已经得到除IE9-以外的所有浏览器的支持，完全不影响使用。</p>\n<h3 id=\"初识flex\"><a href=\"#初识flex\" class=\"headerlink\" title=\"初识flex\"></a>初识flex</h3><p>我们先来认识一下flex，看看实现传统布局中的垂直居中是否方便。</p>\n<div class=\"newcenter\"><br>    <div class=\"newcenter-div\">flex居中</div><br></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"newcenter\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"newcenter-div\"</span>&gt;flex居中&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.newcenter&#123;</div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\tdisplay: flex;\t\t\t//声明为flex布局</div><div class=\"line\">\tjustify-content: center;//水平方向左右居中</div><div class=\"line\">\talign-items: center;\t//垂直方向上下居中</div><div class=\"line\">&#125;</div><div class=\"line\">.newcenter-div&#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#DF6A41;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>是不是觉得简单易懂，而且用起来也比较方便。</p>\n<h3 id=\"flex基本概念\"><a href=\"#flex基本概念\" class=\"headerlink\" title=\"flex基本概念\"></a>flex基本概念</h3><p>将元素的display属性设置为flex后，该元素就成为了”flex容器”,之后的操作类似于在容器中操作，它的子元素都是容器中的部分。</p>\n<h3 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h3><p>flex容器有6个属性</p>\n<p><strong> 为了减少重复代码，且方便读者看懂，该标题(flex容器属性)下的所有代码的css均基于以下两个class属性 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent-container&#123;</div><div class=\"line\">\twidth: 400px;</div><div class=\"line\">\theight: 300px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.parent-container&gt;p&#123;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\theight: 30px;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#2548E7;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#dbc21d;</span></div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h4><p>该属性用来定义，子元素的排列方向.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>row</td>\n<td>水平方向，从左往右依次排列(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>row-reverse</td>\n<td>水平方向，从右往左依次排列</td>\n</tr>\n<tr>\n<td>3</td>\n<td>column</td>\n<td>垂直方向，从上往下依次排列</td>\n</tr>\n<tr>\n<td>4</td>\n<td>column-reverse</td>\n<td>垂直方向，从下往上依次排列</td>\n</tr>\n</tbody>\n</table>\n<p>1.row</p>\n<div class=\"parent-container container-row\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-row\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-row&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: row;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.row-reverse</p>\n<div class=\"parent-container container-rowreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-rowreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-rowreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: row-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.column</p>\n<div class=\"parent-container container-column\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-column\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-column&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: column;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.column-reverse</p>\n<div class=\"parent-container container-columnreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-columnreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-columnreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-direction: column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h4><p>该属性用来定义，如果子元素一排排不下，那么它的换行情况.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>nowrap</td>\n<td>表示不换行(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>wrap</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>3</td>\n<td>wrap-reverse</td>\n<td>换行，并且反向排列</td>\n</tr>\n</tbody>\n</table>\n<p>1.nowrap</p>\n<div class=\"parent-container container-nowrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-nowrap\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-nowrap&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: nowrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.wrap</p>\n<div class=\"parent-container container-wrap\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-wrap\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-wrap&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.wrap-reverse</p>\n<div class=\"parent-container container-wrapreverse\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-wrapreverse\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex5&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex6&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex7&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex8&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex9&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex10&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex11&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-wrapreverse&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h4><p>该属性是flex-direction属性和flex-wrap属性的结合，即flex-direction属性和flex-wrap属性的简写形式,这里就不再说明.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.container&#123;</div><div class=\"line\">\tflex-flow: flex-direction || flex-wrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h4><p>该属性用来定义，元素在水平方向上的对齐方式.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>靠左对齐(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>靠右对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>水平居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>space-between</td>\n<td>两端对齐，子元素之间间隔相等，两端无间隔</td>\n</tr>\n<tr>\n<td>5</td>\n<td>space-around</td>\n<td>平均对齐，子元素两侧间隔相等，且不重叠</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-justify-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-justify-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-justify-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-center\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.space-between</p>\n<div class=\"parent-container container-justify-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-spacebetween\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-spacebetween&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: space-between;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.space-around</p>\n<div class=\"parent-container container-justify-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-justify-spacearound\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container-justify-spacearound&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tjustify-content: space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h4><p>该属性用来定义，元素在垂直方向上的对齐方式.</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>顶部对齐(默认值)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>底部对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>垂直居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>baseline</td>\n<td>子元素第一行文字的基线对齐</td>\n</tr>\n<tr>\n<td>5</td>\n<td>stretch</td>\n<td>占满父元素整个垂直方向的高度,即高度与父元素相同(项目未设置高度或设为auto的情况下生效)(默认值)</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-aItems-flexstart\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-aItems-flexend\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-aItems-center\"><p style=\"height: 80px\">flex1</p><p style=\"height: 40px\">flex2</p><p style=\"height: 120px\">flex3</p><p style=\"height: 100px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-center\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.baseline</p>\n<div class=\"parent-container container-aItems-baseline\"><p style=\"height: 80px;font-size: 20px\">flex1</p><p style=\"height: 40px;font-size: 14px\">flex2</p><p style=\"height: 120px;font-size: 22px\">flex3</p><p style=\"height: 100px;font-size: 25px\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-baseline\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 80px;font-size: 20px\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 40px;font-size: 14px\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 120px;font-size: 22px\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 100px;font-size: 25px\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-baseline&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: baseline;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.stretch</p>\n<div class=\"parent-container container-aItems-stretch\"><p style=\"height: initial;\">flex1</p><p style=\"height: initial;\">flex2</p><p style=\"height: 50px;\">flex3</p><p style=\"height: 150px;\">flex4</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aItems-stretch\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: initial;\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: initial;\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 50px;\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"height: 150px;\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Items-stretch&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\talign-items: stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h4><p>该属性用来定义，多排子元素在垂直方向上每一排之间的对齐方式.</p>\n<p><strong> 该属性必须在具有多排子元素的父元素中才能生效，即必须有 flex-wrap: wrap; 或 flex-wrap: wrap-reverse;且父元素中有多个子元素，一排放不下的情况下才有效果. </strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n<td>垂直方向上，排之间靠近顶部对齐</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n<td>垂直方向上，排之间靠近底部对齐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n<td>垂直方向上，排之间居中对齐</td>\n</tr>\n<tr>\n<td>4</td>\n<td>space-between</td>\n<td>垂直方向上，第一排与最后一排上下两端紧靠父元素，排之间的间隔平分</td>\n</tr>\n<tr>\n<td>5</td>\n<td>space-around</td>\n<td>垂直方向上平均对齐，排之间两侧间隔相等，且不重叠</td>\n</tr>\n<tr>\n<td>6</td>\n<td>stretch</td>\n<td>所有排占满父元素整个垂直方向的高度(默认值)</td>\n</tr>\n</tbody>\n</table>\n<p>1.flex-start</p>\n<div class=\"parent-container container-aContent-flexstart\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-flexstart\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-flexstart&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: flex-start;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.flex-end</p>\n<div class=\"parent-container container-aContent-flexend\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-flexend\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-flexend&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: flex-end;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.center</p>\n<div class=\"parent-container container-aContent-center\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-center\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-center&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4.space-between</p>\n<div class=\"parent-container container-aContent-spacebetween\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-spacebetween\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-spacebetween&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-between;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>5.space-around</p>\n<div class=\"parent-container container-aContent-spacearound\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-spacearound\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-spacearound&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>6.stretch</p>\n<div class=\"parent-container container-aContent-stretch\"><p>flex1</p><p>flex2</p><p>flex3</p><p>flex4</p><p>flex5</p><p>flex6</p><p>flex7</p><p>flex8</p><p>flex9</p><p>flex10</p><p>flex11</p><p>flex12</p><p>flex13</p><p>flex14</p><p>flex15</p><p>flex16</p><p>flex17</p><p>flex18</p><p>flex19</p><p>flex20</p><p>flex21</p><p>flex22</p><p>flex23</p><p>flex24</p><p>flex25</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"parent-container container-aContent-stretch\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t···\t\t\t//多个p元素</div><div class=\"line\">\t&lt;p&gt;flex23&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex24&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;flex25&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.container<span class=\"_\">-a</span>Content-stretch&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"flex容器中子元素的属性\"><a href=\"#flex容器中子元素的属性\" class=\"headerlink\" title=\"flex容器中子元素的属性\"></a>flex容器中子元素的属性</h3><p><strong> 为了减少重复代码，且方便读者看懂，该标题(flex容器中子元素的属性)下的所有代码的css均基于以下两个class属性 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.child-container&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 350px;</div><div class=\"line\">\theight: 100px;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">&#125;</div><div class=\"line\">.child-container&gt;p&#123;</div><div class=\"line\">\tbackground-color: <span class=\"comment\">#dbc21d;</span></div><div class=\"line\">\theight: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>flex子元素具有6个相关的属性，可以将属性设置在子元素上。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>order</td>\n<td>定义子元素的排列顺序。数值越小，排列越靠前，默认为0。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-grow</td>\n<td>定义子元素的放大比例，如果存在剩余空间，也会等比例放大，默认为0。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>flex-shrink</td>\n<td>定义子元素的缩小比例，如果空间不足，该子元素将缩小，默认为1。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>flex-basis</td>\n<td>定义在分配多余空间之前，子元素占据的水平或垂直空间，默认为auto。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>flex</td>\n<td>是flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>align-self</td>\n<td>允许单个子元素有与其他子元素不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于默认值stretch。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h4><p>定义项目的排列顺序。数值越小，排列越靠前。</p>\n<div class=\"child-container childorder\"><p style=\"order: 36\">flex1</p><p style=\"order: 18\">flex2</p><p style=\"order: 5\">flex3</p><p style=\"order: 9\">flex4</p><p style=\"order: 6\">flex5</p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container childorder\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 36\"</span>&gt;flex1&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 18\"</span>&gt;flex2&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 5\"</span>&gt;flex3&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 9\"</span>&gt;flex4&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"order: 6\"</span>&gt;flex5&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.childorder&gt;p&#123;</div><div class=\"line\">\twidth:50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h4><p>如果所有子元素的flex-grow属性都为1，则它们将等分一排空间.<br>如果一个子元素的flex-grow属性为2，其他子元素都为1，则前者占据的宽度是其他子元素的2倍。<br><strong> 如果想要flex-grow样式正常执行，则不能给子元素定义宽度width！否则样式会与预想中的不同 </strong></p>\n<div class=\"child-container\"><p style=\"background-color:#ff7f50;flex-grow: 1;\"></p><p style=\"background-color:#2bafd9;flex-grow: 2;\"></p><p style=\"background-color:#f0e68c;flex-grow: 1;\"></p><p style=\"background-color:#ffc0cb;flex-grow: 3;\"></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#ff7f50;flex-grow: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#2bafd9;flex-grow: 2;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#f0e68c;flex-grow: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"background-color:#ffc0cb;flex-grow: 3;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h4><p>如果所有子元素的flex-shrink属性都为1，当空间不足时，所有子元素都将等比例缩小。如果一个子元素的flex-shrink属性为0，其他子元素都为1，则空间不足时，前者不缩小。</p>\n<div class=\"child-container child-flexshrink\"><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 0;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p><p style=\"flex-shrink: 1;\"></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-flexshrink\"</span>&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 0;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-shrink: 1;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-flexshrink&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h4><p>定义在一排空间未被占满之前，子元素的width或height的值(例如100px)，定义之后，子元素将占据固定空间。</p>\n<div class=\"child-container child-flexshrink\"><p></p><p style=\"flex-basis: 100px;\"></p><p></p><p></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-flexshrink\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"flex-basis: 100px;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-flexshrink&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h4 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h4><p>该属性有6个属性值</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>flex-start</td>\n</tr>\n<tr>\n<td>2</td>\n<td>flex-end</td>\n</tr>\n<tr>\n<td>3</td>\n<td>center</td>\n</tr>\n<tr>\n<td>4</td>\n<td>baseline</td>\n</tr>\n<tr>\n<td>5</td>\n<td>stretch</td>\n</tr>\n<tr>\n<td>6</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>属性值含义可查看 <a href=\"#align-items\">align-items</a> 与align-items属性值的含义相同(auto除外);</p>\n<p>align-self默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch属性值。</p>\n<div class=\"child-container child-alignself\"><p></p><p style=\"align-self: flex-end;\"></p><p></p><p></p></div>\n\n<p>代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"child-container child-alignself\"</span>&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p style=<span class=\"string\">\"align-self: flex-end;\"</span>&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">\t&lt;p&gt;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.child-alignself&gt;p&#123;</div><div class=\"line\">\theight: 50px;</div><div class=\"line\">\twidth: 50px;</div><div class=\"line\">\tmargin: 5px;</div><div class=\"line\">\tbackground-color:<span class=\"comment\">#be5ad1;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>flex弹性布局的诞生，解决了传统CSS布局的很多问题，而且使用起来更加方便。</p>\n<p>我们回到之前最开始的那个问题，如果列表是动态的话，使用flex是不是很方便？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html代码</div><div class=\"line\">&lt;div class=<span class=\"string\">\"newlist\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"new-ul\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表1&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表2&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;列表3&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">// css代码</div><div class=\"line\">.newlist&#123;</div><div class=\"line\">\tborder: 1px solid <span class=\"comment\">#D53419;</span></div><div class=\"line\">\tbackground-color: <span class=\"comment\">#50E9EE;</span></div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">&#125;</div><div class=\"line\">.new-ul&#123;</div><div class=\"line\">\tmargin-top: 0px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\tflex-wrap: wrap;</div><div class=\"line\">\talign-content: space-around;</div><div class=\"line\">&#125;</div><div class=\"line\">.new-ul&gt;li&#123;</div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三个列表的情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li></ul></div>\n\n<p>四个列表情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li></ul></div>\n\n<p>五个列表情况</p>\n<div class=\"newlist\"><ul class=\"new-ul\"><li>列表1</li><li>列表2</li><li>列表3</li><li>列表4</li><li>列表5</li></ul></div>\n\n<p>无需一直修改css文件，非常方便！</p>\n<p>本章完~</p>\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/flexincss.js\"></script>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-19T07:14:19.450Z","updated":"2017-02-20T06:48:26.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxyq000a1gwdf66fbqff","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo引入自定义css文件","date":"2017-02-20T09:29:31.000Z","_content":"\n在搭建hexo的时候，我在网络上搜了很多对于hexo导入自定义css文件的解法，很抱歉，可能是由于自己太菜，目前没有在网上找到解决方法，不过我自己想了一个方法导入了自定义css文件，废话不多说，下面来给大家解答，希望可以帮到大家。\n\n首先，html页面内是识别\"script\"标签的，我们可以利用这个标签，通过js代码将css文件导入页面。所以可以在页面中添加script代码\n\n``` bash\n<script type=\"text/javascript\" src=\"/js/my/test.js\"></script>\n```\n\n为了不与主题自带的js混合，我们可以在主题文件夹下边的js文件夹里添加一个my文件夹，用来放自己的js文件。这里我在my文件夹里添加了一个test.js文件。\n\n然后将上面这段\"script\"代码直接放入需要引入css的.md文件里。\n\n为了方便页面加载的时候运行test.js，可以再引入jQuery.js文件。\n\n** 这里一定注意jQuery文件要在上边这段\"script\"前面，否则会报错 **\n\n``` bash\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/test.js\"></script>\n```\n\njquery版本可以使用主题自带的jquery版本。\n\n然后在test.js内加入如下代码，进行动态添加css文件\n\n``` bash\n$(document).ready(function() {\n\tvar url = '/css/my/test.css';\n\tvar doc = document;\n\tvar link = doc.createElement(\"link\");\n\tlink.setAttribute(\"rel\",\"stylesheet\");\n\tlink.setAttribute(\"type\",\"text/css\");\n\tlink.setAttribute(\"href\",url);\n\tvar heads = doc.getElementsByTagName(\"head\");\n\tif (heads.length) {\n\t\theads[0].appendChild(link);\n\t}else{\n\t\tdoc.documentElement.appendChild(link);\n\t}\n});\n```\n\n然后在主题的source文件夹下边的css文件夹里创建一个my文件夹，用来放自己的css文件。原因上边已经说了，和js一样，防止与主题自带的css混合，也方便自己添加。\n\n接着，创建test.css文件，并给该css文件写需要用到的css。\n\n然后重新生成项目\n\n``` bash\nhexo g\n```\n\n部署项目\n\n``` bash\nhexo d\n```\n\n完成后查看自己的页面，是不是将css加载进去了呢？\n\n\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n\n为了防止这个情况，可以给css起一些比较特殊的名称，比如给所有css名称前添加 \"my_\" 。\n例如,可以起这种名字：\n\n``` bash\n<div class=\"my_head\"></div>\n<div class=\"my_artical\"></div>\n<div class=\"my_test\"></div>\n<div class=\"my_container\"></div>\n```\n这样就不会重复啦！\n\n第一次写博客，也是第一次用hexo，有点啰嗦，不好意思，如果你们有更好的解决办法，或者hexo本来就自带添加自定义css文件的参数，希望联系我，和大家一起分享！谢谢！\n","source":"_posts/hexo导入自定义css文件.md","raw":"---\ntitle: hexo引入自定义css文件\ndate: 2017-02-20 17:29:31\ncategories: \"hexo\"\ntags:\n\t- hexo\n---\n\n在搭建hexo的时候，我在网络上搜了很多对于hexo导入自定义css文件的解法，很抱歉，可能是由于自己太菜，目前没有在网上找到解决方法，不过我自己想了一个方法导入了自定义css文件，废话不多说，下面来给大家解答，希望可以帮到大家。\n\n首先，html页面内是识别\"script\"标签的，我们可以利用这个标签，通过js代码将css文件导入页面。所以可以在页面中添加script代码\n\n``` bash\n<script type=\"text/javascript\" src=\"/js/my/test.js\"></script>\n```\n\n为了不与主题自带的js混合，我们可以在主题文件夹下边的js文件夹里添加一个my文件夹，用来放自己的js文件。这里我在my文件夹里添加了一个test.js文件。\n\n然后将上面这段\"script\"代码直接放入需要引入css的.md文件里。\n\n为了方便页面加载的时候运行test.js，可以再引入jQuery.js文件。\n\n** 这里一定注意jQuery文件要在上边这段\"script\"前面，否则会报错 **\n\n``` bash\n<script type=\"text/javascript\" src=\"/js/jquery-2.1.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/my/test.js\"></script>\n```\n\njquery版本可以使用主题自带的jquery版本。\n\n然后在test.js内加入如下代码，进行动态添加css文件\n\n``` bash\n$(document).ready(function() {\n\tvar url = '/css/my/test.css';\n\tvar doc = document;\n\tvar link = doc.createElement(\"link\");\n\tlink.setAttribute(\"rel\",\"stylesheet\");\n\tlink.setAttribute(\"type\",\"text/css\");\n\tlink.setAttribute(\"href\",url);\n\tvar heads = doc.getElementsByTagName(\"head\");\n\tif (heads.length) {\n\t\theads[0].appendChild(link);\n\t}else{\n\t\tdoc.documentElement.appendChild(link);\n\t}\n});\n```\n\n然后在主题的source文件夹下边的css文件夹里创建一个my文件夹，用来放自己的css文件。原因上边已经说了，和js一样，防止与主题自带的css混合，也方便自己添加。\n\n接着，创建test.css文件，并给该css文件写需要用到的css。\n\n然后重新生成项目\n\n``` bash\nhexo g\n```\n\n部署项目\n\n``` bash\nhexo d\n```\n\n完成后查看自己的页面，是不是将css加载进去了呢？\n\n\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n**切记，自定义css的名称不能与主题自带的css重名！！！！！！！**\n\n为了防止这个情况，可以给css起一些比较特殊的名称，比如给所有css名称前添加 \"my_\" 。\n例如,可以起这种名字：\n\n``` bash\n<div class=\"my_head\"></div>\n<div class=\"my_artical\"></div>\n<div class=\"my_test\"></div>\n<div class=\"my_container\"></div>\n```\n这样就不会重复啦！\n\n第一次写博客，也是第一次用hexo，有点啰嗦，不好意思，如果你们有更好的解决办法，或者hexo本来就自带添加自定义css文件的参数，希望联系我，和大家一起分享！谢谢！\n","slug":"hexo导入自定义css文件","published":1,"updated":"2017-05-18T10:03:44.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxyv000e1gwd906jygkg","content":"<p>在搭建hexo的时候，我在网络上搜了很多对于hexo导入自定义css文件的解法，很抱歉，可能是由于自己太菜，目前没有在网上找到解决方法，不过我自己想了一个方法导入了自定义css文件，废话不多说，下面来给大家解答，希望可以帮到大家。</p>\n<p>首先，html页面内是识别”script”标签的，我们可以利用这个标签，通过js代码将css文件导入页面。所以可以在页面中添加script代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/my/test.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>为了不与主题自带的js混合，我们可以在主题文件夹下边的js文件夹里添加一个my文件夹，用来放自己的js文件。这里我在my文件夹里添加了一个test.js文件。</p>\n<p>然后将上面这段”script”代码直接放入需要引入css的.md文件里。</p>\n<p>为了方便页面加载的时候运行test.js，可以再引入jQuery.js文件。</p>\n<p><strong> 这里一定注意jQuery文件要在上边这段”script”前面，否则会报错 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/jquery-2.1.0.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/my/test.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>jquery版本可以使用主题自带的jquery版本。</p>\n<p>然后在test.js内加入如下代码，进行动态添加css文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).ready(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\tvar url = <span class=\"string\">'/css/my/test.css'</span>;</div><div class=\"line\">\tvar doc = document;</div><div class=\"line\">\tvar link = doc.createElement(<span class=\"string\">\"link\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"rel\"</span>,<span class=\"string\">\"stylesheet\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"type\"</span>,<span class=\"string\">\"text/css\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"href\"</span>,url);</div><div class=\"line\">\tvar heads = doc.getElementsByTagName(<span class=\"string\">\"head\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (heads.length) &#123;</div><div class=\"line\">\t\theads[0].appendChild(link);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tdoc.documentElement.appendChild(link);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后在主题的source文件夹下边的css文件夹里创建一个my文件夹，用来放自己的css文件。原因上边已经说了，和js一样，防止与主题自带的css混合，也方便自己添加。</p>\n<p>接着，创建test.css文件，并给该css文件写需要用到的css。</p>\n<p>然后重新生成项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<p>部署项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>完成后查看自己的页面，是不是将css加载进去了呢？</p>\n<p><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong><br><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong><br><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong></p>\n<p>为了防止这个情况，可以给css起一些比较特殊的名称，比如给所有css名称前添加 “my_” 。<br>例如,可以起这种名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"my_head\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_artical\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_test\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_container\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>这样就不会重复啦！</p>\n<p>第一次写博客，也是第一次用hexo，有点啰嗦，不好意思，如果你们有更好的解决办法，或者hexo本来就自带添加自定义css文件的参数，希望联系我，和大家一起分享！谢谢！</p>\n","excerpt":"","more":"<p>在搭建hexo的时候，我在网络上搜了很多对于hexo导入自定义css文件的解法，很抱歉，可能是由于自己太菜，目前没有在网上找到解决方法，不过我自己想了一个方法导入了自定义css文件，废话不多说，下面来给大家解答，希望可以帮到大家。</p>\n<p>首先，html页面内是识别”script”标签的，我们可以利用这个标签，通过js代码将css文件导入页面。所以可以在页面中添加script代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/my/test.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>为了不与主题自带的js混合，我们可以在主题文件夹下边的js文件夹里添加一个my文件夹，用来放自己的js文件。这里我在my文件夹里添加了一个test.js文件。</p>\n<p>然后将上面这段”script”代码直接放入需要引入css的.md文件里。</p>\n<p>为了方便页面加载的时候运行test.js，可以再引入jQuery.js文件。</p>\n<p><strong> 这里一定注意jQuery文件要在上边这段”script”前面，否则会报错 </strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/jquery-2.1.0.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/my/test.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>jquery版本可以使用主题自带的jquery版本。</p>\n<p>然后在test.js内加入如下代码，进行动态添加css文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).ready(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\tvar url = <span class=\"string\">'/css/my/test.css'</span>;</div><div class=\"line\">\tvar doc = document;</div><div class=\"line\">\tvar link = doc.createElement(<span class=\"string\">\"link\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"rel\"</span>,<span class=\"string\">\"stylesheet\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"type\"</span>,<span class=\"string\">\"text/css\"</span>);</div><div class=\"line\">\tlink.setAttribute(<span class=\"string\">\"href\"</span>,url);</div><div class=\"line\">\tvar heads = doc.getElementsByTagName(<span class=\"string\">\"head\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (heads.length) &#123;</div><div class=\"line\">\t\theads[0].appendChild(link);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tdoc.documentElement.appendChild(link);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后在主题的source文件夹下边的css文件夹里创建一个my文件夹，用来放自己的css文件。原因上边已经说了，和js一样，防止与主题自带的css混合，也方便自己添加。</p>\n<p>接着，创建test.css文件，并给该css文件写需要用到的css。</p>\n<p>然后重新生成项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<p>部署项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>完成后查看自己的页面，是不是将css加载进去了呢？</p>\n<p><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong><br><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong><br><strong>切记，自定义css的名称不能与主题自带的css重名！！！！！！！</strong></p>\n<p>为了防止这个情况，可以给css起一些比较特殊的名称，比如给所有css名称前添加 “my_” 。<br>例如,可以起这种名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"my_head\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_artical\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_test\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"my_container\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>这样就不会重复啦！</p>\n<p>第一次写博客，也是第一次用hexo，有点啰嗦，不好意思，如果你们有更好的解决办法，或者hexo本来就自带添加自定义css文件的参数，希望联系我，和大家一起分享！谢谢！</p>\n"},{"title":"js容易混淆的几个函数","date":"2017-02-27T13:35:11.000Z","_content":"\n今天我来为大家介绍一下Javascript中比较容易混淆的几个函数。\n\n## call和apply\n\n在Javascript中，call和apply都是用另一个对象替换当前对象的方法。\n\n### call()\n\n#### 定义\n\ncall方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n#### 例子1\n\n``` bash\nfunction add(a, b){\n\treturn a + b;\n}\nfunction sub(a, b){\n\treturn a - b;\n}\nvar result = add.call(sub, 8, 5);\nvar result2 = sub.call(add, 8, 5);\nconsole.log(result);\t//13\nconsole.log(result2);\t//3\n```\n\n#### 解释\n\n这段代码的意思就是：用add来替换sub，add.call(sub, 8, 5) == add(8,5);所以结果result为13。sub.call(add, 8, 5) == sub(8,5);所以结果result2为3.\n\n#### 例子2\n\n如果你还是看不懂，那么我再来举个例子，代码如下：\n\n``` bash\nfunction fn1(){\n\tthis.a = 1;\n\tthis.b = 2;\n\tthis.add = function(){\n\t\treturn this.a + this.b;\n\t}\n}\nfunction fn2(){\n\tthis.a = 3;\n\tthis.b = 4;\n}\nvar f1 = new fn1();\nvar f2 = new fn2();\nvar result = f1.add.call(f2);\nconsole.log(result);\t// 7\n```\n\n#### 解释\n\n上边的代码，很明显 fn2 中并没有add函数，我们这里使用了继承的方法，通过继承fn1方法中的add函数，对fn2来实现add的功能。这个应该可以看得懂了吧！\n\n### apply()\n\n#### 定义\n\napply方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n是不是发现apply()方法和call()方法的定义一模一样。没错，这里不是我写错了，而是它们确实用法一模一样。\n\n** 唯一的区别就是，call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。**\n\n#### 例子1\n\n我们用上面call的例子来写一下apply方法。\n\n``` bash\nfunction add(a, b){\n\treturn a + b;\n}\nfunction sub(a, b){\n\treturn a - b;\n}\n\nvar result1 = add.apply(sub, [8, 5]);\nvar result2 = sub.apply(add, [8, 5]);\n//var result3 = add.apply(sub, 8, 5);\n//var result4 = sub.apply(add, 8, 5);\n\nconsole.log(result1);\t//13\nconsole.log(result2);\t//3\n//console.log(result3);\t//报错\n//console.log(result4);\t//报错\n```\n\n#### 解释\n\n这段代码的意思就是：用add来替换sub，add.apply(sub, [8, 5]) == add(8,5);所以结果result为13。sub.apply(add, [8, 5]) == sub(8,5);所以结果result2为3.\n\n#### 例子2\n\n``` bash\nfunction fn1(){\n\tthis.add = function(a,b){\n\t\treturn a + b;\n\t};\n}\nfunction fn2(){\n}\n\nvar f1 = new fn1();\nvar f2 = new fn2();\nvar result1 = f1.add(1,2);\nvar result2 = f1.add.apply(f2,[3,4]);\nconsole.log(result1);\t//3\nconsole.log(result2);\t//7\n```\n\n上面例子中，函数fn2并没有add方法，但是我们可以通过apply函数调用fn1函数中的add方法，实现继承。\n\n## typeof和instanceof\n\n在Javascript中，有这样两个用来判断数据类型的方法，typeof和instanceof。\n\n### typeof\n\n#### 说明\n\ntypeof方法可以用来检测变量的数据类型，它有6个可能的返回值：\n1. 'string'       ---------字符串类型\n2. 'number'       ---------数值类型\n3. 'object'       ---------对象类型或数组类型或null\n4. 'boolean'      ---------布尔值，true或false\n5. 'undefined'    ---------未定义或未赋值\n6. 'function'     ---------函数或方法。\n\n#### 代码\n\n``` bash\nvar str = 'abc';\nvar num = 123;\nvar s = '123';\nvar arr = [1,2,3];\nvar obj = {name:'John',sex:'man'};\nvar bool = true;\nvar nothing;\nvar nul = null;\nvar fn = function(){};\n\nconsole.log(typeof str);\t//string\nconsole.log(typeof num);\t//number\nconsole.log(typeof s);\t\t//string\nconsole.log(typeof arr);\t//object\nconsole.log(typeof obj);\t//object\nconsole.log(typeof bool);\t//boolean\nconsole.log(typeof nothing);//undefined\nconsole.log(typeof nul);\t//object\nconsole.log(typeof fn);\t\t//function\nconsole.log(typeof aaa);\t//undefined\n```\n\n### instanceof\n\n#### 说明\n\ninstanceof 方法用来检测变量的数据类型是否为要检测的收据类型，它只有2个可能的返回值：\ntrue 或 false，即布尔值。\n\n#### 代码\n\n``` bash\nvar str = 'abc';\nvar num = 123;\nvar s = new String('123');\nvar n = new Number(123);\nvar obj = {};\nvar arr = [];\n\nconsole.log(str instanceof String);\t//false\nconsole.log(num instanceof Number);\t//false\nconsole.log(s instanceof String);\t//true\nconsole.log(n instanceof Number);\t//true\nconsole.log(obj instanceof Object);\t//true\nconsole.log(arr instanceof Array);\t//true\n```\n\n#### 注意\n\n从上面的代码可以看出，instanceof确实只返回一个布尔值。而且，要注意的是：\n** instanceof只能用来判断对象和函数，不能用来判断字符串和数字等 **\n\n","source":"_posts/js容易混淆的几个函数.md","raw":"---\ntitle: js容易混淆的几个函数\ndate: 2017-02-27 21:35:11\ncategories: \"Javascript\"\ntags:\n\t- Javascript\n---\n\n今天我来为大家介绍一下Javascript中比较容易混淆的几个函数。\n\n## call和apply\n\n在Javascript中，call和apply都是用另一个对象替换当前对象的方法。\n\n### call()\n\n#### 定义\n\ncall方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n#### 例子1\n\n``` bash\nfunction add(a, b){\n\treturn a + b;\n}\nfunction sub(a, b){\n\treturn a - b;\n}\nvar result = add.call(sub, 8, 5);\nvar result2 = sub.call(add, 8, 5);\nconsole.log(result);\t//13\nconsole.log(result2);\t//3\n```\n\n#### 解释\n\n这段代码的意思就是：用add来替换sub，add.call(sub, 8, 5) == add(8,5);所以结果result为13。sub.call(add, 8, 5) == sub(8,5);所以结果result2为3.\n\n#### 例子2\n\n如果你还是看不懂，那么我再来举个例子，代码如下：\n\n``` bash\nfunction fn1(){\n\tthis.a = 1;\n\tthis.b = 2;\n\tthis.add = function(){\n\t\treturn this.a + this.b;\n\t}\n}\nfunction fn2(){\n\tthis.a = 3;\n\tthis.b = 4;\n}\nvar f1 = new fn1();\nvar f2 = new fn2();\nvar result = f1.add.call(f2);\nconsole.log(result);\t// 7\n```\n\n#### 解释\n\n上边的代码，很明显 fn2 中并没有add函数，我们这里使用了继承的方法，通过继承fn1方法中的add函数，对fn2来实现add的功能。这个应该可以看得懂了吧！\n\n### apply()\n\n#### 定义\n\napply方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n是不是发现apply()方法和call()方法的定义一模一样。没错，这里不是我写错了，而是它们确实用法一模一样。\n\n** 唯一的区别就是，call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。**\n\n#### 例子1\n\n我们用上面call的例子来写一下apply方法。\n\n``` bash\nfunction add(a, b){\n\treturn a + b;\n}\nfunction sub(a, b){\n\treturn a - b;\n}\n\nvar result1 = add.apply(sub, [8, 5]);\nvar result2 = sub.apply(add, [8, 5]);\n//var result3 = add.apply(sub, 8, 5);\n//var result4 = sub.apply(add, 8, 5);\n\nconsole.log(result1);\t//13\nconsole.log(result2);\t//3\n//console.log(result3);\t//报错\n//console.log(result4);\t//报错\n```\n\n#### 解释\n\n这段代码的意思就是：用add来替换sub，add.apply(sub, [8, 5]) == add(8,5);所以结果result为13。sub.apply(add, [8, 5]) == sub(8,5);所以结果result2为3.\n\n#### 例子2\n\n``` bash\nfunction fn1(){\n\tthis.add = function(a,b){\n\t\treturn a + b;\n\t};\n}\nfunction fn2(){\n}\n\nvar f1 = new fn1();\nvar f2 = new fn2();\nvar result1 = f1.add(1,2);\nvar result2 = f1.add.apply(f2,[3,4]);\nconsole.log(result1);\t//3\nconsole.log(result2);\t//7\n```\n\n上面例子中，函数fn2并没有add方法，但是我们可以通过apply函数调用fn1函数中的add方法，实现继承。\n\n## typeof和instanceof\n\n在Javascript中，有这样两个用来判断数据类型的方法，typeof和instanceof。\n\n### typeof\n\n#### 说明\n\ntypeof方法可以用来检测变量的数据类型，它有6个可能的返回值：\n1. 'string'       ---------字符串类型\n2. 'number'       ---------数值类型\n3. 'object'       ---------对象类型或数组类型或null\n4. 'boolean'      ---------布尔值，true或false\n5. 'undefined'    ---------未定义或未赋值\n6. 'function'     ---------函数或方法。\n\n#### 代码\n\n``` bash\nvar str = 'abc';\nvar num = 123;\nvar s = '123';\nvar arr = [1,2,3];\nvar obj = {name:'John',sex:'man'};\nvar bool = true;\nvar nothing;\nvar nul = null;\nvar fn = function(){};\n\nconsole.log(typeof str);\t//string\nconsole.log(typeof num);\t//number\nconsole.log(typeof s);\t\t//string\nconsole.log(typeof arr);\t//object\nconsole.log(typeof obj);\t//object\nconsole.log(typeof bool);\t//boolean\nconsole.log(typeof nothing);//undefined\nconsole.log(typeof nul);\t//object\nconsole.log(typeof fn);\t\t//function\nconsole.log(typeof aaa);\t//undefined\n```\n\n### instanceof\n\n#### 说明\n\ninstanceof 方法用来检测变量的数据类型是否为要检测的收据类型，它只有2个可能的返回值：\ntrue 或 false，即布尔值。\n\n#### 代码\n\n``` bash\nvar str = 'abc';\nvar num = 123;\nvar s = new String('123');\nvar n = new Number(123);\nvar obj = {};\nvar arr = [];\n\nconsole.log(str instanceof String);\t//false\nconsole.log(num instanceof Number);\t//false\nconsole.log(s instanceof String);\t//true\nconsole.log(n instanceof Number);\t//true\nconsole.log(obj instanceof Object);\t//true\nconsole.log(arr instanceof Array);\t//true\n```\n\n#### 注意\n\n从上面的代码可以看出，instanceof确实只返回一个布尔值。而且，要注意的是：\n** instanceof只能用来判断对象和函数，不能用来判断字符串和数字等 **\n\n","slug":"js容易混淆的几个函数","published":1,"updated":"2017-05-18T10:04:08.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxz0000h1gwddn3eju6t","content":"<p>今天我来为大家介绍一下Javascript中比较容易混淆的几个函数。</p>\n<h2 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h2><p>在Javascript中，call和apply都是用另一个对象替换当前对象的方法。</p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>call方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<h4 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> add(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> sub(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a - b;</div><div class=\"line\">&#125;</div><div class=\"line\">var result = add.call(sub, 8, 5);</div><div class=\"line\">var result2 = sub.call(add, 8, 5);</div><div class=\"line\">console.log(result);\t//13</div><div class=\"line\">console.log(result2);\t//3</div></pre></td></tr></table></figure>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>这段代码的意思就是：用add来替换sub，add.call(sub, 8, 5) == add(8,5);所以结果result为13。sub.call(add, 8, 5) == sub(8,5);所以结果result2为3.</p>\n<h4 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h4><p>如果你还是看不懂，那么我再来举个例子，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>()&#123;</div><div class=\"line\">\tthis.a = 1;</div><div class=\"line\">\tthis.b = 2;</div><div class=\"line\">\tthis.add = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> this.a + this.b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>()&#123;</div><div class=\"line\">\tthis.a = 3;</div><div class=\"line\">\tthis.b = 4;</div><div class=\"line\">&#125;</div><div class=\"line\">var f1 = new fn1();</div><div class=\"line\">var f2 = new fn2();</div><div class=\"line\">var result = f1.add.call(f2);</div><div class=\"line\">console.log(result);\t// 7</div></pre></td></tr></table></figure>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>上边的代码，很明显 fn2 中并没有add函数，我们这里使用了继承的方法，通过继承fn1方法中的add函数，对fn2来实现add的功能。这个应该可以看得懂了吧！</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>apply方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<p>是不是发现apply()方法和call()方法的定义一模一样。没错，这里不是我写错了，而是它们确实用法一模一样。</p>\n<p><strong> 唯一的区别就是，call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。</strong></p>\n<h4 id=\"例子1-1\"><a href=\"#例子1-1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h4><p>我们用上面call的例子来写一下apply方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> add(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> sub(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a - b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result1 = add.apply(sub, [8, 5]);</div><div class=\"line\">var result2 = sub.apply(add, [8, 5]);</div><div class=\"line\">//var result3 = add.apply(sub, 8, 5);</div><div class=\"line\">//var result4 = sub.apply(add, 8, 5);</div><div class=\"line\"></div><div class=\"line\">console.log(result1);\t//13</div><div class=\"line\">console.log(result2);\t//3</div><div class=\"line\">//console.log(result3);\t//报错</div><div class=\"line\">//console.log(result4);\t//报错</div></pre></td></tr></table></figure>\n<h4 id=\"解释-2\"><a href=\"#解释-2\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>这段代码的意思就是：用add来替换sub，add.apply(sub, [8, 5]) == add(8,5);所以结果result为13。sub.apply(add, [8, 5]) == sub(8,5);所以结果result2为3.</p>\n<h4 id=\"例子2-1\"><a href=\"#例子2-1\" class=\"headerlink\" title=\"例子2\"></a>例子2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>()&#123;</div><div class=\"line\">\tthis.add = <span class=\"keyword\">function</span>(a,b)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var f1 = new fn1();</div><div class=\"line\">var f2 = new fn2();</div><div class=\"line\">var result1 = f1.add(1,2);</div><div class=\"line\">var result2 = f1.add.apply(f2,[3,4]);</div><div class=\"line\">console.log(result1);\t//3</div><div class=\"line\">console.log(result2);\t//7</div></pre></td></tr></table></figure>\n<p>上面例子中，函数fn2并没有add方法，但是我们可以通过apply函数调用fn1函数中的add方法，实现继承。</p>\n<h2 id=\"typeof和instanceof\"><a href=\"#typeof和instanceof\" class=\"headerlink\" title=\"typeof和instanceof\"></a>typeof和instanceof</h2><p>在Javascript中，有这样两个用来判断数据类型的方法，typeof和instanceof。</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>typeof方法可以用来检测变量的数据类型，它有6个可能的返回值：</p>\n<ol>\n<li>‘string’       ———字符串类型</li>\n<li>‘number’       ———数值类型</li>\n<li>‘object’       ———对象类型或数组类型或null</li>\n<li>‘boolean’      ———布尔值，true或false</li>\n<li>‘undefined’    ———未定义或未赋值</li>\n<li>‘function’     ———函数或方法。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'abc'</span>;</div><div class=\"line\">var num = 123;</div><div class=\"line\">var s = <span class=\"string\">'123'</span>;</div><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">var obj = &#123;name:<span class=\"string\">'John'</span>,sex:<span class=\"string\">'man'</span>&#125;;</div><div class=\"line\">var bool = <span class=\"literal\">true</span>;</div><div class=\"line\">var nothing;</div><div class=\"line\">var nul = null;</div><div class=\"line\">var fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">console.log(typeof str);\t//string</div><div class=\"line\">console.log(typeof num);\t//number</div><div class=\"line\">console.log(typeof s);\t\t//string</div><div class=\"line\">console.log(typeof arr);\t//object</div><div class=\"line\">console.log(typeof obj);\t//object</div><div class=\"line\">console.log(typeof bool);\t//boolean</div><div class=\"line\">console.log(typeof nothing);//undefined</div><div class=\"line\">console.log(typeof nul);\t//object</div><div class=\"line\">console.log(typeof fn);\t\t//<span class=\"keyword\">function</span></div><div class=\"line\">console.log(typeof aaa);\t//undefined</div></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><h4 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>instanceof 方法用来检测变量的数据类型是否为要检测的收据类型，它只有2个可能的返回值：<br>true 或 false，即布尔值。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'abc'</span>;</div><div class=\"line\">var num = 123;</div><div class=\"line\">var s = new String(<span class=\"string\">'123'</span>);</div><div class=\"line\">var n = new Number(123);</div><div class=\"line\">var obj = &#123;&#125;;</div><div class=\"line\">var arr = [];</div><div class=\"line\"></div><div class=\"line\">console.log(str instanceof String);\t//<span class=\"literal\">false</span></div><div class=\"line\">console.log(num instanceof Number);\t//<span class=\"literal\">false</span></div><div class=\"line\">console.log(s instanceof String);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(n instanceof Number);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(obj instanceof Object);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(arr instanceof Array);\t//<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>从上面的代码可以看出，instanceof确实只返回一个布尔值。而且，要注意的是：<br><strong> instanceof只能用来判断对象和函数，不能用来判断字符串和数字等 </strong></p>\n","excerpt":"","more":"<p>今天我来为大家介绍一下Javascript中比较容易混淆的几个函数。</p>\n<h2 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h2><p>在Javascript中，call和apply都是用另一个对象替换当前对象的方法。</p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>call方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<h4 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> add(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> sub(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a - b;</div><div class=\"line\">&#125;</div><div class=\"line\">var result = add.call(sub, 8, 5);</div><div class=\"line\">var result2 = sub.call(add, 8, 5);</div><div class=\"line\">console.log(result);\t//13</div><div class=\"line\">console.log(result2);\t//3</div></pre></td></tr></table></figure>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>这段代码的意思就是：用add来替换sub，add.call(sub, 8, 5) == add(8,5);所以结果result为13。sub.call(add, 8, 5) == sub(8,5);所以结果result2为3.</p>\n<h4 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h4><p>如果你还是看不懂，那么我再来举个例子，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>()&#123;</div><div class=\"line\">\tthis.a = 1;</div><div class=\"line\">\tthis.b = 2;</div><div class=\"line\">\tthis.add = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> this.a + this.b;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>()&#123;</div><div class=\"line\">\tthis.a = 3;</div><div class=\"line\">\tthis.b = 4;</div><div class=\"line\">&#125;</div><div class=\"line\">var f1 = new fn1();</div><div class=\"line\">var f2 = new fn2();</div><div class=\"line\">var result = f1.add.call(f2);</div><div class=\"line\">console.log(result);\t// 7</div></pre></td></tr></table></figure>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>上边的代码，很明显 fn2 中并没有add函数，我们这里使用了继承的方法，通过继承fn1方法中的add函数，对fn2来实现add的功能。这个应该可以看得懂了吧！</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>apply方法用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<p>是不是发现apply()方法和call()方法的定义一模一样。没错，这里不是我写错了，而是它们确实用法一模一样。</p>\n<p><strong> 唯一的区别就是，call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。</strong></p>\n<h4 id=\"例子1-1\"><a href=\"#例子1-1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h4><p>我们用上面call的例子来写一下apply方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> add(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> sub(a, b)&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> a - b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result1 = add.apply(sub, [8, 5]);</div><div class=\"line\">var result2 = sub.apply(add, [8, 5]);</div><div class=\"line\">//var result3 = add.apply(sub, 8, 5);</div><div class=\"line\">//var result4 = sub.apply(add, 8, 5);</div><div class=\"line\"></div><div class=\"line\">console.log(result1);\t//13</div><div class=\"line\">console.log(result2);\t//3</div><div class=\"line\">//console.log(result3);\t//报错</div><div class=\"line\">//console.log(result4);\t//报错</div></pre></td></tr></table></figure>\n<h4 id=\"解释-2\"><a href=\"#解释-2\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>这段代码的意思就是：用add来替换sub，add.apply(sub, [8, 5]) == add(8,5);所以结果result为13。sub.apply(add, [8, 5]) == sub(8,5);所以结果result2为3.</p>\n<h4 id=\"例子2-1\"><a href=\"#例子2-1\" class=\"headerlink\" title=\"例子2\"></a>例子2</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>()&#123;</div><div class=\"line\">\tthis.add = <span class=\"keyword\">function</span>(a,b)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> a + b;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var f1 = new fn1();</div><div class=\"line\">var f2 = new fn2();</div><div class=\"line\">var result1 = f1.add(1,2);</div><div class=\"line\">var result2 = f1.add.apply(f2,[3,4]);</div><div class=\"line\">console.log(result1);\t//3</div><div class=\"line\">console.log(result2);\t//7</div></pre></td></tr></table></figure>\n<p>上面例子中，函数fn2并没有add方法，但是我们可以通过apply函数调用fn1函数中的add方法，实现继承。</p>\n<h2 id=\"typeof和instanceof\"><a href=\"#typeof和instanceof\" class=\"headerlink\" title=\"typeof和instanceof\"></a>typeof和instanceof</h2><p>在Javascript中，有这样两个用来判断数据类型的方法，typeof和instanceof。</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>typeof方法可以用来检测变量的数据类型，它有6个可能的返回值：</p>\n<ol>\n<li>‘string’       ———字符串类型</li>\n<li>‘number’       ———数值类型</li>\n<li>‘object’       ———对象类型或数组类型或null</li>\n<li>‘boolean’      ———布尔值，true或false</li>\n<li>‘undefined’    ———未定义或未赋值</li>\n<li>‘function’     ———函数或方法。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'abc'</span>;</div><div class=\"line\">var num = 123;</div><div class=\"line\">var s = <span class=\"string\">'123'</span>;</div><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">var obj = &#123;name:<span class=\"string\">'John'</span>,sex:<span class=\"string\">'man'</span>&#125;;</div><div class=\"line\">var bool = <span class=\"literal\">true</span>;</div><div class=\"line\">var nothing;</div><div class=\"line\">var nul = null;</div><div class=\"line\">var fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">console.log(typeof str);\t//string</div><div class=\"line\">console.log(typeof num);\t//number</div><div class=\"line\">console.log(typeof s);\t\t//string</div><div class=\"line\">console.log(typeof arr);\t//object</div><div class=\"line\">console.log(typeof obj);\t//object</div><div class=\"line\">console.log(typeof bool);\t//boolean</div><div class=\"line\">console.log(typeof nothing);//undefined</div><div class=\"line\">console.log(typeof nul);\t//object</div><div class=\"line\">console.log(typeof fn);\t\t//<span class=\"keyword\">function</span></div><div class=\"line\">console.log(typeof aaa);\t//undefined</div></pre></td></tr></table></figure>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><h4 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>instanceof 方法用来检测变量的数据类型是否为要检测的收据类型，它只有2个可能的返回值：<br>true 或 false，即布尔值。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'abc'</span>;</div><div class=\"line\">var num = 123;</div><div class=\"line\">var s = new String(<span class=\"string\">'123'</span>);</div><div class=\"line\">var n = new Number(123);</div><div class=\"line\">var obj = &#123;&#125;;</div><div class=\"line\">var arr = [];</div><div class=\"line\"></div><div class=\"line\">console.log(str instanceof String);\t//<span class=\"literal\">false</span></div><div class=\"line\">console.log(num instanceof Number);\t//<span class=\"literal\">false</span></div><div class=\"line\">console.log(s instanceof String);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(n instanceof Number);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(obj instanceof Object);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(arr instanceof Array);\t//<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>从上面的代码可以看出，instanceof确实只返回一个布尔值。而且，要注意的是：<br><strong> instanceof只能用来判断对象和函数，不能用来判断字符串和数字等 </strong></p>\n"},{"title":"js闭包","date":"2017-03-07T09:26:10.000Z","_content":"\n本文讲述Javascript的闭包。\n\n## 引言(简单了解js闭包)\n\n在讲述js闭包之前，我们先来说一个简单的例子:\n\n``` bash\nvar a = 1;\nfunction fn(){\n\tvar b = 2;\n\tconsole.log(\"a: \" + a + \", b: \" + b);\n}\nfn();\t//a: 1, b: 2\nconsole.log(\"a: \" + a + \", b: \" + b);\t//a: 1, b: undefined\n```\n\n这个相信大家都可以理解，就是变量的作用域，a为定义的全局变量，b为函数fn内部定义的变量,在函数内部，可以获取到全局变量a的值和函数局部变量b的值。在函数外部，不能获取到局部变量b的值。但是，如果我确实想得到函数fn内部的b元素的值呢？\n\n想一想，这个fn其实是一个方法，既然是个方法，那应该可以给这个方法设置一个返回值吧，那如果将这个函数的返回值设置为b元素，会发生什么情况呢？\n\n``` bash\nfunction fn(){\n\tvar b = 5;\n\treturn b;\n}\nconsole.log(fn());\t//5\n```\n\n实践证明，这样是可以获取到b元素值的。没错，这就是最简单的js闭包。\n\n## 正题(js闭包讲解)\n\n### js闭包概念：\n\n官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n\n是不是有点看不懂？\n\n其实，js闭包就是在外部可以访问函数内部的局部变量、参数或声明的其他内部函数。\n\n可能你会说，那这个算不算闭包呢：\n\n``` bash\nfunction f1(){\n\tvar a = 1;\n\t\n\tf2(a);\n}\n\nfunction f2(m){\n\tconsole.log(m);\n}\n\nf1();\t//1\n```\n\n那么，你觉得下边这个函数和上边的有什么区别呢:\n\n``` bash\nfunction f1(){\n\tvar a = 1;\n\tconsole.log(a);\t\n}\nf1();\t//1\n```\n\n这个函数和上边的函数其实并没有什么区别，完全可以合并为同一个函数。只不过有时候为了实现代码模块化或组件化，于是将通用的方法封装了起来，以便于方法的重用，所以它并不是闭包。\n\n既然我们已经看到了比较简单的js闭包，那么我们再来加一点难度，看一下下面这段代码：\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn this.name;\n\t}\n}\nconsole.log(Comp.getName());\t//小张\n```\n\n这个应该比较容易理解，Comp是一个对象，包含一个name属性和一个名为getName的方法，因为getName方法是属于Comp对象的，所以这个this指向Comp对象。因此调用Comp对象中的getName方法，这时候this.name的值应该是\"小张\"。\n\n再加深一点难度：\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\tvar here = this;\n\t\treturn function(){\n\t\t\treturn here.name;\n\t\t}\n\t}\n}\nconsole.log(Comp.getName()());\t//小张\n```\n\n在这段代码中，定义了here作为getName()方法的局部变量，所以here指的对象并不是window对象，而是Comp对象。但是，由于返回值中有here，所以这个局部变量就一直存在内存中，当调用Comp.getName()()这个方法时，将here从内存中取出来，由于here指的就是Comp对象，所以返回的值就是Comp.name的值。\n\n## 提升(this指向问题)\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn function(){\n\t\t\treturn this.name;\n\t\t}\n\t}\n}\nconsole.log(Comp.getName()());\t//张三\n```\n\n为什么这个函数中的this.name返回的是\"张三\"呢？我们可以先试着运行一下这个\n\n``` bash\nconsole.log(Comp.getName());\t//function (){\treturn this.name;\t}\n```\n\n这段代码输出的是一段字符串，而这段字符串是一个匿名函数，而且此时并没有执行这个方法，仅仅是返回了构成这个方法的字符串而已。然后调用这段字符串构成的方法，也就相当于调用window下的一个匿名函数。那这样说的话，是不是我可以将上边这个函数改成这个样子呢？\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn noNameFun;\n\t}\n}\nvar noNameFun = function(){\n\treturn this.name;\n}\nconsole.log(Comp.getName()());\t//张三\n```\n\n可以看出，这个函数确实输出的是\"张三\",也就是说和上边这个函数是一样的。那我们就明白了，noNameFun()是属于window对象的，那么这个方法的this也属于window对象，所以this.name就代表的是\"张三\"。\n\n## 闭包的优点\n\n闭包的优点有两个：\n1. 可以读取函数内部的变量;\n2. 让这些变量的值始终保持在内存中。\n\n## 补充(js闭包内存问题)\n\n在我们的使用中，很多时候都会用到js闭包的概念，尤其是模块化开发。然而，js闭包虽然好用的，但是任何事物都有它的两面性，变量保持在内存中是优点，但也存在这样一个问题：\n\n由于闭包会是函数中的变量一直存在于内存中，导致内存被占用，而如果这样的变量多了的话，会使内存消耗很大。所以，不能滥用闭包，否则会是网页性能变得很差，而且在IE中，有可能导致内存泄露。\n\n什么是内存被占用，我举个例子来说一下：\n\n``` bash\nfunction fn(){\n\tvar n = 1;\n\tfunction add(){\n\t\tn += 1;\n\t\tconsole.log(n);\n\t}\n\treturn add;\n}\nvar result = fn();\nresult();\t//2\nresult();\t//3\nresult();\t//4\nresult();\t//5\nresult();\t//6\n```\n\n也就是说，这个变量n是一直存在于内存中的，所以每次调用，n就会加1。\n\n## 题外(全局变量和局部变量)\n\n对于全局变量和局部变量，有些新手可能不太明白。\n\n外部声明的变量属于全局变量，方法内部声明的变量属于局部变量。但是如果在方法内部没有用var来声明一个变量，那这个变量应该也是一个全局变量。\n\n``` bash\nvar n = 1;\nfunction fn(){\n\tvar m = 5;\n\tt = 10;\n\tconsole.log(m);\n}\n\nconsole.log(n);\t//5\nconsole.log(m);\t//undefined\nconsole.log(t);\t//undefined\nfn();\t\t\t//5\nconsole.log(m);\t//undefined\nconsole.log(t);\t//10\n```\n\n为什么在执行fn()函数之前打印\"t\"这个全局变量会输出\"undefined\"呢？这个\"t\"到底是不是全局变量？\n\n我们可以想一下，我现在声明了一个函数，但是我只是定义了这个函数，并没有调用它。那么这个函数内部的方法是不会执行的，也就是说，在我调用方法fn()之前，这个\"t\"是并没有被声明的，既然没有被声明，那就肯定会输出\"undefined\"。但是在调用了fn()函数之后，也就执行了函数内部的方法，即：声明了\"t\"变量。之后，就肯定可以获取到\"t\"这个全局变量啦。\n\n对于函数里的方法也是一样的。\n\n``` bash\nfunction fn(){\n\tvar n = 1;\n\tnAdd = function(){\n\t\tn += 1;\n\t}\n\tfunction f(){\n\t\tconsole.log(n);\n\t}\n\treturn f;\n}\n//nAdd();\t//undefined\nvar result = fn();\nresult();\t//1\nnAdd();\nresult();\t//2\nnAdd();\nresult();\t//3\n```\n\n本章节完！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js闭包.md","raw":"---\ntitle: js闭包\ndate: 2017-03-07 17:26:10\ncategories: \"Javascript\"\ntags: \n\t- Javascript\n---\n\n本文讲述Javascript的闭包。\n\n## 引言(简单了解js闭包)\n\n在讲述js闭包之前，我们先来说一个简单的例子:\n\n``` bash\nvar a = 1;\nfunction fn(){\n\tvar b = 2;\n\tconsole.log(\"a: \" + a + \", b: \" + b);\n}\nfn();\t//a: 1, b: 2\nconsole.log(\"a: \" + a + \", b: \" + b);\t//a: 1, b: undefined\n```\n\n这个相信大家都可以理解，就是变量的作用域，a为定义的全局变量，b为函数fn内部定义的变量,在函数内部，可以获取到全局变量a的值和函数局部变量b的值。在函数外部，不能获取到局部变量b的值。但是，如果我确实想得到函数fn内部的b元素的值呢？\n\n想一想，这个fn其实是一个方法，既然是个方法，那应该可以给这个方法设置一个返回值吧，那如果将这个函数的返回值设置为b元素，会发生什么情况呢？\n\n``` bash\nfunction fn(){\n\tvar b = 5;\n\treturn b;\n}\nconsole.log(fn());\t//5\n```\n\n实践证明，这样是可以获取到b元素值的。没错，这就是最简单的js闭包。\n\n## 正题(js闭包讲解)\n\n### js闭包概念：\n\n官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n\n是不是有点看不懂？\n\n其实，js闭包就是在外部可以访问函数内部的局部变量、参数或声明的其他内部函数。\n\n可能你会说，那这个算不算闭包呢：\n\n``` bash\nfunction f1(){\n\tvar a = 1;\n\t\n\tf2(a);\n}\n\nfunction f2(m){\n\tconsole.log(m);\n}\n\nf1();\t//1\n```\n\n那么，你觉得下边这个函数和上边的有什么区别呢:\n\n``` bash\nfunction f1(){\n\tvar a = 1;\n\tconsole.log(a);\t\n}\nf1();\t//1\n```\n\n这个函数和上边的函数其实并没有什么区别，完全可以合并为同一个函数。只不过有时候为了实现代码模块化或组件化，于是将通用的方法封装了起来，以便于方法的重用，所以它并不是闭包。\n\n既然我们已经看到了比较简单的js闭包，那么我们再来加一点难度，看一下下面这段代码：\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn this.name;\n\t}\n}\nconsole.log(Comp.getName());\t//小张\n```\n\n这个应该比较容易理解，Comp是一个对象，包含一个name属性和一个名为getName的方法，因为getName方法是属于Comp对象的，所以这个this指向Comp对象。因此调用Comp对象中的getName方法，这时候this.name的值应该是\"小张\"。\n\n再加深一点难度：\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\tvar here = this;\n\t\treturn function(){\n\t\t\treturn here.name;\n\t\t}\n\t}\n}\nconsole.log(Comp.getName()());\t//小张\n```\n\n在这段代码中，定义了here作为getName()方法的局部变量，所以here指的对象并不是window对象，而是Comp对象。但是，由于返回值中有here，所以这个局部变量就一直存在内存中，当调用Comp.getName()()这个方法时，将here从内存中取出来，由于here指的就是Comp对象，所以返回的值就是Comp.name的值。\n\n## 提升(this指向问题)\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn function(){\n\t\t\treturn this.name;\n\t\t}\n\t}\n}\nconsole.log(Comp.getName()());\t//张三\n```\n\n为什么这个函数中的this.name返回的是\"张三\"呢？我们可以先试着运行一下这个\n\n``` bash\nconsole.log(Comp.getName());\t//function (){\treturn this.name;\t}\n```\n\n这段代码输出的是一段字符串，而这段字符串是一个匿名函数，而且此时并没有执行这个方法，仅仅是返回了构成这个方法的字符串而已。然后调用这段字符串构成的方法，也就相当于调用window下的一个匿名函数。那这样说的话，是不是我可以将上边这个函数改成这个样子呢？\n\n``` bash\nvar name = '张三';\nvar Comp = {\n\tname : '小张',\n\tgetName : function(){\n\t\treturn noNameFun;\n\t}\n}\nvar noNameFun = function(){\n\treturn this.name;\n}\nconsole.log(Comp.getName()());\t//张三\n```\n\n可以看出，这个函数确实输出的是\"张三\",也就是说和上边这个函数是一样的。那我们就明白了，noNameFun()是属于window对象的，那么这个方法的this也属于window对象，所以this.name就代表的是\"张三\"。\n\n## 闭包的优点\n\n闭包的优点有两个：\n1. 可以读取函数内部的变量;\n2. 让这些变量的值始终保持在内存中。\n\n## 补充(js闭包内存问题)\n\n在我们的使用中，很多时候都会用到js闭包的概念，尤其是模块化开发。然而，js闭包虽然好用的，但是任何事物都有它的两面性，变量保持在内存中是优点，但也存在这样一个问题：\n\n由于闭包会是函数中的变量一直存在于内存中，导致内存被占用，而如果这样的变量多了的话，会使内存消耗很大。所以，不能滥用闭包，否则会是网页性能变得很差，而且在IE中，有可能导致内存泄露。\n\n什么是内存被占用，我举个例子来说一下：\n\n``` bash\nfunction fn(){\n\tvar n = 1;\n\tfunction add(){\n\t\tn += 1;\n\t\tconsole.log(n);\n\t}\n\treturn add;\n}\nvar result = fn();\nresult();\t//2\nresult();\t//3\nresult();\t//4\nresult();\t//5\nresult();\t//6\n```\n\n也就是说，这个变量n是一直存在于内存中的，所以每次调用，n就会加1。\n\n## 题外(全局变量和局部变量)\n\n对于全局变量和局部变量，有些新手可能不太明白。\n\n外部声明的变量属于全局变量，方法内部声明的变量属于局部变量。但是如果在方法内部没有用var来声明一个变量，那这个变量应该也是一个全局变量。\n\n``` bash\nvar n = 1;\nfunction fn(){\n\tvar m = 5;\n\tt = 10;\n\tconsole.log(m);\n}\n\nconsole.log(n);\t//5\nconsole.log(m);\t//undefined\nconsole.log(t);\t//undefined\nfn();\t\t\t//5\nconsole.log(m);\t//undefined\nconsole.log(t);\t//10\n```\n\n为什么在执行fn()函数之前打印\"t\"这个全局变量会输出\"undefined\"呢？这个\"t\"到底是不是全局变量？\n\n我们可以想一下，我现在声明了一个函数，但是我只是定义了这个函数，并没有调用它。那么这个函数内部的方法是不会执行的，也就是说，在我调用方法fn()之前，这个\"t\"是并没有被声明的，既然没有被声明，那就肯定会输出\"undefined\"。但是在调用了fn()函数之后，也就执行了函数内部的方法，即：声明了\"t\"变量。之后，就肯定可以获取到\"t\"这个全局变量啦。\n\n对于函数里的方法也是一样的。\n\n``` bash\nfunction fn(){\n\tvar n = 1;\n\tnAdd = function(){\n\t\tn += 1;\n\t}\n\tfunction f(){\n\t\tconsole.log(n);\n\t}\n\treturn f;\n}\n//nAdd();\t//undefined\nvar result = fn();\nresult();\t//1\nnAdd();\nresult();\t//2\nnAdd();\nresult();\t//3\n```\n\n本章节完！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js闭包","published":1,"updated":"2017-05-18T10:04:18.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxzb000l1gwdxygto0p2","content":"<p>本文讲述Javascript的闭包。</p>\n<h2 id=\"引言-简单了解js闭包\"><a href=\"#引言-简单了解js闭包\" class=\"headerlink\" title=\"引言(简单了解js闭包)\"></a>引言(简单了解js闭包)</h2><p>在讲述js闭包之前，我们先来说一个简单的例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 1;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar b = 2;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"a: \"</span> + a + <span class=\"string\">\", b: \"</span> + b);</div><div class=\"line\">&#125;</div><div class=\"line\">fn();\t//a: 1, b: 2</div><div class=\"line\">console.log(<span class=\"string\">\"a: \"</span> + a + <span class=\"string\">\", b: \"</span> + b);\t//a: 1, b: undefined</div></pre></td></tr></table></figure>\n<p>这个相信大家都可以理解，就是变量的作用域，a为定义的全局变量，b为函数fn内部定义的变量,在函数内部，可以获取到全局变量a的值和函数局部变量b的值。在函数外部，不能获取到局部变量b的值。但是，如果我确实想得到函数fn内部的b元素的值呢？</p>\n<p>想一想，这个fn其实是一个方法，既然是个方法，那应该可以给这个方法设置一个返回值吧，那如果将这个函数的返回值设置为b元素，会发生什么情况呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar b = 5;</div><div class=\"line\">\t<span class=\"built_in\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(fn());\t//5</div></pre></td></tr></table></figure>\n<p>实践证明，这样是可以获取到b元素值的。没错，这就是最简单的js闭包。</p>\n<h2 id=\"正题-js闭包讲解\"><a href=\"#正题-js闭包讲解\" class=\"headerlink\" title=\"正题(js闭包讲解)\"></a>正题(js闭包讲解)</h2><h3 id=\"js闭包概念：\"><a href=\"#js闭包概念：\" class=\"headerlink\" title=\"js闭包概念：\"></a>js闭包概念：</h3><p>官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>\n<p>是不是有点看不懂？</p>\n<p>其实，js闭包就是在外部可以访问函数内部的局部变量、参数或声明的其他内部函数。</p>\n<p>可能你会说，那这个算不算闭包呢：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</div><div class=\"line\">\tvar a = 1;</div><div class=\"line\">\t</div><div class=\"line\">\tf2(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> f2(m)&#123;</div><div class=\"line\">\tconsole.log(m);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f1();\t//1</div></pre></td></tr></table></figure>\n<p>那么，你觉得下边这个函数和上边的有什么区别呢:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</div><div class=\"line\">\tvar a = 1;</div><div class=\"line\">\tconsole.log(a);\t</div><div class=\"line\">&#125;</div><div class=\"line\">f1();\t//1</div></pre></td></tr></table></figure>\n<p>这个函数和上边的函数其实并没有什么区别，完全可以合并为同一个函数。只不过有时候为了实现代码模块化或组件化，于是将通用的方法封装了起来，以便于方法的重用，所以它并不是闭包。</p>\n<p>既然我们已经看到了比较简单的js闭包，那么我们再来加一点难度，看一下下面这段代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName());\t//小张</div></pre></td></tr></table></figure>\n<p>这个应该比较容易理解，Comp是一个对象，包含一个name属性和一个名为getName的方法，因为getName方法是属于Comp对象的，所以这个this指向Comp对象。因此调用Comp对象中的getName方法，这时候this.name的值应该是”小张”。</p>\n<p>再加深一点难度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\tvar here = this;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> here.name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//小张</div></pre></td></tr></table></figure>\n<p>在这段代码中，定义了here作为getName()方法的局部变量，所以here指的对象并不是window对象，而是Comp对象。但是，由于返回值中有here，所以这个局部变量就一直存在内存中，当调用Comp.getName()()这个方法时，将here从内存中取出来，由于here指的就是Comp对象，所以返回的值就是Comp.name的值。</p>\n<h2 id=\"提升-this指向问题\"><a href=\"#提升-this指向问题\" class=\"headerlink\" title=\"提升(this指向问题)\"></a>提升(this指向问题)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//张三</div></pre></td></tr></table></figure>\n<p>为什么这个函数中的this.name返回的是”张三”呢？我们可以先试着运行一下这个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(Comp.getName());\t//<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;\t<span class=\"built_in\">return</span> this.name;\t&#125;</div></pre></td></tr></table></figure>\n<p>这段代码输出的是一段字符串，而这段字符串是一个匿名函数，而且此时并没有执行这个方法，仅仅是返回了构成这个方法的字符串而已。然后调用这段字符串构成的方法，也就相当于调用window下的一个匿名函数。那这样说的话，是不是我可以将上边这个函数改成这个样子呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> noNameFun;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var noNameFun = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//张三</div></pre></td></tr></table></figure>\n<p>可以看出，这个函数确实输出的是”张三”,也就是说和上边这个函数是一样的。那我们就明白了，noNameFun()是属于window对象的，那么这个方法的this也属于window对象，所以this.name就代表的是”张三”。</p>\n<h2 id=\"闭包的优点\"><a href=\"#闭包的优点\" class=\"headerlink\" title=\"闭包的优点\"></a>闭包的优点</h2><p>闭包的优点有两个：</p>\n<ol>\n<li>可以读取函数内部的变量;</li>\n<li>让这些变量的值始终保持在内存中。</li>\n</ol>\n<h2 id=\"补充-js闭包内存问题\"><a href=\"#补充-js闭包内存问题\" class=\"headerlink\" title=\"补充(js闭包内存问题)\"></a>补充(js闭包内存问题)</h2><p>在我们的使用中，很多时候都会用到js闭包的概念，尤其是模块化开发。然而，js闭包虽然好用的，但是任何事物都有它的两面性，变量保持在内存中是优点，但也存在这样一个问题：</p>\n<p>由于闭包会是函数中的变量一直存在于内存中，导致内存被占用，而如果这样的变量多了的话，会使内存消耗很大。所以，不能滥用闭包，否则会是网页性能变得很差，而且在IE中，有可能导致内存泄露。</p>\n<p>什么是内存被占用，我举个例子来说一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar n = 1;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</div><div class=\"line\">\t\tn += 1;</div><div class=\"line\">\t\tconsole.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> add;</div><div class=\"line\">&#125;</div><div class=\"line\">var result = fn();</div><div class=\"line\">result();\t//2</div><div class=\"line\">result();\t//3</div><div class=\"line\">result();\t//4</div><div class=\"line\">result();\t//5</div><div class=\"line\">result();\t//6</div></pre></td></tr></table></figure>\n<p>也就是说，这个变量n是一直存在于内存中的，所以每次调用，n就会加1。</p>\n<h2 id=\"题外-全局变量和局部变量\"><a href=\"#题外-全局变量和局部变量\" class=\"headerlink\" title=\"题外(全局变量和局部变量)\"></a>题外(全局变量和局部变量)</h2><p>对于全局变量和局部变量，有些新手可能不太明白。</p>\n<p>外部声明的变量属于全局变量，方法内部声明的变量属于局部变量。但是如果在方法内部没有用var来声明一个变量，那这个变量应该也是一个全局变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 1;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar m = 5;</div><div class=\"line\">\tt = 10;</div><div class=\"line\">\tconsole.log(m);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(n);\t//5</div><div class=\"line\">console.log(m);\t//undefined</div><div class=\"line\">console.log(t);\t//undefined</div><div class=\"line\">fn();\t\t\t//5</div><div class=\"line\">console.log(m);\t//undefined</div><div class=\"line\">console.log(t);\t//10</div></pre></td></tr></table></figure>\n<p>为什么在执行fn()函数之前打印”t”这个全局变量会输出”undefined”呢？这个”t”到底是不是全局变量？</p>\n<p>我们可以想一下，我现在声明了一个函数，但是我只是定义了这个函数，并没有调用它。那么这个函数内部的方法是不会执行的，也就是说，在我调用方法fn()之前，这个”t”是并没有被声明的，既然没有被声明，那就肯定会输出”undefined”。但是在调用了fn()函数之后，也就执行了函数内部的方法，即：声明了”t”变量。之后，就肯定可以获取到”t”这个全局变量啦。</p>\n<p>对于函数里的方法也是一样的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar n = 1;</div><div class=\"line\">\tnAdd = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\tn += 1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\tconsole.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> f;</div><div class=\"line\">&#125;</div><div class=\"line\">//nAdd();\t//undefined</div><div class=\"line\">var result = fn();</div><div class=\"line\">result();\t//1</div><div class=\"line\">nAdd();</div><div class=\"line\">result();\t//2</div><div class=\"line\">nAdd();</div><div class=\"line\">result();\t//3</div></pre></td></tr></table></figure>\n<p>本章节完！</p>\n","excerpt":"","more":"<p>本文讲述Javascript的闭包。</p>\n<h2 id=\"引言-简单了解js闭包\"><a href=\"#引言-简单了解js闭包\" class=\"headerlink\" title=\"引言(简单了解js闭包)\"></a>引言(简单了解js闭包)</h2><p>在讲述js闭包之前，我们先来说一个简单的例子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 1;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar b = 2;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"a: \"</span> + a + <span class=\"string\">\", b: \"</span> + b);</div><div class=\"line\">&#125;</div><div class=\"line\">fn();\t//a: 1, b: 2</div><div class=\"line\">console.log(<span class=\"string\">\"a: \"</span> + a + <span class=\"string\">\", b: \"</span> + b);\t//a: 1, b: undefined</div></pre></td></tr></table></figure>\n<p>这个相信大家都可以理解，就是变量的作用域，a为定义的全局变量，b为函数fn内部定义的变量,在函数内部，可以获取到全局变量a的值和函数局部变量b的值。在函数外部，不能获取到局部变量b的值。但是，如果我确实想得到函数fn内部的b元素的值呢？</p>\n<p>想一想，这个fn其实是一个方法，既然是个方法，那应该可以给这个方法设置一个返回值吧，那如果将这个函数的返回值设置为b元素，会发生什么情况呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar b = 5;</div><div class=\"line\">\t<span class=\"built_in\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(fn());\t//5</div></pre></td></tr></table></figure>\n<p>实践证明，这样是可以获取到b元素值的。没错，这就是最简单的js闭包。</p>\n<h2 id=\"正题-js闭包讲解\"><a href=\"#正题-js闭包讲解\" class=\"headerlink\" title=\"正题(js闭包讲解)\"></a>正题(js闭包讲解)</h2><h3 id=\"js闭包概念：\"><a href=\"#js闭包概念：\" class=\"headerlink\" title=\"js闭包概念：\"></a>js闭包概念：</h3><p>官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>\n<p>是不是有点看不懂？</p>\n<p>其实，js闭包就是在外部可以访问函数内部的局部变量、参数或声明的其他内部函数。</p>\n<p>可能你会说，那这个算不算闭包呢：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</div><div class=\"line\">\tvar a = 1;</div><div class=\"line\">\t</div><div class=\"line\">\tf2(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> f2(m)&#123;</div><div class=\"line\">\tconsole.log(m);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f1();\t//1</div></pre></td></tr></table></figure>\n<p>那么，你觉得下边这个函数和上边的有什么区别呢:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</div><div class=\"line\">\tvar a = 1;</div><div class=\"line\">\tconsole.log(a);\t</div><div class=\"line\">&#125;</div><div class=\"line\">f1();\t//1</div></pre></td></tr></table></figure>\n<p>这个函数和上边的函数其实并没有什么区别，完全可以合并为同一个函数。只不过有时候为了实现代码模块化或组件化，于是将通用的方法封装了起来，以便于方法的重用，所以它并不是闭包。</p>\n<p>既然我们已经看到了比较简单的js闭包，那么我们再来加一点难度，看一下下面这段代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName());\t//小张</div></pre></td></tr></table></figure>\n<p>这个应该比较容易理解，Comp是一个对象，包含一个name属性和一个名为getName的方法，因为getName方法是属于Comp对象的，所以这个this指向Comp对象。因此调用Comp对象中的getName方法，这时候this.name的值应该是”小张”。</p>\n<p>再加深一点难度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\tvar here = this;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> here.name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//小张</div></pre></td></tr></table></figure>\n<p>在这段代码中，定义了here作为getName()方法的局部变量，所以here指的对象并不是window对象，而是Comp对象。但是，由于返回值中有here，所以这个局部变量就一直存在内存中，当调用Comp.getName()()这个方法时，将here从内存中取出来，由于here指的就是Comp对象，所以返回的值就是Comp.name的值。</p>\n<h2 id=\"提升-this指向问题\"><a href=\"#提升-this指向问题\" class=\"headerlink\" title=\"提升(this指向问题)\"></a>提升(this指向问题)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//张三</div></pre></td></tr></table></figure>\n<p>为什么这个函数中的this.name返回的是”张三”呢？我们可以先试着运行一下这个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(Comp.getName());\t//<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;\t<span class=\"built_in\">return</span> this.name;\t&#125;</div></pre></td></tr></table></figure>\n<p>这段代码输出的是一段字符串，而这段字符串是一个匿名函数，而且此时并没有执行这个方法，仅仅是返回了构成这个方法的字符串而已。然后调用这段字符串构成的方法，也就相当于调用window下的一个匿名函数。那这样说的话，是不是我可以将上边这个函数改成这个样子呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = <span class=\"string\">'张三'</span>;</div><div class=\"line\">var Comp = &#123;</div><div class=\"line\">\tname : <span class=\"string\">'小张'</span>,</div><div class=\"line\">\tgetName : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> noNameFun;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var noNameFun = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> this.name;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(Comp.getName()());\t//张三</div></pre></td></tr></table></figure>\n<p>可以看出，这个函数确实输出的是”张三”,也就是说和上边这个函数是一样的。那我们就明白了，noNameFun()是属于window对象的，那么这个方法的this也属于window对象，所以this.name就代表的是”张三”。</p>\n<h2 id=\"闭包的优点\"><a href=\"#闭包的优点\" class=\"headerlink\" title=\"闭包的优点\"></a>闭包的优点</h2><p>闭包的优点有两个：</p>\n<ol>\n<li>可以读取函数内部的变量;</li>\n<li>让这些变量的值始终保持在内存中。</li>\n</ol>\n<h2 id=\"补充-js闭包内存问题\"><a href=\"#补充-js闭包内存问题\" class=\"headerlink\" title=\"补充(js闭包内存问题)\"></a>补充(js闭包内存问题)</h2><p>在我们的使用中，很多时候都会用到js闭包的概念，尤其是模块化开发。然而，js闭包虽然好用的，但是任何事物都有它的两面性，变量保持在内存中是优点，但也存在这样一个问题：</p>\n<p>由于闭包会是函数中的变量一直存在于内存中，导致内存被占用，而如果这样的变量多了的话，会使内存消耗很大。所以，不能滥用闭包，否则会是网页性能变得很差，而且在IE中，有可能导致内存泄露。</p>\n<p>什么是内存被占用，我举个例子来说一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar n = 1;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">add</span></span>()&#123;</div><div class=\"line\">\t\tn += 1;</div><div class=\"line\">\t\tconsole.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> add;</div><div class=\"line\">&#125;</div><div class=\"line\">var result = fn();</div><div class=\"line\">result();\t//2</div><div class=\"line\">result();\t//3</div><div class=\"line\">result();\t//4</div><div class=\"line\">result();\t//5</div><div class=\"line\">result();\t//6</div></pre></td></tr></table></figure>\n<p>也就是说，这个变量n是一直存在于内存中的，所以每次调用，n就会加1。</p>\n<h2 id=\"题外-全局变量和局部变量\"><a href=\"#题外-全局变量和局部变量\" class=\"headerlink\" title=\"题外(全局变量和局部变量)\"></a>题外(全局变量和局部变量)</h2><p>对于全局变量和局部变量，有些新手可能不太明白。</p>\n<p>外部声明的变量属于全局变量，方法内部声明的变量属于局部变量。但是如果在方法内部没有用var来声明一个变量，那这个变量应该也是一个全局变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 1;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar m = 5;</div><div class=\"line\">\tt = 10;</div><div class=\"line\">\tconsole.log(m);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(n);\t//5</div><div class=\"line\">console.log(m);\t//undefined</div><div class=\"line\">console.log(t);\t//undefined</div><div class=\"line\">fn();\t\t\t//5</div><div class=\"line\">console.log(m);\t//undefined</div><div class=\"line\">console.log(t);\t//10</div></pre></td></tr></table></figure>\n<p>为什么在执行fn()函数之前打印”t”这个全局变量会输出”undefined”呢？这个”t”到底是不是全局变量？</p>\n<p>我们可以想一下，我现在声明了一个函数，但是我只是定义了这个函数，并没有调用它。那么这个函数内部的方法是不会执行的，也就是说，在我调用方法fn()之前，这个”t”是并没有被声明的，既然没有被声明，那就肯定会输出”undefined”。但是在调用了fn()函数之后，也就执行了函数内部的方法，即：声明了”t”变量。之后，就肯定可以获取到”t”这个全局变量啦。</p>\n<p>对于函数里的方法也是一样的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</div><div class=\"line\">\tvar n = 1;</div><div class=\"line\">\tnAdd = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t\tn += 1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\tconsole.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> f;</div><div class=\"line\">&#125;</div><div class=\"line\">//nAdd();\t//undefined</div><div class=\"line\">var result = fn();</div><div class=\"line\">result();\t//1</div><div class=\"line\">nAdd();</div><div class=\"line\">result();\t//2</div><div class=\"line\">nAdd();</div><div class=\"line\">result();\t//3</div></pre></td></tr></table></figure>\n<p>本章节完！</p>\n"},{"title":"原生js操作DOM元素","date":"2017-06-05T13:39:09.000Z","_content":"\n本文主要讲述一些原生的js来操作DOM元素的方法。\n\n目前市场上的一些js库很多：jQuery、Angular、prototype、lodash、react、vue等方便了我们应用。但有时候如果开发一些自己的js库，还是要用到原生js。\n\n## 当前元素节点\n\n- obj.getElementById()\n\t返回带有指定 ID 的元素。\n- obj.getElementsByTagName()\n\t返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。\n- obj.etElementsByClassName()\n\t返回包含带有指定类名的所有元素的节点列表。\n- obj.getElementsByName()\n\t方法可返回带有指定名称的对象的集合。\n\n## 元素相关节点\n\n- node.childNodes\n\t只读 childNodes 属性返回节点的子节点集合，以 NodeList 对象。注意他包括文本节点和元素节点(即像换行，空白这些也算 .nodeName 当前元素类型名称|.nodeType 当前元素类型)\n- node.children\n\t只读 children则不包括文本节点，只有元素节点，子节点列表。\n- node.firstChild\n\t只读 node里的第一个节点 （注意，标准下包含文本节点+元素节点  非标准下只含元素节点）推荐使用children[0]\n- node.lastChild\n\t只读 node里的最后一个节点\n- node.nextSibling || node.nextElementSibling\n\t下一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）\n- node.previousSibling || node.previousElementSibling\n\t上一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）\n- node.parentNode\n\tnode的父亲节点，仅有一个 只读 无兼容问题。\n- node.offsetParent\n\t只读 父节点（有定位的父节点，有多个则离他最近的一个）\n\t1.如果没有定位的父节点则博人body。\n\t2.如果他自身是定位则ie7以下为html，其他为body。\n\t3.如果他的父级有一个设置了zoom：1 则表示这个父级\n\n## 创建节点\n\n- document/node.createElement(“标签名”)\n\t创建元素节点。\n- createTextNode(内容)\n\t创建文本节点。\n- node.appendChild(node)\n\t把新的子节点添加到该node节点里面并且是最后面。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- node.insertBefore(newnode必填,existingnode)\n\t在该节点里面指定的子节点前面插入新的子节点。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- node.removeChild(node)\n\t删除该节点里面的node子节点。\n- node.replaceChild(newnode,oldnode)\n\t新替换该节点里面旧(newnode,oldnode)这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- createAttribute()\n\t创建属性节点。\n- element.getAttribute(属性名)\n\t返回指定的属性值。\n- element.setAttribute(属性名，属性值)\n\tsetAttribute() 方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值\n\n## 浏览器宽高\n\n- div容器宽: obj.style.width;\n- div容器高: obj.style.height;\n- 网页可见区域宽: document.body.clientWidth;\n- 网页可见区域高: document.body.clientHeight;\n- 网页可见区域宽: document.body.offsetWidth   (包括边线的宽);\n- 网页可见区域高: document.body.offsetHeight  (包括边线的宽);\n- 网页正文全文宽: document.body.scrollWidth;\n- 网页正文全文高: document.body.scrollHeight;\n- 网页被卷去的高: document.body.scrollTop;\n- 网页被卷去的左: document.body.scrollLeft;\n- 网页正文部分上: window.screenTop;\n- 网页正文部分左: window.screenLeft;\n- 屏幕分辨率的高: window.screen.height;\n- 屏幕分辨率的宽: window.screen.width;\n- 屏幕可用工作区高度：window.screen.availHeight;\n- 屏幕可用工作区宽度：window.screen.availWidth;\n- 滚动条滚动距离:scrollLeft/scrollTop \n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n- 边框的厚度: clientLeft/clientTop\n- 鼠标位置: ev.clientX/ev.clientY\n\n## 基于jQuery一些方法\n\n- 目标选择器距离网页页面顶端的高度\n\tvar test = $(\".test\").offset().top;\n- 浏览器窗口的高度\n\tvar win_h = $(window).height();\n- 滚动条的高度\n\tvar scr_h = $(window).scrollTop();\n- 滚动窗口触发事件函数\n\t``` bash\n\t$(window).scroll(function(){\n\t\t//...\n\t})\n\t```","source":"_posts/原生js操作DOM元素.md","raw":"---\ntitle: 原生js操作DOM元素\ndate: 2017-06-05 21:39:09\ncategories: \"前端开发\"\ntags:\n\t- Javascript\n---\n\n本文主要讲述一些原生的js来操作DOM元素的方法。\n\n目前市场上的一些js库很多：jQuery、Angular、prototype、lodash、react、vue等方便了我们应用。但有时候如果开发一些自己的js库，还是要用到原生js。\n\n## 当前元素节点\n\n- obj.getElementById()\n\t返回带有指定 ID 的元素。\n- obj.getElementsByTagName()\n\t返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。\n- obj.etElementsByClassName()\n\t返回包含带有指定类名的所有元素的节点列表。\n- obj.getElementsByName()\n\t方法可返回带有指定名称的对象的集合。\n\n## 元素相关节点\n\n- node.childNodes\n\t只读 childNodes 属性返回节点的子节点集合，以 NodeList 对象。注意他包括文本节点和元素节点(即像换行，空白这些也算 .nodeName 当前元素类型名称|.nodeType 当前元素类型)\n- node.children\n\t只读 children则不包括文本节点，只有元素节点，子节点列表。\n- node.firstChild\n\t只读 node里的第一个节点 （注意，标准下包含文本节点+元素节点  非标准下只含元素节点）推荐使用children[0]\n- node.lastChild\n\t只读 node里的最后一个节点\n- node.nextSibling || node.nextElementSibling\n\t下一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）\n- node.previousSibling || node.previousElementSibling\n\t上一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）\n- node.parentNode\n\tnode的父亲节点，仅有一个 只读 无兼容问题。\n- node.offsetParent\n\t只读 父节点（有定位的父节点，有多个则离他最近的一个）\n\t1.如果没有定位的父节点则博人body。\n\t2.如果他自身是定位则ie7以下为html，其他为body。\n\t3.如果他的父级有一个设置了zoom：1 则表示这个父级\n\n## 创建节点\n\n- document/node.createElement(“标签名”)\n\t创建元素节点。\n- createTextNode(内容)\n\t创建文本节点。\n- node.appendChild(node)\n\t把新的子节点添加到该node节点里面并且是最后面。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- node.insertBefore(newnode必填,existingnode)\n\t在该节点里面指定的子节点前面插入新的子节点。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- node.removeChild(node)\n\t删除该节点里面的node子节点。\n- node.replaceChild(newnode,oldnode)\n\t新替换该节点里面旧(newnode,oldnode)这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。\n- createAttribute()\n\t创建属性节点。\n- element.getAttribute(属性名)\n\t返回指定的属性值。\n- element.setAttribute(属性名，属性值)\n\tsetAttribute() 方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值\n\n## 浏览器宽高\n\n- div容器宽: obj.style.width;\n- div容器高: obj.style.height;\n- 网页可见区域宽: document.body.clientWidth;\n- 网页可见区域高: document.body.clientHeight;\n- 网页可见区域宽: document.body.offsetWidth   (包括边线的宽);\n- 网页可见区域高: document.body.offsetHeight  (包括边线的宽);\n- 网页正文全文宽: document.body.scrollWidth;\n- 网页正文全文高: document.body.scrollHeight;\n- 网页被卷去的高: document.body.scrollTop;\n- 网页被卷去的左: document.body.scrollLeft;\n- 网页正文部分上: window.screenTop;\n- 网页正文部分左: window.screenLeft;\n- 屏幕分辨率的高: window.screen.height;\n- 屏幕分辨率的宽: window.screen.width;\n- 屏幕可用工作区高度：window.screen.availHeight;\n- 屏幕可用工作区宽度：window.screen.availWidth;\n- 滚动条滚动距离:scrollLeft/scrollTop \n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n- 边框的厚度: clientLeft/clientTop\n- 鼠标位置: ev.clientX/ev.clientY\n\n## 基于jQuery一些方法\n\n- 目标选择器距离网页页面顶端的高度\n\tvar test = $(\".test\").offset().top;\n- 浏览器窗口的高度\n\tvar win_h = $(window).height();\n- 滚动条的高度\n\tvar scr_h = $(window).scrollTop();\n- 滚动窗口触发事件函数\n\t``` bash\n\t$(window).scroll(function(){\n\t\t//...\n\t})\n\t```","slug":"原生js操作DOM元素","published":1,"updated":"2017-06-06T04:34:09.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxzf000n1gwdaugqlc0q","content":"<p>本文主要讲述一些原生的js来操作DOM元素的方法。</p>\n<p>目前市场上的一些js库很多：jQuery、Angular、prototype、lodash、react、vue等方便了我们应用。但有时候如果开发一些自己的js库，还是要用到原生js。</p>\n<h2 id=\"当前元素节点\"><a href=\"#当前元素节点\" class=\"headerlink\" title=\"当前元素节点\"></a>当前元素节点</h2><ul>\n<li>obj.getElementById()<br>  返回带有指定 ID 的元素。</li>\n<li>obj.getElementsByTagName()<br>  返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。</li>\n<li>obj.etElementsByClassName()<br>  返回包含带有指定类名的所有元素的节点列表。</li>\n<li>obj.getElementsByName()<br>  方法可返回带有指定名称的对象的集合。</li>\n</ul>\n<h2 id=\"元素相关节点\"><a href=\"#元素相关节点\" class=\"headerlink\" title=\"元素相关节点\"></a>元素相关节点</h2><ul>\n<li>node.childNodes<br>  只读 childNodes 属性返回节点的子节点集合，以 NodeList 对象。注意他包括文本节点和元素节点(即像换行，空白这些也算 .nodeName 当前元素类型名称|.nodeType 当前元素类型)</li>\n<li>node.children<br>  只读 children则不包括文本节点，只有元素节点，子节点列表。</li>\n<li>node.firstChild<br>  只读 node里的第一个节点 （注意，标准下包含文本节点+元素节点  非标准下只含元素节点）推荐使用children[0]</li>\n<li>node.lastChild<br>  只读 node里的最后一个节点</li>\n<li>node.nextSibling || node.nextElementSibling<br>  下一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）</li>\n<li>node.previousSibling || node.previousElementSibling<br>  上一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）</li>\n<li>node.parentNode<br>  node的父亲节点，仅有一个 只读 无兼容问题。</li>\n<li>node.offsetParent<br>  只读 父节点（有定位的父节点，有多个则离他最近的一个）<br>  1.如果没有定位的父节点则博人body。<br>  2.如果他自身是定位则ie7以下为html，其他为body。<br>  3.如果他的父级有一个设置了zoom：1 则表示这个父级</li>\n</ul>\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><ul>\n<li>document/node.createElement(“标签名”)<br>  创建元素节点。</li>\n<li>createTextNode(内容)<br>  创建文本节点。</li>\n<li>node.appendChild(node)<br>  把新的子节点添加到该node节点里面并且是最后面。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>node.insertBefore(newnode必填,existingnode)<br>  在该节点里面指定的子节点前面插入新的子节点。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>node.removeChild(node)<br>  删除该节点里面的node子节点。</li>\n<li>node.replaceChild(newnode,oldnode)<br>  新替换该节点里面旧(newnode,oldnode)这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>createAttribute()<br>  创建属性节点。</li>\n<li>element.getAttribute(属性名)<br>  返回指定的属性值。</li>\n<li>element.setAttribute(属性名，属性值)<br>  setAttribute() 方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值</li>\n</ul>\n<h2 id=\"浏览器宽高\"><a href=\"#浏览器宽高\" class=\"headerlink\" title=\"浏览器宽高\"></a>浏览器宽高</h2><ul>\n<li>div容器宽: obj.style.width;</li>\n<li>div容器高: obj.style.height;</li>\n<li>网页可见区域宽: document.body.clientWidth;</li>\n<li>网页可见区域高: document.body.clientHeight;</li>\n<li>网页可见区域宽: document.body.offsetWidth   (包括边线的宽);</li>\n<li>网页可见区域高: document.body.offsetHeight  (包括边线的宽);</li>\n<li>网页正文全文宽: document.body.scrollWidth;</li>\n<li>网页正文全文高: document.body.scrollHeight;</li>\n<li>网页被卷去的高: document.body.scrollTop;</li>\n<li>网页被卷去的左: document.body.scrollLeft;</li>\n<li>网页正文部分上: window.screenTop;</li>\n<li>网页正文部分左: window.screenLeft;</li>\n<li>屏幕分辨率的高: window.screen.height;</li>\n<li>屏幕分辨率的宽: window.screen.width;</li>\n<li>屏幕可用工作区高度：window.screen.availHeight;</li>\n<li>屏幕可用工作区宽度：window.screen.availWidth;</li>\n<li>滚动条滚动距离:scrollLeft/scrollTop<br>  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;</li>\n<li>边框的厚度: clientLeft/clientTop</li>\n<li>鼠标位置: ev.clientX/ev.clientY</li>\n</ul>\n<h2 id=\"基于jQuery一些方法\"><a href=\"#基于jQuery一些方法\" class=\"headerlink\" title=\"基于jQuery一些方法\"></a>基于jQuery一些方法</h2><ul>\n<li>目标选择器距离网页页面顶端的高度<br>  var test = $(“.test”).offset().top;</li>\n<li>浏览器窗口的高度<br>  var win_h = $(window).height();</li>\n<li>滚动条的高度<br>  var scr_h = $(window).scrollTop();</li>\n<li>滚动窗口触发事件函数  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(window).scroll(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t//...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>本文主要讲述一些原生的js来操作DOM元素的方法。</p>\n<p>目前市场上的一些js库很多：jQuery、Angular、prototype、lodash、react、vue等方便了我们应用。但有时候如果开发一些自己的js库，还是要用到原生js。</p>\n<h2 id=\"当前元素节点\"><a href=\"#当前元素节点\" class=\"headerlink\" title=\"当前元素节点\"></a>当前元素节点</h2><ul>\n<li>obj.getElementById()<br>  返回带有指定 ID 的元素。</li>\n<li>obj.getElementsByTagName()<br>  返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。</li>\n<li>obj.etElementsByClassName()<br>  返回包含带有指定类名的所有元素的节点列表。</li>\n<li>obj.getElementsByName()<br>  方法可返回带有指定名称的对象的集合。</li>\n</ul>\n<h2 id=\"元素相关节点\"><a href=\"#元素相关节点\" class=\"headerlink\" title=\"元素相关节点\"></a>元素相关节点</h2><ul>\n<li>node.childNodes<br>  只读 childNodes 属性返回节点的子节点集合，以 NodeList 对象。注意他包括文本节点和元素节点(即像换行，空白这些也算 .nodeName 当前元素类型名称|.nodeType 当前元素类型)</li>\n<li>node.children<br>  只读 children则不包括文本节点，只有元素节点，子节点列表。</li>\n<li>node.firstChild<br>  只读 node里的第一个节点 （注意，标准下包含文本节点+元素节点  非标准下只含元素节点）推荐使用children[0]</li>\n<li>node.lastChild<br>  只读 node里的最后一个节点</li>\n<li>node.nextSibling || node.nextElementSibling<br>  下一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）</li>\n<li>node.previousSibling || node.previousElementSibling<br>  上一个兄弟节点 （注意，这个包含文本节点，前者标准和非标，后者ie下没有）</li>\n<li>node.parentNode<br>  node的父亲节点，仅有一个 只读 无兼容问题。</li>\n<li>node.offsetParent<br>  只读 父节点（有定位的父节点，有多个则离他最近的一个）<br>  1.如果没有定位的父节点则博人body。<br>  2.如果他自身是定位则ie7以下为html，其他为body。<br>  3.如果他的父级有一个设置了zoom：1 则表示这个父级</li>\n</ul>\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><ul>\n<li>document/node.createElement(“标签名”)<br>  创建元素节点。</li>\n<li>createTextNode(内容)<br>  创建文本节点。</li>\n<li>node.appendChild(node)<br>  把新的子节点添加到该node节点里面并且是最后面。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>node.insertBefore(newnode必填,existingnode)<br>  在该节点里面指定的子节点前面插入新的子节点。这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>node.removeChild(node)<br>  删除该节点里面的node子节点。</li>\n<li>node.replaceChild(newnode,oldnode)<br>  新替换该节点里面旧(newnode,oldnode)这个新节点可以是文档中某个已存在的节点，也可以是创建新的节点。</li>\n<li>createAttribute()<br>  创建属性节点。</li>\n<li>element.getAttribute(属性名)<br>  返回指定的属性值。</li>\n<li>element.setAttribute(属性名，属性值)<br>  setAttribute() 方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值</li>\n</ul>\n<h2 id=\"浏览器宽高\"><a href=\"#浏览器宽高\" class=\"headerlink\" title=\"浏览器宽高\"></a>浏览器宽高</h2><ul>\n<li>div容器宽: obj.style.width;</li>\n<li>div容器高: obj.style.height;</li>\n<li>网页可见区域宽: document.body.clientWidth;</li>\n<li>网页可见区域高: document.body.clientHeight;</li>\n<li>网页可见区域宽: document.body.offsetWidth   (包括边线的宽);</li>\n<li>网页可见区域高: document.body.offsetHeight  (包括边线的宽);</li>\n<li>网页正文全文宽: document.body.scrollWidth;</li>\n<li>网页正文全文高: document.body.scrollHeight;</li>\n<li>网页被卷去的高: document.body.scrollTop;</li>\n<li>网页被卷去的左: document.body.scrollLeft;</li>\n<li>网页正文部分上: window.screenTop;</li>\n<li>网页正文部分左: window.screenLeft;</li>\n<li>屏幕分辨率的高: window.screen.height;</li>\n<li>屏幕分辨率的宽: window.screen.width;</li>\n<li>屏幕可用工作区高度：window.screen.availHeight;</li>\n<li>屏幕可用工作区宽度：window.screen.availWidth;</li>\n<li>滚动条滚动距离:scrollLeft/scrollTop<br>  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;</li>\n<li>边框的厚度: clientLeft/clientTop</li>\n<li>鼠标位置: ev.clientX/ev.clientY</li>\n</ul>\n<h2 id=\"基于jQuery一些方法\"><a href=\"#基于jQuery一些方法\" class=\"headerlink\" title=\"基于jQuery一些方法\"></a>基于jQuery一些方法</h2><ul>\n<li>目标选择器距离网页页面顶端的高度<br>  var test = $(“.test”).offset().top;</li>\n<li>浏览器窗口的高度<br>  var win_h = $(window).height();</li>\n<li>滚动条的高度<br>  var scr_h = $(window).scrollTop();</li>\n<li>滚动窗口触发事件函数  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(window).scroll(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">\t//...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"常见前端知识点","date":"2017-05-08T02:57:32.000Z","_content":"\n本文讲述了部分前端面试经常遇到的问题。\n\n## HTML和CSS\n\n### 对WEB标准以及W3C的理解\n\n1.写代码的时候注意\n\n- 标签闭合\n- 标签小写\n- 不能随意嵌套\n\n2.提高搜索引擎搜到几率\n\nmate中的name变量(其中keywords和description尤其重要)\n\n``` bash\nMeta name=\"Keywords\" Lang=\"EN\" Content=\"vacation,greece,sunshine\"\nMeta name=\"Description\" Content=\"你网页的简述\"\nMeta name=\"Robots\" Content=\"All|None|Index|Noindex|Follow|Nofollow\" \n  [all：文件将被检索，且页面上的链接可以被查询； \n  none：文件将不被检索，且页面上的链接不可以被查询；(和 \"noindex, no follow\" 起相同作用) \n  index：文件将被检索；（让robot/spider登录） \n  follow：页面上的链接可以被查询； \n  noindex：文件将不被检索，但页面上的链接可以被查询；(不让robot/spider登录) \n  nofollow：文件将不被检索，页面上的链接可以被查询。(不让robot/spider顺着此页的连接往下探找)]  \nMeta name=\"Author\" Content=\"张三，abc@sina.com\"\nMeta name=\"Copyright\" Content=\"本页版权归Zerospace所有。All Rights Reserved\"\nMeta name=\"Generator\" Content=\"PCDATA|FrontPage|\"\nMETA name=\"revisit-after\" CONTENT=\"7 days\"\n```\n\n3.提高网页加载速度\n\n- 把js和css写到外部文档、实现结构行为表现的分离。\n- 去掉不必要的空格和注释等。\n- 尽量不使用table布局，尽量使用不嵌套的table布局。\n- 指定图像和table的大小。\n- 尽量不要使用图像来代替文本(例如在导航栏)。\n- 延迟js脚本加载，将脚本放在页面底部。\n- 尽量使用png格式的图像.\n\n### XHTML和HTML的区别\n\nHTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言。\n\n最主要的不同：\n- XHTML元素必须被正确地嵌套。\n\t标签由外到内，一层层包覆着，所以假设你先写div后写h1，结尾就要先写h1后写div。只要记住一个原则“先进后出”，先弹出的标签要后结尾。\n- XHTML元素必须被关闭。\n\t当出现一个标签时，必须要有对应的结束标签，缺一不可，就像在任何程序语言中的括号一样。对于空标签，也必须使用结束标签，或者其开始标签必须使用\"/>\"结尾。\n- 元素必须用小写字母。\n- XHTML文档必须拥有根元素。\n\t所有的 XHTML 元素必须被嵌套于&lt;html&gt; 根元素中。其余所有的元素均可有子元素。子元素必须是成对的且被嵌套在其父元素之中。\n\n### 严格模式与混杂模式\n\n1.Doctype的作用\n\n<!DOCTYPE>声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。<!DOCTYPE>声明必须在HTML文档的第一行，这并不是一个HTML标签。\n\n2.严格模式与混杂模式的来源\n\n当年Netscape4（网景公司早期的浏览器）和IE4（微软公司早期的浏览器）实现CSS机制时，并没有遵循W3C提出的标准。Netscape4 提供了糟糕的支持，而IE4 虽然接近标准，但依旧未能完全正确的支持标准。尽管IE 5 修复了IE4 许多的问题，但是依然延续CSS实现中的其它故障（主要是盒模型问题）。\n\n为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用css，因此大部分网站的css实现并不符合W3C规范的标准。\n\n然而随着标准一致性越来越重要，浏览器开发商不得不面临一个艰难的抉择：逐渐遵循W3C的标准是前进的方向。但是改变现有的 css，完全去遵循标准，会使许多旧网站或多或少受到破坏，如果浏览器突然以正确的方式解析现存的css，陈旧的网站的显示必然会受到影响。所以，所有的浏览器都需要提供两种模式：混杂模式服务于旧式规则，而严格模式服务于标准规则。\n\n3.概念\n\n严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。\n\n混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。\n\n4.区分\n\n浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。\n\n- 如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） \n- 包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） \n- DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）\n- HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）\n\n严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。\n\n5.两种模式不同点\n\n- 盒模型的高宽包含内边距padding和边框border\n\t在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。\n- 可以设置行内元素的高宽\n\t在严格模式下，给span等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。\n- 可设置百分比的高度\n\t在严格模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。\n- 用margin:0 auto设置水平居中在IE下会失效\n\t使用margin:0 auto在严格模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:body{text-align:center};#content{text-align:left}\n- quirk模式下设置图片的padding会失效\n- quirk模式下Table中的字体属性不能继承上层的设置\n- quirk模式下white-space:pre会失效\n\n6.常用的具体声明\n\n- HTML5(一种)：\n\t``` bash\n\t<!DOCTYPE html>\n\t```\n- HTML 4.01(三种)\n\t严格模式包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；过渡模式包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；框架模式等同于过渡模式，但允许框架集内容。\n\t``` bash\n\tHTML 4.01 Strict ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\tHTML 4.01 Transitional ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"  \"http://www.w3.org/TR/html4/loose.dtd\">\n\tHTML 4.01 Frameset ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"  \"http://www.w3.org/TR/html4/frameset.dtd\">\n\t```\n- XHTML 1.0(四种)\n\t前三种模式同上，XHML 必须以格式正确的 XML 来编写标记。\n\t``` bash\n\tXHTML 1.0 Strict ：\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\tXHTML 1.0 Transitional ：\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \" http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\tXHTML 1.0 Frameset： \n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n\tXHTML 1.1 的 DTD 等同于 XHTML 1.0 Strict，但允许添加模型。\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\t```\n### 行内元素与块级元素\n\n1.区别\n\n- 默认情况下，多个行内元素会在同一行，水平排列。块级元素每个元素独占一行，多个块级元素垂直方向排列。\n- 块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。\n- 行内元素与块级元素属性的不同，主要是盒模型属性上。行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效\n\n2.示例\n\n行内元素：&lt;span&gt; &lt;select&gt; &lt;a&gt; &lt;img&gt; &lt;label&gt; &lt;textarea&gt;等。\n\n块级元素：&lt;div&gt; &lt;h1&gt; &lt;li&gt; &lt;p&gt; &lt;table&gt; &lt;fieldset&gt; &lt;caption&gt;等。\n\n3.相互转换\n\n行内元素转块级元素：定义该元素的css样式display:block;\n块级元素转行内元素：定义该元素的css样式display:inline;\n\n### CSS盒模型\n\nCSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"400\" height=\"260\"><path d=\"M0,0 L350,0 L350,250 L0,250 L0,0\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:2\" /><path d=\"M30,30 L320,30 L320,210 L30,210 L30,30\" style=\"fill:#0f0;stroke:black;stroke-width:1\" /><path d=\"M60,60 L290,60 L290,180 L60,180 L60,60\" style=\"fill:#fff;stroke:black;stroke-width:1\" /><path d=\"M90,90 L260,90 L260,150 L90,150 L90,90\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:4\" /><text x=\"145\" y=\"20\" textLength=\"60\">margin</text><text x=\"145\" y=\"50\" textLength=\"60\">border</text><text x=\"145\" y=\"80\" textLength=\"60\">padding</text><text x=\"145\" y=\"110\" textLength=\"60\">content</text></svg>\n\n1.说明\n\n- Margin(外边距) - 盒子与其他元素之间的边距。\n- Border(边框) - 盒子的边框宽度。\n- Padding(内边距) - 盒子内边距，即边框与文字的间距。\n- Content(内容) - 盒子的内容，显示文本和图像。\n\n2.元素的宽度和高度\n\n当指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。\n\n最终元素的总宽度计算公式是这样的：\n\n** 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 **\n\n元素的总高度最终计算公式是这样的：\n\n** 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距 **\n\n3.浏览器的兼容性问题\n\n一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。\n\n虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。\n\nIE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。\n\n解决IE8及更早版本不兼容问题可以在HTML页面声明 <!DOCTYPE html>即可。\n\n### CSS引入方式及link和@import区别\n\n引入css共有四种方式：内联 内嵌 外链 导入。\n\n1.内联\n\n内联方式是指直接在标签元素的style属性中添加CSS样式。\n\n示例：\n\n``` bash\n<div style=\"font-size: 20px\"></div>\n```\n\n这通常是个很不好的书写方式，它只能改变当前标签的样式，如果希望多个div 拥有相同的样式，你不得不重复地为每个div添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。\n\n2.嵌入\n\n嵌入方式是指在页面head中的style标签下书写CSS代码。\n\n示例：\n\n``` bash\n<head>\n\t<style>\n\t\t.content {\n\t\t\tbackground: red;\n\t\t}\n\t</style>\n</head>\n```\n\n嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。\n\n3.链接\n\n链接方式是指在页面head中引入外部的CSS文件。\n\n示例：\n\n``` bash\n<head>\n\t<link rel=\"stylesheet\" href=\"style.css\" />\n</head>\n```\n\n这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。\n\n4.导入\n\n导入方式指的是使用 CSS 规则引入外部 CSS 文件。\n\n示例：\n\n``` bash\n<style>\n\t@import url(style.css);\n</style>\n```\n\n5.link和@import的区别\n\n- link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n\n- link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n\n- link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n\n- link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n### CSS选择器及优先级\n\n1.CSS选择器\nCSS选择器基本可以分为通配选择器，标签选择器，类选择器，ID选择器，简单属性选择，具体属性选择，根据部分属性值选择，特定属性选择，从结构上来分还有后代选择器，子元素选择器，相邻兄弟选择器以及伪类。\n\n- 包含选择符（又称后代选择符） E1 E2{}\n\n- 子对象选择符 E1>E2{}\n\n- ID选择符 #ID{}\n\n- 类选择符 E.className{}\n\n- 选择符分组 E1,E2,E3{}\n\n2.CSS属性继承\n\nCSS属性继承即父元素定义的CSS属性，子元素也默认使用了该属性。\n\n可以继承的有 font-size font-family color等\n\n不可以继承的有 border padding margin background-color width height等\n\n3.CSS优先级\n\n- 相同权值情况下，CSS样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：\n\n优先级为：!important > id > class > tag\n\n- 权值不同时，浏览器是根据权值来判断使用哪种css样式的，哪种样式权值高就使用哪种样式。\n\n标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。\n\n- !important的优先级比内联样式优先级高。\n\n### 前端页面结构\n\n1.结构层(HTML)\n\n对网页内容做出了描述。\n\n2.表现层(CSS)\n\n对网页内容的样式进行渲染。\n\n3.行为层(Javascript)\n\n对网页的各种交互行为进行定义。\n\n### css的基本语句构成\n\n``` bash\n自定义样式名称 {\n\t属性1:值1;\n\t属性2:值2;\n}\n```\n\n### 常见浏览器及内核\n\n- IE浏览器(Ie内核、Trident内核)\n- Firefox浏览器(Gecko)\n- 谷歌浏览器(webkit)\n- opear浏览器(Presto)\n- Safari浏览器(webkit)\n\n### 几种IE6的BUG及解决方法\n\n- IE6怪异解析之padding与border算入宽高\n\t原因：未加文档声明造成非盒模型解析\n\t解决方法：加入文档声明<!doctype html>\n\n- IE6在块元素、左右浮动、设定marin时造成margin双倍(双边距)\n\t解决方法：display:inline\n\n- 内部盒模型超出父级时，父级被撑大\n\t解决方法：父标签使用overflow:hidden\n\n- line-height默认行高bug\n\t解决方法：line-height设值\n\n- 行标签之间会有一小段空白\n\t解决方法：float或结构并排(可读性差，不建议)\n\n- 标签高度无法小于19px\n\t解决方法：overflow: hidden;\n\n- 左浮元素margin-bottom失效\n\t解决方法：\n\t1.显示设置高度\n\t2.父标签设置_padding-bottom代替子标签的margin-bottom\n\t3.再放个标签让父标签浮动，子标签margin-bottom，即(margin-bottom与float不同时作用于一个标签)\n\n- img于块元素中，底边多出空白\n\t解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;\n\n- li之间会有间距\n\t解决方法：float: left;\n\n- 块元素中有文字及右浮动的行元素，行元素换行\n\t解决方法：将行元素置于块元素内的文字前\n\n- position下的left，bottom错位\n\t解决方法：为父级(relative层)设置宽高或添加*zoom:1\n\n- 子级中有设置position，则父级overflow失效\n\t解决方法：为父级设置position:relative\n\n### title与alt的区别\n\nAlt：当图片不显示时，显示alt中的内容。\n\nTitle：为元素提供信息，鼠标悬停在该元素时，等待1s左右，显示title中的内容。\n\n### css中的reset\n\n1.常用的CSS reset\n\n``` bash\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, \nh4, h5, h6, p, blockquote, pre, a, abbr, acronym, \naddress, big, cite, code, del, dfn, em, font, img, ins, \nkbd, q, s, samp, small, strike, strong, sub, sup, tt, \nvar, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, \ntable, caption, tbody, tfoot, thead, tr, th, td { \n  margin: 0; \n  padding: 0; \n  border: 0; \n  outline: 0; \n  font-weight: inherit; \n  font-style: inherit; \n  font-size: 100%; \n  font-family: inherit; \n  vertical-align: baseline; \n} \n:focus {\n  outline: 0;\n} \na, a:link, a:visited, a:hover, a:active{\n  text-decoration:none\n} \ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n} \nth, td {\n  text-align: left;\n  font-weight: normal;\n} \nimg, iframe {\n  border: none;\n  text-decoration:none;\n} \nol, ul {\n  list-style: none;\n} \ninput, textarea, select, button {\n  font-size: 100%;\n  font-family: inherit;\n} \nselect {\n  margin: inherit;\n} \nhr {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  color: #000;\n  background-color: #000;\n  height: 1px;\n}\n```\n\n2.CSS reset作用\n\n在 HTML标签在浏览器里有默认的样式，不同浏览器的默认样式之间也会有差别。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最简单的做法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。\n\n### CSS sprites\n\n1.CSS Sprites简介\n\n客户端每显示一张图片都会向服务器发送请求，而图片越多请求次数越多，造成延迟的可能性也就越大，给服务器造成的压力也很大，所以通过CSS Sprites技术将多张小图片整合为一张图片，减少对服务器的压力。\n\n2.CSS Sprites原理\n\nCSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。\n\n3.优缺点\n\n** 优点 **\n\n- 利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；\n\n- CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n- 解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。\n\n- 更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便s。\n\n** 缺点 **\n\n- 在图片合并的时候，要把多张图片有序的合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景；这些还好，最痛苦的是在宽屏，高分辨率的屏幕下的自适应页面，你的图片如果不够宽，很容易出现背景断裂；\n\n- CSS Sprites在开发的时候比较麻烦，要通过photoshop或其他工具测量计算每一个背景单元的精确位置，非常繁琐。\n\n- CSS Sprites在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片，无需改的地方最好不要动，这样避免改动更多的css，如果在原来的地方放不下，又只能往下加图片，这样图片的字节就增加了，还要改动css。\n\n### 对网站优化的解决方案\n\n- 尽可能减少http请求次数，将css, js, 图片各自合并\n- 使用CDN托管，降低通信距离\n- 添加Expire/Cache-Control头，提供缓存\n- 启用Gzip压缩文件\n- 将css放在页面最上面\n- 将script放在页面最下面\n- 避免在css中使用表达式\n- 将css, js都放在外部文件中\n- 减少DNS查询\n- 最小化css, js，减小文件体积\n- 避免重定向\n- 移除重复脚本\n- 配置实体标签ETag\n- 使用AJAX缓存，让网站内容分批加载，局部更新\n\n### HTML语义化\n\n1.什么是HTML语义化\n\n根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n\n2.为什么要语义化？\n\n- 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；\n- 用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；\n- 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；\n- 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；\n- 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。\n\n3.写HTML代码时应注意什么\n\n- 尽可能少的使用无语义的标签div和span；\n- 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n- 不要使用纯样式标签，如：b、font、u等，改用css设置。\n- 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n- 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n- 表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n- 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。\n\n### 清除浮动\n\n浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。\n而且同样的代码，在各种浏览器中显示效果也有可能不相同，这样让清除浮动更难了。\n\n- 父级div定义height\n- 结尾处加空div标签clear:both\n- 父级div定义伪类:after和zoom\n- 父级div定义overflow:hidden\n- 父级div定义overflow:auto\n- 父级div也一起浮动\n- 父级div定义display:table\n- 结尾处加br标签clear:both\n\n## Javascript\n\n### Javascript数据类型\n\n1.Javascript共有7种数据类型\n\n基本数据类型：Boolean、Number和String。\n\n复杂数据类型：object。\n\n特殊数据类型：Undefined、Null。\n\n2.typeof函数可以返回6种数据类型\n\nstring、number、object、boolean、undefined、function。\n\n可以点击[链接](https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#typeof和instanceof)查看详情\n\n### 显式类型转换与隐式类型转换\n\nJavascript属于弱类型语言，声明变量不需要指定类型，对变量赋值也不需要类型检查，但是在有的情况下需要特别转换变量的类型。\n\n1.显式类型转换\n\n如下函数属于显式类型转换函数：\n\n- toString() 转换为字符串\n- parseInt() 转换为数字\n- Number()\n- Boolean()\n- 等\n\n2.隐式类型转换\n\n如下函数属于显式类型转换函数：\n\n- '+'加法运算符\n- ==\n\n有的人可能看不太懂为什么 \"+\" 和 \"==\" 也是隐式类型转换，我举一个例子：\n\n``` bash\nvar m = 5 + true;\nconsole.log(m);\t//6\n\nconsole.log(1 == true);\t// true\n```\n\n也就是说，\"+\"运算符将true转换成了number类型的1，所以可以和5相加，得到结果6。而\"==\"运算符把true转换成了1，然后来比较，即: 1 == 1 ,所以为true。\n\n### split(),join(),reverse()函数\n\n``` bash\nvar a = new Array();\na[0] = \"HTML\";\na[1] = \"CSS\";\na[2] = \"JavaScript\";\nconsole.log(a);\t// [\"HTML\", \"CSS\", \"JavaScript\"]\nconsole.log(a.join());\t// HTML,CSS,JavaScript\nconsole.log(a.reverse());\t// [\"JavaScript\", \"CSS\", \"HTML\"]\nvar b = 'hello JavaScript';\nconsole.log(b.split(\"\"));\t// [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"]\nconsole.log(b.split(\" \"));\t// [\"hello\", \"JavaScript\"]\n```\n\n由实例可以看出：\n- split函数用来将字符串分割为数组\n- join函数可以将数组中的所有元素拼接为一个字符串\n- reverse函数用来将原数组中元素的顺序颠倒。\n\n### 数组方法pop,push,unshift,shift\n\n- push()方法\n\n用于向数组末尾添加元素,并返回新数组的长度\n\n``` bash\nvar a = ['h','e','l','l'];\nvar m = a.push('o');\nconsole.log(m);\t// 5\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n- pop()方法\n\n删除数组最后一个元素,并返回删除的元素。\n\n``` bash\nvar a = ['h','e','l','l','o'];\nvar m = a.pop();\nconsole.log(m);\t// o\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\"]\n```\n\n- unshift()方法\n\n用于向数组头部添加元素，并返回新数组的长度。\n\n``` bash\nvar a = ['e','l','l','o'];\nvar m = a.unshift('h');\nconsole.log(m);\t// 5\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n- shift()方法\n\n删除数组中的第一个元素，并返回删除的第一个元素的值。\n\n``` bash\nvar a = ['h','e','l','l','o'];\nvar m = a.shift();\nconsole.log(m);\t// h\nconsole.log(a);\t// [\"e\", \"l\", \"l\", \"o\"]\n```\n\n### 事件绑定和普通事件\n\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<button id=\"btn\">点击按钮</button>\n\t<script type=\"text/javascript\">\n\t\tvar btn = document.getElementById(\"btn\");\n\t\tbtn.onclick = function() {\n\t\t\tconsole.log(\"普通事件1\");\n\t\t}\n\t\tbtn.onclick = function() {\n\t\t\tconsole.log(\"普通事件2\");\n\t\t}\n\t\tbtn.addEventListener(\"click\",function() {\n\t\t\tconsole.log(\"绑定事件1\");\n\t\t},false);\n\t\tbtn.addEventListener(\"click\",function() {\n\t\t\tconsole.log(\"绑定事件2\");\n\t\t},false);\n\t</script>\n</body>\n</html>\n```\n\n上述代码输出为：\n\n``` bash\n普通2\n绑定1\n绑定2\n```\n\n由此可以得出结论：\n\n普通事件中的onclick只支持单个事件，之前的事件会被之后的onclick事件覆盖，而事件绑定中的addEventListener可以添加多个事件，之前的事件不会被覆盖。\n\n### IE和DOM事件流的区别\n\n1.参数的差别\n\nattachEvent()的第一个参数比addEventListener()的事件名多一个\"on\"，且没有第三个参数，因为IE事件模型只支持冒泡事件流;\n\n2.事件处理函数作用域的区别\n\nIE中事件处理程序处于全局作用域，其内的this会指向window;\n\n而用DOM（0或2）级事件的事件处理程序的作用域是元素作用域，其内的this指向其所属的元素.\n\n例: \ndocument.addEventListener(\"click\", function(){ \n  if(this == document){\n    alert(\"此时this指向document\");\n  }\n}, false);\n\n3.事件对象event的属性方法的差别\n\n|IE|DOM|\n|:--|:--|\n|cancelBubble = true|stopPropagation() //停止冒泡|\n|returnValue = false|preventDefault() //阻止元素默认事件|\n|srcEelement|target //事件目标|\n\n### IE和标准下兼容性的写法举例\n\nvar ev = ev || window.event\ndocument.documentElement.clientWidth || document.body.clientWidth\nvar target = ev.srcElement||ev.target\n\n### get和post的区别\n\n- GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，以?分割URL和传输数据，参数之间以&相连。POST把提交的数据则放置在是HTTP包的Request body包体中。\n\n- GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB。\n\n- 在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。\n\n- POST的安全性要比GET的安全性高。\n\n- Get是向服务器发送取数据的一种请求，而Post是向服务器提交数据的一种请求。\n\n### call和apply\n\ncall和apply方法都是用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n唯一区别就是call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。\n\n具体联系和区别，点击[链接](https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#call和apply)查看\n\n### 事件委托\n\n事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div>ul>li>a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a>li>ul>div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。\n\n### 阻止事件冒泡和默认事件\n\n1.阻止事件冒泡,使成为捕获型事件触发机制\n\n``` bash\nfunction stopBubble(e) { \n\t//如果提供了事件对象，则这是一个非IE浏览器\n\tif ( e && e.stopPropagation)\n\t\t//因此它支持W3C的stopPropagation()方法\n\t\te.stopPropagation();\n\telse\n\t\t//否则，我们需要使用IE的方式来取消事件冒泡\n\t\twindow.event.cancelBubble = true;\n}\n```\n\n2.停止默认事件默认行为\n\n``` bash\n//阻止浏览器的默认行为 \nfunction stopDefault( e ) { \n\t//阻止默认浏览器动作(W3C)\n\tif ( e && e.preventDefault)\n\t\te.preventDefault();\n\t\t//IE中阻止函数器默认动作的方式\n\telse\n\t\twindow.event.returnValue = false;\n\treturn false;\n}\n```\n\n举例：\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\" />\n\t<title>Document</title>\n\t<script src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function() {\n\t\t\t$('div.c1').click(function(e){alert('单击了div C1');});\n\t\t\t$('div.c2').click(function(e){alert('单击了div C2');stopBubble(e);});\n\t\t\t$(document).click(function(e){alert('单击了document');});\n\t\t\t$('#txt1').val('123');\n\t\t\t$('#txt1').click(function(e){stopBubble(e);});\n\t\t\t$('#txt1').keydown(function(e){stopDefault(e);alert('按下了键值'+e.keyCode); });\n\t\t})\n\t\tfunction stopBubble(e) {\n\t\t\t//如果提供了事件对象，则这是一个非IE浏览器\n\t\t\tif ( e && e.stopPropagation )\n\t\t\t\t//因此它支持W3C的stopPropagation()方法\n\t\t\t\te.stopPropagation();\n\t\t\telse\n\t\t\t\t//否则，我们需要使用IE的方式来取消事件冒泡\n\t\t\t\twindow.event.cancelBubble = true;\n\t\t}\n\t\t//阻止浏览器的默认行为\n\t\tfunction stopDefault( e ) {\n\t\t\t//阻止默认浏览器动作(W3C)\n\t\t\tif ( e && e.preventDefault )\n\t\t\t\te.preventDefault();\n\t\t\t\t//IE中阻止函数器默认动作的方式\n\t\t\telse\n\t\t\t\twindow.event.returnValue = false;\n\t\t\treturn false;\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div class=\"c1\">测试的文字,这里是样式C1,单击以冒泡的形式触发事件.</div><hr/>\n\t<div class=\"c2\">测试的文字,这里是样式C2,单击以捕获的形式触发事件.</div><hr/>\n\t<div><input id=\"txt1\" name=\"Text1\" type=\"text\" /></div><hr/>\n</body>\n</html>\n```\n\n### JSONP原理\n\n利用&lt;script&gt;标签没有跨域限制的“漏洞”,来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个&lt;script&gt;元素，地址指向第三方的API网址，例如：&lt;script src = &quot;http：//www.example.net/api?param1=1&param2=2&quot;&gt;&lt;/script&gt;,并提供一个回调函数来接收数据(函数名可约定，或通过地址参数传递)。第三方产生的响应为json数据的包装(故称之为jsonp,即json padding)，形如：callback({\"name\":\"hax\",\"gender\":\"Male\"}).这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。\n\n### js本地对象，内置对象和宿主对象\n\n宿主环境：一般宿主环境由外壳程序创建与维护，只要能提供js引擎执行的环境都可称之为外壳程序。如：web浏览器，一些桌面应用系统等。即由web浏览器或是这些桌面应用系统早就的环境即宿主环境。\n\n1.本地对象：独立于宿主环境的 ECMAScript 实现提供的对象。\n\n“本地对象”包括：\n\nObject、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError\n\n本地对象是ECMA-2定义的类（引用类型）。\n\n2.内置对象：由ECMAScript实现提供的，独立与宿主环境的所有对象，在ECMAScript程序开始执行时出现。\n\nGlobal 和 Math。\n\n内置对象其实也是本地对象。\n\n3.宿主对象\n\n由ECMAScript实现的宿主环境提供的对象，可以理解为：浏览器提供的对象。所有的BOM和DOM都是宿主对象。\n\n### onload和document.ready\n\nwindow.onload方法必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n也就是说，先执行ready方法，再执行onload方法。\n\n### \"==\"和\"===\"\n\n\"===\"叫做严格运算符，\"==\"叫做相等运算符。\n\n严格运算符的运算规则如下:\n- 不同类型值如果两个值的类型不同，直接返回false。\n- 同一类的原始类型值同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。\n- 同一类的复合类型值两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。\n- undefined和nullundefined 和 null 与自身严格相等。\n\n``` bash\nconsole.log(null === null);\t//true\nconsole.log(undefined === undefined);\t//true\n```\n\n相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。\n\n在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。\n\n类型转换规则如下：\n+ 原始类型的值原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。\n+ 对象与原始类型值比较对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。\n+ undefined和nullundefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。\n+ 相等运算符的缺点相等运算符隐藏的类型转换，会带来一些违反直觉的结果。\n\n``` bash\nconsole.log('' == '0');\t// false\nconsole.log(0 == '');\t// true\nconsole.log(0 == '0');\t// true\nconsole.log(false == 'false');\t// false\nconsole.log(false == '0');\t// true\nconsole.log(false == undefined);\t// false\nconsole.log(false == null);\t// false\nconsole.log(null == undefined);\t// true\nconsole.log(' \\t\\r\\n ' == 0);\t// true\n```\n\n这就是为什么建议尽量不要使用相等运算符。至于使用相等运算符会不会对后续代码造成意外影响，答案是有可能会。\n\n``` bash\nvar a = undefined;\nif(!a){\n\tconsole.log(\"1\"); //1\n}\nvar b = undefined;\nif(b == null){\n\tconsole.log(\"2\"); //2\n}\nvar c = undefined;\nif(c === null){\n\tconsole.log(\"3\"); //无输出\n}\n```\n也就是说当a为undefined时，输出的值会有变化，而在编程中对象变成undefined实在是太常见了。\n\n### Javascript同源策略\n\n- 同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准，其目的是防止某个文档或脚本从多个不同源装载。\n\n- 一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合\n\n- 不遵循同源策略的标签：&lt;script&gt;,&lt;img&gt;,&lt;iframe&gt;中的src，href都可以任意链接网络资源。\n\n本章完！","source":"_posts/常见前端知识点.md","raw":"---\ntitle: 常见前端知识点\ndate: 2017-05-08 10:57:32\ncategories: \"前端开发\"\ntags:\n\t- 前端面试\n---\n\n本文讲述了部分前端面试经常遇到的问题。\n\n## HTML和CSS\n\n### 对WEB标准以及W3C的理解\n\n1.写代码的时候注意\n\n- 标签闭合\n- 标签小写\n- 不能随意嵌套\n\n2.提高搜索引擎搜到几率\n\nmate中的name变量(其中keywords和description尤其重要)\n\n``` bash\nMeta name=\"Keywords\" Lang=\"EN\" Content=\"vacation,greece,sunshine\"\nMeta name=\"Description\" Content=\"你网页的简述\"\nMeta name=\"Robots\" Content=\"All|None|Index|Noindex|Follow|Nofollow\" \n  [all：文件将被检索，且页面上的链接可以被查询； \n  none：文件将不被检索，且页面上的链接不可以被查询；(和 \"noindex, no follow\" 起相同作用) \n  index：文件将被检索；（让robot/spider登录） \n  follow：页面上的链接可以被查询； \n  noindex：文件将不被检索，但页面上的链接可以被查询；(不让robot/spider登录) \n  nofollow：文件将不被检索，页面上的链接可以被查询。(不让robot/spider顺着此页的连接往下探找)]  \nMeta name=\"Author\" Content=\"张三，abc@sina.com\"\nMeta name=\"Copyright\" Content=\"本页版权归Zerospace所有。All Rights Reserved\"\nMeta name=\"Generator\" Content=\"PCDATA|FrontPage|\"\nMETA name=\"revisit-after\" CONTENT=\"7 days\"\n```\n\n3.提高网页加载速度\n\n- 把js和css写到外部文档、实现结构行为表现的分离。\n- 去掉不必要的空格和注释等。\n- 尽量不使用table布局，尽量使用不嵌套的table布局。\n- 指定图像和table的大小。\n- 尽量不要使用图像来代替文本(例如在导航栏)。\n- 延迟js脚本加载，将脚本放在页面底部。\n- 尽量使用png格式的图像.\n\n### XHTML和HTML的区别\n\nHTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言。\n\n最主要的不同：\n- XHTML元素必须被正确地嵌套。\n\t标签由外到内，一层层包覆着，所以假设你先写div后写h1，结尾就要先写h1后写div。只要记住一个原则“先进后出”，先弹出的标签要后结尾。\n- XHTML元素必须被关闭。\n\t当出现一个标签时，必须要有对应的结束标签，缺一不可，就像在任何程序语言中的括号一样。对于空标签，也必须使用结束标签，或者其开始标签必须使用\"/>\"结尾。\n- 元素必须用小写字母。\n- XHTML文档必须拥有根元素。\n\t所有的 XHTML 元素必须被嵌套于&lt;html&gt; 根元素中。其余所有的元素均可有子元素。子元素必须是成对的且被嵌套在其父元素之中。\n\n### 严格模式与混杂模式\n\n1.Doctype的作用\n\n<!DOCTYPE>声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。<!DOCTYPE>声明必须在HTML文档的第一行，这并不是一个HTML标签。\n\n2.严格模式与混杂模式的来源\n\n当年Netscape4（网景公司早期的浏览器）和IE4（微软公司早期的浏览器）实现CSS机制时，并没有遵循W3C提出的标准。Netscape4 提供了糟糕的支持，而IE4 虽然接近标准，但依旧未能完全正确的支持标准。尽管IE 5 修复了IE4 许多的问题，但是依然延续CSS实现中的其它故障（主要是盒模型问题）。\n\n为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用css，因此大部分网站的css实现并不符合W3C规范的标准。\n\n然而随着标准一致性越来越重要，浏览器开发商不得不面临一个艰难的抉择：逐渐遵循W3C的标准是前进的方向。但是改变现有的 css，完全去遵循标准，会使许多旧网站或多或少受到破坏，如果浏览器突然以正确的方式解析现存的css，陈旧的网站的显示必然会受到影响。所以，所有的浏览器都需要提供两种模式：混杂模式服务于旧式规则，而严格模式服务于标准规则。\n\n3.概念\n\n严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。\n\n混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。\n\n4.区分\n\n浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。\n\n- 如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） \n- 包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） \n- DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）\n- HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）\n\n严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。\n\n5.两种模式不同点\n\n- 盒模型的高宽包含内边距padding和边框border\n\t在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。\n- 可以设置行内元素的高宽\n\t在严格模式下，给span等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。\n- 可设置百分比的高度\n\t在严格模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。\n- 用margin:0 auto设置水平居中在IE下会失效\n\t使用margin:0 auto在严格模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:body{text-align:center};#content{text-align:left}\n- quirk模式下设置图片的padding会失效\n- quirk模式下Table中的字体属性不能继承上层的设置\n- quirk模式下white-space:pre会失效\n\n6.常用的具体声明\n\n- HTML5(一种)：\n\t``` bash\n\t<!DOCTYPE html>\n\t```\n- HTML 4.01(三种)\n\t严格模式包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；过渡模式包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；框架模式等同于过渡模式，但允许框架集内容。\n\t``` bash\n\tHTML 4.01 Strict ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\tHTML 4.01 Transitional ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"  \"http://www.w3.org/TR/html4/loose.dtd\">\n\tHTML 4.01 Frameset ：\n\t  <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"  \"http://www.w3.org/TR/html4/frameset.dtd\">\n\t```\n- XHTML 1.0(四种)\n\t前三种模式同上，XHML 必须以格式正确的 XML 来编写标记。\n\t``` bash\n\tXHTML 1.0 Strict ：\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\tXHTML 1.0 Transitional ：\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \" http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\tXHTML 1.0 Frameset： \n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n\tXHTML 1.1 的 DTD 等同于 XHTML 1.0 Strict，但允许添加模型。\n\t  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n\t```\n### 行内元素与块级元素\n\n1.区别\n\n- 默认情况下，多个行内元素会在同一行，水平排列。块级元素每个元素独占一行，多个块级元素垂直方向排列。\n- 块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。\n- 行内元素与块级元素属性的不同，主要是盒模型属性上。行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效\n\n2.示例\n\n行内元素：&lt;span&gt; &lt;select&gt; &lt;a&gt; &lt;img&gt; &lt;label&gt; &lt;textarea&gt;等。\n\n块级元素：&lt;div&gt; &lt;h1&gt; &lt;li&gt; &lt;p&gt; &lt;table&gt; &lt;fieldset&gt; &lt;caption&gt;等。\n\n3.相互转换\n\n行内元素转块级元素：定义该元素的css样式display:block;\n块级元素转行内元素：定义该元素的css样式display:inline;\n\n### CSS盒模型\n\nCSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"400\" height=\"260\"><path d=\"M0,0 L350,0 L350,250 L0,250 L0,0\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:2\" /><path d=\"M30,30 L320,30 L320,210 L30,210 L30,30\" style=\"fill:#0f0;stroke:black;stroke-width:1\" /><path d=\"M60,60 L290,60 L290,180 L60,180 L60,60\" style=\"fill:#fff;stroke:black;stroke-width:1\" /><path d=\"M90,90 L260,90 L260,150 L90,150 L90,90\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:4\" /><text x=\"145\" y=\"20\" textLength=\"60\">margin</text><text x=\"145\" y=\"50\" textLength=\"60\">border</text><text x=\"145\" y=\"80\" textLength=\"60\">padding</text><text x=\"145\" y=\"110\" textLength=\"60\">content</text></svg>\n\n1.说明\n\n- Margin(外边距) - 盒子与其他元素之间的边距。\n- Border(边框) - 盒子的边框宽度。\n- Padding(内边距) - 盒子内边距，即边框与文字的间距。\n- Content(内容) - 盒子的内容，显示文本和图像。\n\n2.元素的宽度和高度\n\n当指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。\n\n最终元素的总宽度计算公式是这样的：\n\n** 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 **\n\n元素的总高度最终计算公式是这样的：\n\n** 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距 **\n\n3.浏览器的兼容性问题\n\n一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。\n\n虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。\n\nIE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。\n\n解决IE8及更早版本不兼容问题可以在HTML页面声明 <!DOCTYPE html>即可。\n\n### CSS引入方式及link和@import区别\n\n引入css共有四种方式：内联 内嵌 外链 导入。\n\n1.内联\n\n内联方式是指直接在标签元素的style属性中添加CSS样式。\n\n示例：\n\n``` bash\n<div style=\"font-size: 20px\"></div>\n```\n\n这通常是个很不好的书写方式，它只能改变当前标签的样式，如果希望多个div 拥有相同的样式，你不得不重复地为每个div添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。\n\n2.嵌入\n\n嵌入方式是指在页面head中的style标签下书写CSS代码。\n\n示例：\n\n``` bash\n<head>\n\t<style>\n\t\t.content {\n\t\t\tbackground: red;\n\t\t}\n\t</style>\n</head>\n```\n\n嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。\n\n3.链接\n\n链接方式是指在页面head中引入外部的CSS文件。\n\n示例：\n\n``` bash\n<head>\n\t<link rel=\"stylesheet\" href=\"style.css\" />\n</head>\n```\n\n这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。\n\n4.导入\n\n导入方式指的是使用 CSS 规则引入外部 CSS 文件。\n\n示例：\n\n``` bash\n<style>\n\t@import url(style.css);\n</style>\n```\n\n5.link和@import的区别\n\n- link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n\n- link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n\n- link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n\n- link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n### CSS选择器及优先级\n\n1.CSS选择器\nCSS选择器基本可以分为通配选择器，标签选择器，类选择器，ID选择器，简单属性选择，具体属性选择，根据部分属性值选择，特定属性选择，从结构上来分还有后代选择器，子元素选择器，相邻兄弟选择器以及伪类。\n\n- 包含选择符（又称后代选择符） E1 E2{}\n\n- 子对象选择符 E1>E2{}\n\n- ID选择符 #ID{}\n\n- 类选择符 E.className{}\n\n- 选择符分组 E1,E2,E3{}\n\n2.CSS属性继承\n\nCSS属性继承即父元素定义的CSS属性，子元素也默认使用了该属性。\n\n可以继承的有 font-size font-family color等\n\n不可以继承的有 border padding margin background-color width height等\n\n3.CSS优先级\n\n- 相同权值情况下，CSS样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：\n\n优先级为：!important > id > class > tag\n\n- 权值不同时，浏览器是根据权值来判断使用哪种css样式的，哪种样式权值高就使用哪种样式。\n\n标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。\n\n- !important的优先级比内联样式优先级高。\n\n### 前端页面结构\n\n1.结构层(HTML)\n\n对网页内容做出了描述。\n\n2.表现层(CSS)\n\n对网页内容的样式进行渲染。\n\n3.行为层(Javascript)\n\n对网页的各种交互行为进行定义。\n\n### css的基本语句构成\n\n``` bash\n自定义样式名称 {\n\t属性1:值1;\n\t属性2:值2;\n}\n```\n\n### 常见浏览器及内核\n\n- IE浏览器(Ie内核、Trident内核)\n- Firefox浏览器(Gecko)\n- 谷歌浏览器(webkit)\n- opear浏览器(Presto)\n- Safari浏览器(webkit)\n\n### 几种IE6的BUG及解决方法\n\n- IE6怪异解析之padding与border算入宽高\n\t原因：未加文档声明造成非盒模型解析\n\t解决方法：加入文档声明<!doctype html>\n\n- IE6在块元素、左右浮动、设定marin时造成margin双倍(双边距)\n\t解决方法：display:inline\n\n- 内部盒模型超出父级时，父级被撑大\n\t解决方法：父标签使用overflow:hidden\n\n- line-height默认行高bug\n\t解决方法：line-height设值\n\n- 行标签之间会有一小段空白\n\t解决方法：float或结构并排(可读性差，不建议)\n\n- 标签高度无法小于19px\n\t解决方法：overflow: hidden;\n\n- 左浮元素margin-bottom失效\n\t解决方法：\n\t1.显示设置高度\n\t2.父标签设置_padding-bottom代替子标签的margin-bottom\n\t3.再放个标签让父标签浮动，子标签margin-bottom，即(margin-bottom与float不同时作用于一个标签)\n\n- img于块元素中，底边多出空白\n\t解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;\n\n- li之间会有间距\n\t解决方法：float: left;\n\n- 块元素中有文字及右浮动的行元素，行元素换行\n\t解决方法：将行元素置于块元素内的文字前\n\n- position下的left，bottom错位\n\t解决方法：为父级(relative层)设置宽高或添加*zoom:1\n\n- 子级中有设置position，则父级overflow失效\n\t解决方法：为父级设置position:relative\n\n### title与alt的区别\n\nAlt：当图片不显示时，显示alt中的内容。\n\nTitle：为元素提供信息，鼠标悬停在该元素时，等待1s左右，显示title中的内容。\n\n### css中的reset\n\n1.常用的CSS reset\n\n``` bash\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, \nh4, h5, h6, p, blockquote, pre, a, abbr, acronym, \naddress, big, cite, code, del, dfn, em, font, img, ins, \nkbd, q, s, samp, small, strike, strong, sub, sup, tt, \nvar, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, \ntable, caption, tbody, tfoot, thead, tr, th, td { \n  margin: 0; \n  padding: 0; \n  border: 0; \n  outline: 0; \n  font-weight: inherit; \n  font-style: inherit; \n  font-size: 100%; \n  font-family: inherit; \n  vertical-align: baseline; \n} \n:focus {\n  outline: 0;\n} \na, a:link, a:visited, a:hover, a:active{\n  text-decoration:none\n} \ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n} \nth, td {\n  text-align: left;\n  font-weight: normal;\n} \nimg, iframe {\n  border: none;\n  text-decoration:none;\n} \nol, ul {\n  list-style: none;\n} \ninput, textarea, select, button {\n  font-size: 100%;\n  font-family: inherit;\n} \nselect {\n  margin: inherit;\n} \nhr {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  color: #000;\n  background-color: #000;\n  height: 1px;\n}\n```\n\n2.CSS reset作用\n\n在 HTML标签在浏览器里有默认的样式，不同浏览器的默认样式之间也会有差别。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最简单的做法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。\n\n### CSS sprites\n\n1.CSS Sprites简介\n\n客户端每显示一张图片都会向服务器发送请求，而图片越多请求次数越多，造成延迟的可能性也就越大，给服务器造成的压力也很大，所以通过CSS Sprites技术将多张小图片整合为一张图片，减少对服务器的压力。\n\n2.CSS Sprites原理\n\nCSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。\n\n3.优缺点\n\n** 优点 **\n\n- 利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；\n\n- CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n- 解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。\n\n- 更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便s。\n\n** 缺点 **\n\n- 在图片合并的时候，要把多张图片有序的合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景；这些还好，最痛苦的是在宽屏，高分辨率的屏幕下的自适应页面，你的图片如果不够宽，很容易出现背景断裂；\n\n- CSS Sprites在开发的时候比较麻烦，要通过photoshop或其他工具测量计算每一个背景单元的精确位置，非常繁琐。\n\n- CSS Sprites在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片，无需改的地方最好不要动，这样避免改动更多的css，如果在原来的地方放不下，又只能往下加图片，这样图片的字节就增加了，还要改动css。\n\n### 对网站优化的解决方案\n\n- 尽可能减少http请求次数，将css, js, 图片各自合并\n- 使用CDN托管，降低通信距离\n- 添加Expire/Cache-Control头，提供缓存\n- 启用Gzip压缩文件\n- 将css放在页面最上面\n- 将script放在页面最下面\n- 避免在css中使用表达式\n- 将css, js都放在外部文件中\n- 减少DNS查询\n- 最小化css, js，减小文件体积\n- 避免重定向\n- 移除重复脚本\n- 配置实体标签ETag\n- 使用AJAX缓存，让网站内容分批加载，局部更新\n\n### HTML语义化\n\n1.什么是HTML语义化\n\n根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。\n\n2.为什么要语义化？\n\n- 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；\n- 用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；\n- 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；\n- 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；\n- 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。\n\n3.写HTML代码时应注意什么\n\n- 尽可能少的使用无语义的标签div和span；\n- 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；\n- 不要使用纯样式标签，如：b、font、u等，改用css设置。\n- 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；\n- 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；\n- 表单域要用fieldset标签包起来，并用legend标签说明表单的用途；\n- 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。\n\n### 清除浮动\n\n浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。\n而且同样的代码，在各种浏览器中显示效果也有可能不相同，这样让清除浮动更难了。\n\n- 父级div定义height\n- 结尾处加空div标签clear:both\n- 父级div定义伪类:after和zoom\n- 父级div定义overflow:hidden\n- 父级div定义overflow:auto\n- 父级div也一起浮动\n- 父级div定义display:table\n- 结尾处加br标签clear:both\n\n## Javascript\n\n### Javascript数据类型\n\n1.Javascript共有7种数据类型\n\n基本数据类型：Boolean、Number和String。\n\n复杂数据类型：object。\n\n特殊数据类型：Undefined、Null。\n\n2.typeof函数可以返回6种数据类型\n\nstring、number、object、boolean、undefined、function。\n\n可以点击[链接](https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#typeof和instanceof)查看详情\n\n### 显式类型转换与隐式类型转换\n\nJavascript属于弱类型语言，声明变量不需要指定类型，对变量赋值也不需要类型检查，但是在有的情况下需要特别转换变量的类型。\n\n1.显式类型转换\n\n如下函数属于显式类型转换函数：\n\n- toString() 转换为字符串\n- parseInt() 转换为数字\n- Number()\n- Boolean()\n- 等\n\n2.隐式类型转换\n\n如下函数属于显式类型转换函数：\n\n- '+'加法运算符\n- ==\n\n有的人可能看不太懂为什么 \"+\" 和 \"==\" 也是隐式类型转换，我举一个例子：\n\n``` bash\nvar m = 5 + true;\nconsole.log(m);\t//6\n\nconsole.log(1 == true);\t// true\n```\n\n也就是说，\"+\"运算符将true转换成了number类型的1，所以可以和5相加，得到结果6。而\"==\"运算符把true转换成了1，然后来比较，即: 1 == 1 ,所以为true。\n\n### split(),join(),reverse()函数\n\n``` bash\nvar a = new Array();\na[0] = \"HTML\";\na[1] = \"CSS\";\na[2] = \"JavaScript\";\nconsole.log(a);\t// [\"HTML\", \"CSS\", \"JavaScript\"]\nconsole.log(a.join());\t// HTML,CSS,JavaScript\nconsole.log(a.reverse());\t// [\"JavaScript\", \"CSS\", \"HTML\"]\nvar b = 'hello JavaScript';\nconsole.log(b.split(\"\"));\t// [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"]\nconsole.log(b.split(\" \"));\t// [\"hello\", \"JavaScript\"]\n```\n\n由实例可以看出：\n- split函数用来将字符串分割为数组\n- join函数可以将数组中的所有元素拼接为一个字符串\n- reverse函数用来将原数组中元素的顺序颠倒。\n\n### 数组方法pop,push,unshift,shift\n\n- push()方法\n\n用于向数组末尾添加元素,并返回新数组的长度\n\n``` bash\nvar a = ['h','e','l','l'];\nvar m = a.push('o');\nconsole.log(m);\t// 5\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n- pop()方法\n\n删除数组最后一个元素,并返回删除的元素。\n\n``` bash\nvar a = ['h','e','l','l','o'];\nvar m = a.pop();\nconsole.log(m);\t// o\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\"]\n```\n\n- unshift()方法\n\n用于向数组头部添加元素，并返回新数组的长度。\n\n``` bash\nvar a = ['e','l','l','o'];\nvar m = a.unshift('h');\nconsole.log(m);\t// 5\nconsole.log(a);\t// [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n- shift()方法\n\n删除数组中的第一个元素，并返回删除的第一个元素的值。\n\n``` bash\nvar a = ['h','e','l','l','o'];\nvar m = a.shift();\nconsole.log(m);\t// h\nconsole.log(a);\t// [\"e\", \"l\", \"l\", \"o\"]\n```\n\n### 事件绑定和普通事件\n\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<button id=\"btn\">点击按钮</button>\n\t<script type=\"text/javascript\">\n\t\tvar btn = document.getElementById(\"btn\");\n\t\tbtn.onclick = function() {\n\t\t\tconsole.log(\"普通事件1\");\n\t\t}\n\t\tbtn.onclick = function() {\n\t\t\tconsole.log(\"普通事件2\");\n\t\t}\n\t\tbtn.addEventListener(\"click\",function() {\n\t\t\tconsole.log(\"绑定事件1\");\n\t\t},false);\n\t\tbtn.addEventListener(\"click\",function() {\n\t\t\tconsole.log(\"绑定事件2\");\n\t\t},false);\n\t</script>\n</body>\n</html>\n```\n\n上述代码输出为：\n\n``` bash\n普通2\n绑定1\n绑定2\n```\n\n由此可以得出结论：\n\n普通事件中的onclick只支持单个事件，之前的事件会被之后的onclick事件覆盖，而事件绑定中的addEventListener可以添加多个事件，之前的事件不会被覆盖。\n\n### IE和DOM事件流的区别\n\n1.参数的差别\n\nattachEvent()的第一个参数比addEventListener()的事件名多一个\"on\"，且没有第三个参数，因为IE事件模型只支持冒泡事件流;\n\n2.事件处理函数作用域的区别\n\nIE中事件处理程序处于全局作用域，其内的this会指向window;\n\n而用DOM（0或2）级事件的事件处理程序的作用域是元素作用域，其内的this指向其所属的元素.\n\n例: \ndocument.addEventListener(\"click\", function(){ \n  if(this == document){\n    alert(\"此时this指向document\");\n  }\n}, false);\n\n3.事件对象event的属性方法的差别\n\n|IE|DOM|\n|:--|:--|\n|cancelBubble = true|stopPropagation() //停止冒泡|\n|returnValue = false|preventDefault() //阻止元素默认事件|\n|srcEelement|target //事件目标|\n\n### IE和标准下兼容性的写法举例\n\nvar ev = ev || window.event\ndocument.documentElement.clientWidth || document.body.clientWidth\nvar target = ev.srcElement||ev.target\n\n### get和post的区别\n\n- GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，以?分割URL和传输数据，参数之间以&相连。POST把提交的数据则放置在是HTTP包的Request body包体中。\n\n- GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB。\n\n- 在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。\n\n- POST的安全性要比GET的安全性高。\n\n- Get是向服务器发送取数据的一种请求，而Post是向服务器提交数据的一种请求。\n\n### call和apply\n\ncall和apply方法都是用来调用一个对象的一个方法，以另一个对象来替换当前对象。\n\n唯一区别就是call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。\n\n具体联系和区别，点击[链接](https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#call和apply)查看\n\n### 事件委托\n\n事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div>ul>li>a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a>li>ul>div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。\n\n### 阻止事件冒泡和默认事件\n\n1.阻止事件冒泡,使成为捕获型事件触发机制\n\n``` bash\nfunction stopBubble(e) { \n\t//如果提供了事件对象，则这是一个非IE浏览器\n\tif ( e && e.stopPropagation)\n\t\t//因此它支持W3C的stopPropagation()方法\n\t\te.stopPropagation();\n\telse\n\t\t//否则，我们需要使用IE的方式来取消事件冒泡\n\t\twindow.event.cancelBubble = true;\n}\n```\n\n2.停止默认事件默认行为\n\n``` bash\n//阻止浏览器的默认行为 \nfunction stopDefault( e ) { \n\t//阻止默认浏览器动作(W3C)\n\tif ( e && e.preventDefault)\n\t\te.preventDefault();\n\t\t//IE中阻止函数器默认动作的方式\n\telse\n\t\twindow.event.returnValue = false;\n\treturn false;\n}\n```\n\n举例：\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\" />\n\t<title>Document</title>\n\t<script src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function() {\n\t\t\t$('div.c1').click(function(e){alert('单击了div C1');});\n\t\t\t$('div.c2').click(function(e){alert('单击了div C2');stopBubble(e);});\n\t\t\t$(document).click(function(e){alert('单击了document');});\n\t\t\t$('#txt1').val('123');\n\t\t\t$('#txt1').click(function(e){stopBubble(e);});\n\t\t\t$('#txt1').keydown(function(e){stopDefault(e);alert('按下了键值'+e.keyCode); });\n\t\t})\n\t\tfunction stopBubble(e) {\n\t\t\t//如果提供了事件对象，则这是一个非IE浏览器\n\t\t\tif ( e && e.stopPropagation )\n\t\t\t\t//因此它支持W3C的stopPropagation()方法\n\t\t\t\te.stopPropagation();\n\t\t\telse\n\t\t\t\t//否则，我们需要使用IE的方式来取消事件冒泡\n\t\t\t\twindow.event.cancelBubble = true;\n\t\t}\n\t\t//阻止浏览器的默认行为\n\t\tfunction stopDefault( e ) {\n\t\t\t//阻止默认浏览器动作(W3C)\n\t\t\tif ( e && e.preventDefault )\n\t\t\t\te.preventDefault();\n\t\t\t\t//IE中阻止函数器默认动作的方式\n\t\t\telse\n\t\t\t\twindow.event.returnValue = false;\n\t\t\treturn false;\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div class=\"c1\">测试的文字,这里是样式C1,单击以冒泡的形式触发事件.</div><hr/>\n\t<div class=\"c2\">测试的文字,这里是样式C2,单击以捕获的形式触发事件.</div><hr/>\n\t<div><input id=\"txt1\" name=\"Text1\" type=\"text\" /></div><hr/>\n</body>\n</html>\n```\n\n### JSONP原理\n\n利用&lt;script&gt;标签没有跨域限制的“漏洞”,来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个&lt;script&gt;元素，地址指向第三方的API网址，例如：&lt;script src = &quot;http：//www.example.net/api?param1=1&param2=2&quot;&gt;&lt;/script&gt;,并提供一个回调函数来接收数据(函数名可约定，或通过地址参数传递)。第三方产生的响应为json数据的包装(故称之为jsonp,即json padding)，形如：callback({\"name\":\"hax\",\"gender\":\"Male\"}).这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。\n\n### js本地对象，内置对象和宿主对象\n\n宿主环境：一般宿主环境由外壳程序创建与维护，只要能提供js引擎执行的环境都可称之为外壳程序。如：web浏览器，一些桌面应用系统等。即由web浏览器或是这些桌面应用系统早就的环境即宿主环境。\n\n1.本地对象：独立于宿主环境的 ECMAScript 实现提供的对象。\n\n“本地对象”包括：\n\nObject、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError\n\n本地对象是ECMA-2定义的类（引用类型）。\n\n2.内置对象：由ECMAScript实现提供的，独立与宿主环境的所有对象，在ECMAScript程序开始执行时出现。\n\nGlobal 和 Math。\n\n内置对象其实也是本地对象。\n\n3.宿主对象\n\n由ECMAScript实现的宿主环境提供的对象，可以理解为：浏览器提供的对象。所有的BOM和DOM都是宿主对象。\n\n### onload和document.ready\n\nwindow.onload方法必须等到页面内包括图片的所有元素加载完毕后才能执行。\n\n$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。\n\n也就是说，先执行ready方法，再执行onload方法。\n\n### \"==\"和\"===\"\n\n\"===\"叫做严格运算符，\"==\"叫做相等运算符。\n\n严格运算符的运算规则如下:\n- 不同类型值如果两个值的类型不同，直接返回false。\n- 同一类的原始类型值同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。\n- 同一类的复合类型值两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。\n- undefined和nullundefined 和 null 与自身严格相等。\n\n``` bash\nconsole.log(null === null);\t//true\nconsole.log(undefined === undefined);\t//true\n```\n\n相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。\n\n在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。\n\n类型转换规则如下：\n+ 原始类型的值原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。\n+ 对象与原始类型值比较对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。\n+ undefined和nullundefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。\n+ 相等运算符的缺点相等运算符隐藏的类型转换，会带来一些违反直觉的结果。\n\n``` bash\nconsole.log('' == '0');\t// false\nconsole.log(0 == '');\t// true\nconsole.log(0 == '0');\t// true\nconsole.log(false == 'false');\t// false\nconsole.log(false == '0');\t// true\nconsole.log(false == undefined);\t// false\nconsole.log(false == null);\t// false\nconsole.log(null == undefined);\t// true\nconsole.log(' \\t\\r\\n ' == 0);\t// true\n```\n\n这就是为什么建议尽量不要使用相等运算符。至于使用相等运算符会不会对后续代码造成意外影响，答案是有可能会。\n\n``` bash\nvar a = undefined;\nif(!a){\n\tconsole.log(\"1\"); //1\n}\nvar b = undefined;\nif(b == null){\n\tconsole.log(\"2\"); //2\n}\nvar c = undefined;\nif(c === null){\n\tconsole.log(\"3\"); //无输出\n}\n```\n也就是说当a为undefined时，输出的值会有变化，而在编程中对象变成undefined实在是太常见了。\n\n### Javascript同源策略\n\n- 同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准，其目的是防止某个文档或脚本从多个不同源装载。\n\n- 一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合\n\n- 不遵循同源策略的标签：&lt;script&gt;,&lt;img&gt;,&lt;iframe&gt;中的src，href都可以任意链接网络资源。\n\n本章完！","slug":"常见前端知识点","published":1,"updated":"2017-05-17T14:37:12.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxzj000q1gwdy9kgjj7y","content":"<p>本文讲述了部分前端面试经常遇到的问题。</p>\n<h2 id=\"HTML和CSS\"><a href=\"#HTML和CSS\" class=\"headerlink\" title=\"HTML和CSS\"></a>HTML和CSS</h2><h3 id=\"对WEB标准以及W3C的理解\"><a href=\"#对WEB标准以及W3C的理解\" class=\"headerlink\" title=\"对WEB标准以及W3C的理解\"></a>对WEB标准以及W3C的理解</h3><p>1.写代码的时候注意</p>\n<ul>\n<li>标签闭合</li>\n<li>标签小写</li>\n<li>不能随意嵌套</li>\n</ul>\n<p>2.提高搜索引擎搜到几率</p>\n<p>mate中的name变量(其中keywords和description尤其重要)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meta name=<span class=\"string\">\"Keywords\"</span> Lang=<span class=\"string\">\"EN\"</span> Content=<span class=\"string\">\"vacation,greece,sunshine\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Description\"</span> Content=<span class=\"string\">\"你网页的简述\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Robots\"</span> Content=<span class=\"string\">\"All|None|Index|Noindex|Follow|Nofollow\"</span> </div><div class=\"line\">  [all：文件将被检索，且页面上的链接可以被查询； </div><div class=\"line\">  none：文件将不被检索，且页面上的链接不可以被查询；(和 <span class=\"string\">\"noindex, no follow\"</span> 起相同作用) </div><div class=\"line\">  index：文件将被检索；（让robot/spider登录） </div><div class=\"line\">  follow：页面上的链接可以被查询； </div><div class=\"line\">  noindex：文件将不被检索，但页面上的链接可以被查询；(不让robot/spider登录) </div><div class=\"line\">  nofollow：文件将不被检索，页面上的链接可以被查询。(不让robot/spider顺着此页的连接往下探找)]  </div><div class=\"line\">Meta name=<span class=\"string\">\"Author\"</span> Content=<span class=\"string\">\"张三，abc@sina.com\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Copyright\"</span> Content=<span class=\"string\">\"本页版权归Zerospace所有。All Rights Reserved\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Generator\"</span> Content=<span class=\"string\">\"PCDATA|FrontPage|\"</span></div><div class=\"line\">META name=<span class=\"string\">\"revisit-after\"</span> CONTENT=<span class=\"string\">\"7 days\"</span></div></pre></td></tr></table></figure>\n<p>3.提高网页加载速度</p>\n<ul>\n<li>把js和css写到外部文档、实现结构行为表现的分离。</li>\n<li>去掉不必要的空格和注释等。</li>\n<li>尽量不使用table布局，尽量使用不嵌套的table布局。</li>\n<li>指定图像和table的大小。</li>\n<li>尽量不要使用图像来代替文本(例如在导航栏)。</li>\n<li>延迟js脚本加载，将脚本放在页面底部。</li>\n<li>尽量使用png格式的图像.</li>\n</ul>\n<h3 id=\"XHTML和HTML的区别\"><a href=\"#XHTML和HTML的区别\" class=\"headerlink\" title=\"XHTML和HTML的区别\"></a>XHTML和HTML的区别</h3><p>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言。</p>\n<p>最主要的不同：</p>\n<ul>\n<li>XHTML元素必须被正确地嵌套。<br>  标签由外到内，一层层包覆着，所以假设你先写div后写h1，结尾就要先写h1后写div。只要记住一个原则“先进后出”，先弹出的标签要后结尾。</li>\n<li>XHTML元素必须被关闭。<br>  当出现一个标签时，必须要有对应的结束标签，缺一不可，就像在任何程序语言中的括号一样。对于空标签，也必须使用结束标签，或者其开始标签必须使用”/&gt;”结尾。</li>\n<li>元素必须用小写字母。</li>\n<li>XHTML文档必须拥有根元素。<br>  所有的 XHTML 元素必须被嵌套于&lt;html&gt; 根元素中。其余所有的元素均可有子元素。子元素必须是成对的且被嵌套在其父元素之中。</li>\n</ul>\n<h3 id=\"严格模式与混杂模式\"><a href=\"#严格模式与混杂模式\" class=\"headerlink\" title=\"严格模式与混杂模式\"></a>严格模式与混杂模式</h3><p>1.Doctype的作用</p>\n<p>&lt;!DOCTYPE&gt;声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。&lt;!DOCTYPE&gt;声明必须在HTML文档的第一行，这并不是一个HTML标签。</p>\n<p>2.严格模式与混杂模式的来源</p>\n<p>当年Netscape4（网景公司早期的浏览器）和IE4（微软公司早期的浏览器）实现CSS机制时，并没有遵循W3C提出的标准。Netscape4 提供了糟糕的支持，而IE4 虽然接近标准，但依旧未能完全正确的支持标准。尽管IE 5 修复了IE4 许多的问题，但是依然延续CSS实现中的其它故障（主要是盒模型问题）。</p>\n<p>为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用css，因此大部分网站的css实现并不符合W3C规范的标准。</p>\n<p>然而随着标准一致性越来越重要，浏览器开发商不得不面临一个艰难的抉择：逐渐遵循W3C的标准是前进的方向。但是改变现有的 css，完全去遵循标准，会使许多旧网站或多或少受到破坏，如果浏览器突然以正确的方式解析现存的css，陈旧的网站的显示必然会受到影响。所以，所有的浏览器都需要提供两种模式：混杂模式服务于旧式规则，而严格模式服务于标准规则。</p>\n<p>3.概念</p>\n<p>严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。</p>\n<p>混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。</p>\n<p>4.区分</p>\n<p>浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。</p>\n<ul>\n<li>如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） </li>\n<li>包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） </li>\n<li>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）</li>\n<li>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）</li>\n</ul>\n<p>严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。</p>\n<p>5.两种模式不同点</p>\n<ul>\n<li>盒模型的高宽包含内边距padding和边框border<br>  在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。</li>\n<li>可以设置行内元素的高宽<br>  在严格模式下，给span等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。</li>\n<li>可设置百分比的高度<br>  在严格模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。</li>\n<li>用margin:0 auto设置水平居中在IE下会失效<br>  使用margin:0 auto在严格模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:body{text-align:center};#content{text-align:left}</li>\n<li>quirk模式下设置图片的padding会失效</li>\n<li>quirk模式下Table中的字体属性不能继承上层的设置</li>\n<li>quirk模式下white-space:pre会失效</li>\n</ul>\n<p>6.常用的具体声明</p>\n<ul>\n<li><p>HTML5(一种)：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML 4.01(三种)<br>  严格模式包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；过渡模式包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；框架模式等同于过渡模式，但允许框架集内容。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML 4.01 Strict ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</div><div class=\"line\">HTML 4.01 Transitional ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</div><div class=\"line\">HTML 4.01 Frameset ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Frameset//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/html4/frameset.dtd\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>XHTML 1.0(四种)<br>  前三种模式同上，XHML 必须以格式正确的 XML 来编写标记。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">XHTML 1.0 Strict ：</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Strict//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.0 Transitional ：</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span> <span class=\"string\">\" http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.0 Frameset： </div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Frameset//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.1 的 DTD 等同于 XHTML 1.0 Strict，但允许添加模型。</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.1//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a>行内元素与块级元素</h3><p>1.区别</p>\n<ul>\n<li>默认情况下，多个行内元素会在同一行，水平排列。块级元素每个元素独占一行，多个块级元素垂直方向排列。</li>\n<li>块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。</li>\n<li>行内元素与块级元素属性的不同，主要是盒模型属性上。行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效</li>\n</ul>\n<p>2.示例</p>\n<p>行内元素：&lt;span&gt; &lt;select&gt; &lt;a&gt; &lt;img&gt; &lt;label&gt; &lt;textarea&gt;等。</p>\n<p>块级元素：&lt;div&gt; &lt;h1&gt; &lt;li&gt; &lt;p&gt; &lt;table&gt; &lt;fieldset&gt; &lt;caption&gt;等。</p>\n<p>3.相互转换</p>\n<p>行内元素转块级元素：定义该元素的css样式display:block;<br>块级元素转行内元素：定义该元素的css样式display:inline;</p>\n<h3 id=\"CSS盒模型\"><a href=\"#CSS盒模型\" class=\"headerlink\" title=\"CSS盒模型\"></a>CSS盒模型</h3><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"400\" height=\"260\"><path d=\"M0,0 L350,0 L350,250 L0,250 L0,0\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:2\"/><path d=\"M30,30 L320,30 L320,210 L30,210 L30,30\" style=\"fill:#0f0;stroke:black;stroke-width:1\"/><path d=\"M60,60 L290,60 L290,180 L60,180 L60,60\" style=\"fill:#fff;stroke:black;stroke-width:1\"/><path d=\"M90,90 L260,90 L260,150 L90,150 L90,90\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:4\"/><text x=\"145\" y=\"20\" textlength=\"60\">margin</text><text x=\"145\" y=\"50\" textlength=\"60\">border</text><text x=\"145\" y=\"80\" textlength=\"60\">padding</text><text x=\"145\" y=\"110\" textlength=\"60\">content</text></svg>\n\n<p>1.说明</p>\n<ul>\n<li>Margin(外边距) - 盒子与其他元素之间的边距。</li>\n<li>Border(边框) - 盒子的边框宽度。</li>\n<li>Padding(内边距) - 盒子内边距，即边框与文字的间距。</li>\n<li>Content(内容) - 盒子的内容，显示文本和图像。</li>\n</ul>\n<p>2.元素的宽度和高度</p>\n<p>当指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。</p>\n<p>最终元素的总宽度计算公式是这样的：</p>\n<p><strong> 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 </strong></p>\n<p>元素的总高度最终计算公式是这样的：</p>\n<p><strong> 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距 </strong></p>\n<p>3.浏览器的兼容性问题</p>\n<p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>\n<p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>\n<p>IE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。</p>\n<p>解决IE8及更早版本不兼容问题可以在HTML页面声明 &lt;!DOCTYPE html&gt;即可。</p>\n<h3 id=\"CSS引入方式及link和-import区别\"><a href=\"#CSS引入方式及link和-import区别\" class=\"headerlink\" title=\"CSS引入方式及link和@import区别\"></a>CSS引入方式及link和@import区别</h3><p>引入css共有四种方式：内联 内嵌 外链 导入。</p>\n<p>1.内联</p>\n<p>内联方式是指直接在标签元素的style属性中添加CSS样式。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"font-size: 20px\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>这通常是个很不好的书写方式，它只能改变当前标签的样式，如果希望多个div 拥有相同的样式，你不得不重复地为每个div添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。</p>\n<p>2.嵌入</p>\n<p>嵌入方式是指在页面head中的style标签下书写CSS代码。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;style&gt;</div><div class=\"line\">\t\t.content &#123;</div><div class=\"line\">\t\t\tbackground: red;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。</p>\n<p>3.链接</p>\n<p>链接方式是指在页面head中引入外部的CSS文件。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"style.css\"</span> /&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。</p>\n<p>4.导入</p>\n<p>导入方式指的是使用 CSS 规则引入外部 CSS 文件。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">\t@import url(style.css);</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>5.link和@import的区别</p>\n<ul>\n<li><p>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p>\n</li>\n<li><p>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>\n</li>\n<li><p>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p>\n</li>\n<li><p>link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>\n</li>\n</ul>\n<h3 id=\"CSS选择器及优先级\"><a href=\"#CSS选择器及优先级\" class=\"headerlink\" title=\"CSS选择器及优先级\"></a>CSS选择器及优先级</h3><p>1.CSS选择器<br>CSS选择器基本可以分为通配选择器，标签选择器，类选择器，ID选择器，简单属性选择，具体属性选择，根据部分属性值选择，特定属性选择，从结构上来分还有后代选择器，子元素选择器，相邻兄弟选择器以及伪类。</p>\n<ul>\n<li><p>包含选择符（又称后代选择符） E1 E2{}</p>\n</li>\n<li><p>子对象选择符 E1&gt;E2{}</p>\n</li>\n<li><p>ID选择符 #ID{}</p>\n</li>\n<li><p>类选择符 E.className{}</p>\n</li>\n<li><p>选择符分组 E1,E2,E3{}</p>\n</li>\n</ul>\n<p>2.CSS属性继承</p>\n<p>CSS属性继承即父元素定义的CSS属性，子元素也默认使用了该属性。</p>\n<p>可以继承的有 font-size font-family color等</p>\n<p>不可以继承的有 border padding margin background-color width height等</p>\n<p>3.CSS优先级</p>\n<ul>\n<li>相同权值情况下，CSS样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：</li>\n</ul>\n<p>优先级为：!important &gt; id &gt; class &gt; tag</p>\n<ul>\n<li>权值不同时，浏览器是根据权值来判断使用哪种css样式的，哪种样式权值高就使用哪种样式。</li>\n</ul>\n<p>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。</p>\n<ul>\n<li>!important的优先级比内联样式优先级高。</li>\n</ul>\n<h3 id=\"前端页面结构\"><a href=\"#前端页面结构\" class=\"headerlink\" title=\"前端页面结构\"></a>前端页面结构</h3><p>1.结构层(HTML)</p>\n<p>对网页内容做出了描述。</p>\n<p>2.表现层(CSS)</p>\n<p>对网页内容的样式进行渲染。</p>\n<p>3.行为层(Javascript)</p>\n<p>对网页的各种交互行为进行定义。</p>\n<h3 id=\"css的基本语句构成\"><a href=\"#css的基本语句构成\" class=\"headerlink\" title=\"css的基本语句构成\"></a>css的基本语句构成</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">自定义样式名称 &#123;</div><div class=\"line\">\t属性1:值1;</div><div class=\"line\">\t属性2:值2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"常见浏览器及内核\"><a href=\"#常见浏览器及内核\" class=\"headerlink\" title=\"常见浏览器及内核\"></a>常见浏览器及内核</h3><ul>\n<li>IE浏览器(Ie内核、Trident内核)</li>\n<li>Firefox浏览器(Gecko)</li>\n<li>谷歌浏览器(webkit)</li>\n<li>opear浏览器(Presto)</li>\n<li>Safari浏览器(webkit)</li>\n</ul>\n<h3 id=\"几种IE6的BUG及解决方法\"><a href=\"#几种IE6的BUG及解决方法\" class=\"headerlink\" title=\"几种IE6的BUG及解决方法\"></a>几种IE6的BUG及解决方法</h3><ul>\n<li><p>IE6怪异解析之padding与border算入宽高<br>  原因：未加文档声明造成非盒模型解析<br>  解决方法：加入文档声明&lt;!doctype html&gt;</p>\n</li>\n<li><p>IE6在块元素、左右浮动、设定marin时造成margin双倍(双边距)<br>  解决方法：display:inline</p>\n</li>\n<li><p>内部盒模型超出父级时，父级被撑大<br>  解决方法：父标签使用overflow:hidden</p>\n</li>\n<li><p>line-height默认行高bug<br>  解决方法：line-height设值</p>\n</li>\n<li><p>行标签之间会有一小段空白<br>  解决方法：float或结构并排(可读性差，不建议)</p>\n</li>\n<li><p>标签高度无法小于19px<br>  解决方法：overflow: hidden;</p>\n</li>\n<li><p>左浮元素margin-bottom失效<br>  解决方法：<br>  1.显示设置高度<br>  2.父标签设置_padding-bottom代替子标签的margin-bottom<br>  3.再放个标签让父标签浮动，子标签margin-bottom，即(margin-bottom与float不同时作用于一个标签)</p>\n</li>\n<li><p>img于块元素中，底边多出空白<br>  解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;</p>\n</li>\n<li><p>li之间会有间距<br>  解决方法：float: left;</p>\n</li>\n<li><p>块元素中有文字及右浮动的行元素，行元素换行<br>  解决方法：将行元素置于块元素内的文字前</p>\n</li>\n<li><p>position下的left，bottom错位<br>  解决方法：为父级(relative层)设置宽高或添加*zoom:1</p>\n</li>\n<li><p>子级中有设置position，则父级overflow失效<br>  解决方法：为父级设置position:relative</p>\n</li>\n</ul>\n<h3 id=\"title与alt的区别\"><a href=\"#title与alt的区别\" class=\"headerlink\" title=\"title与alt的区别\"></a>title与alt的区别</h3><p>Alt：当图片不显示时，显示alt中的内容。</p>\n<p>Title：为元素提供信息，鼠标悬停在该元素时，等待1s左右，显示title中的内容。</p>\n<h3 id=\"css中的reset\"><a href=\"#css中的reset\" class=\"headerlink\" title=\"css中的reset\"></a>css中的reset</h3><p>1.常用的CSS reset</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">html, body, div, span, applet, object, iframe, h1, h2, h3, </div><div class=\"line\">h4, h5, h6, p, blockquote, pre, a, abbr, acronym, </div><div class=\"line\">address, big, cite, code, del, dfn, em, font, img, ins, </div><div class=\"line\">kbd, q, s, samp, small, strike, strong, sub, sup, tt, </div><div class=\"line\">var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, </div><div class=\"line\">table, caption, tbody, tfoot, thead, tr, th, td &#123; </div><div class=\"line\">  margin: 0; </div><div class=\"line\">  padding: 0; </div><div class=\"line\">  border: 0; </div><div class=\"line\">  outline: 0; </div><div class=\"line\">  font-weight: inherit; </div><div class=\"line\">  font-style: inherit; </div><div class=\"line\">  font-size: 100%; </div><div class=\"line\">  font-family: inherit; </div><div class=\"line\">  vertical-align: baseline; </div><div class=\"line\">&#125; </div><div class=\"line\">:focus &#123;</div><div class=\"line\">  outline: 0;</div><div class=\"line\">&#125; </div><div class=\"line\">a, a:link, a:visited, a:hover, a:active&#123;</div><div class=\"line\">  text-decoration:none</div><div class=\"line\">&#125; </div><div class=\"line\">table &#123;</div><div class=\"line\">  border-collapse: separate;</div><div class=\"line\">  border-spacing: 0;</div><div class=\"line\">&#125; </div><div class=\"line\">th, td &#123;</div><div class=\"line\">  text-align: left;</div><div class=\"line\">  font-weight: normal;</div><div class=\"line\">&#125; </div><div class=\"line\">img, iframe &#123;</div><div class=\"line\">  border: none;</div><div class=\"line\">  text-decoration:none;</div><div class=\"line\">&#125; </div><div class=\"line\">ol, ul &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">&#125; </div><div class=\"line\">input, textarea, select, button &#123;</div><div class=\"line\">  font-size: 100%;</div><div class=\"line\">  font-family: inherit;</div><div class=\"line\">&#125; </div><div class=\"line\">select &#123;</div><div class=\"line\">  margin: inherit;</div><div class=\"line\">&#125; </div><div class=\"line\">hr &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">  border: 0;</div><div class=\"line\">  color: <span class=\"comment\">#000;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#000;</span></div><div class=\"line\">  height: 1px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.CSS reset作用</p>\n<p>在 HTML标签在浏览器里有默认的样式，不同浏览器的默认样式之间也会有差别。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最简单的做法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。</p>\n<h3 id=\"CSS-sprites\"><a href=\"#CSS-sprites\" class=\"headerlink\" title=\"CSS sprites\"></a>CSS sprites</h3><p>1.CSS Sprites简介</p>\n<p>客户端每显示一张图片都会向服务器发送请求，而图片越多请求次数越多，造成延迟的可能性也就越大，给服务器造成的压力也很大，所以通过CSS Sprites技术将多张小图片整合为一张图片，减少对服务器的压力。</p>\n<p>2.CSS Sprites原理</p>\n<p>CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。</p>\n<p>3.优缺点</p>\n<p><strong> 优点 </strong></p>\n<ul>\n<li><p>利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；</p>\n</li>\n<li><p>CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p>\n</li>\n<li><p>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</p>\n</li>\n<li><p>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便s。</p>\n</li>\n</ul>\n<p><strong> 缺点 </strong></p>\n<ul>\n<li><p>在图片合并的时候，要把多张图片有序的合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景；这些还好，最痛苦的是在宽屏，高分辨率的屏幕下的自适应页面，你的图片如果不够宽，很容易出现背景断裂；</p>\n</li>\n<li><p>CSS Sprites在开发的时候比较麻烦，要通过photoshop或其他工具测量计算每一个背景单元的精确位置，非常繁琐。</p>\n</li>\n<li><p>CSS Sprites在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片，无需改的地方最好不要动，这样避免改动更多的css，如果在原来的地方放不下，又只能往下加图片，这样图片的字节就增加了，还要改动css。</p>\n</li>\n</ul>\n<h3 id=\"对网站优化的解决方案\"><a href=\"#对网站优化的解决方案\" class=\"headerlink\" title=\"对网站优化的解决方案\"></a>对网站优化的解决方案</h3><ul>\n<li>尽可能减少http请求次数，将css, js, 图片各自合并</li>\n<li>使用CDN托管，降低通信距离</li>\n<li>添加Expire/Cache-Control头，提供缓存</li>\n<li>启用Gzip压缩文件</li>\n<li>将css放在页面最上面</li>\n<li>将script放在页面最下面</li>\n<li>避免在css中使用表达式</li>\n<li>将css, js都放在外部文件中</li>\n<li>减少DNS查询</li>\n<li>最小化css, js，减小文件体积</li>\n<li>避免重定向</li>\n<li>移除重复脚本</li>\n<li>配置实体标签ETag</li>\n<li>使用AJAX缓存，让网站内容分批加载，局部更新</li>\n</ul>\n<h3 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h3><p>1.什么是HTML语义化</p>\n<p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>\n<p>2.为什么要语义化？</p>\n<ul>\n<li>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；</li>\n<li>用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；</li>\n<li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li>\n<li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li>\n<li>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</li>\n</ul>\n<p>3.写HTML代码时应注意什么</p>\n<ul>\n<li>尽可能少的使用无语义的标签div和span；</li>\n<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>\n<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>\n<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>\n<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>\n<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li>\n<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li>\n</ul>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。<br>而且同样的代码，在各种浏览器中显示效果也有可能不相同，这样让清除浮动更难了。</p>\n<ul>\n<li>父级div定义height</li>\n<li>结尾处加空div标签clear:both</li>\n<li>父级div定义伪类:after和zoom</li>\n<li>父级div定义overflow:hidden</li>\n<li>父级div定义overflow:auto</li>\n<li>父级div也一起浮动</li>\n<li>父级div定义display:table</li>\n<li>结尾处加br标签clear:both</li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"Javascript数据类型\"><a href=\"#Javascript数据类型\" class=\"headerlink\" title=\"Javascript数据类型\"></a>Javascript数据类型</h3><p>1.Javascript共有7种数据类型</p>\n<p>基本数据类型：Boolean、Number和String。</p>\n<p>复杂数据类型：object。</p>\n<p>特殊数据类型：Undefined、Null。</p>\n<p>2.typeof函数可以返回6种数据类型</p>\n<p>string、number、object、boolean、undefined、function。</p>\n<p>可以点击<a href=\"https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#typeof和instanceof\">链接</a>查看详情</p>\n<h3 id=\"显式类型转换与隐式类型转换\"><a href=\"#显式类型转换与隐式类型转换\" class=\"headerlink\" title=\"显式类型转换与隐式类型转换\"></a>显式类型转换与隐式类型转换</h3><p>Javascript属于弱类型语言，声明变量不需要指定类型，对变量赋值也不需要类型检查，但是在有的情况下需要特别转换变量的类型。</p>\n<p>1.显式类型转换</p>\n<p>如下函数属于显式类型转换函数：</p>\n<ul>\n<li>toString() 转换为字符串</li>\n<li>parseInt() 转换为数字</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>等</li>\n</ul>\n<p>2.隐式类型转换</p>\n<p>如下函数属于显式类型转换函数：</p>\n<ul>\n<li>‘+’加法运算符</li>\n<li>==</li>\n</ul>\n<p>有的人可能看不太懂为什么 “+” 和 “==” 也是隐式类型转换，我举一个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var m = 5 + <span class=\"literal\">true</span>;</div><div class=\"line\">console.log(m);\t//6</div><div class=\"line\"></div><div class=\"line\">console.log(1 == <span class=\"literal\">true</span>);\t// <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>也就是说，”+”运算符将true转换成了number类型的1，所以可以和5相加，得到结果6。而”==”运算符把true转换成了1，然后来比较，即: 1 == 1 ,所以为true。</p>\n<h3 id=\"split-join-reverse-函数\"><a href=\"#split-join-reverse-函数\" class=\"headerlink\" title=\"split(),join(),reverse()函数\"></a>split(),join(),reverse()函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = new Array();</div><div class=\"line\">a[0] = <span class=\"string\">\"HTML\"</span>;</div><div class=\"line\">a[1] = <span class=\"string\">\"CSS\"</span>;</div><div class=\"line\">a[2] = <span class=\"string\">\"JavaScript\"</span>;</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"JavaScript\"</span>]</div><div class=\"line\">console.log(a.join());\t// HTML,CSS,JavaScript</div><div class=\"line\">console.log(a.reverse());\t// [<span class=\"string\">\"JavaScript\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"HTML\"</span>]</div><div class=\"line\">var b = <span class=\"string\">'hello JavaScript'</span>;</div><div class=\"line\">console.log(b.split(<span class=\"string\">\"\"</span>));\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\" \"</span>, <span class=\"string\">\"J\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"t\"</span>]</div><div class=\"line\">console.log(b.split(<span class=\"string\">\" \"</span>));\t// [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"JavaScript\"</span>]</div></pre></td></tr></table></figure>\n<p>由实例可以看出：</p>\n<ul>\n<li>split函数用来将字符串分割为数组</li>\n<li>join函数可以将数组中的所有元素拼接为一个字符串</li>\n<li>reverse函数用来将原数组中元素的顺序颠倒。</li>\n</ul>\n<h3 id=\"数组方法pop-push-unshift-shift\"><a href=\"#数组方法pop-push-unshift-shift\" class=\"headerlink\" title=\"数组方法pop,push,unshift,shift\"></a>数组方法pop,push,unshift,shift</h3><ul>\n<li>push()方法</li>\n</ul>\n<p>用于向数组末尾添加元素,并返回新数组的长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>];</div><div class=\"line\">var m = a.push(<span class=\"string\">'o'</span>);</div><div class=\"line\">console.log(m);\t// 5</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>pop()方法</li>\n</ul>\n<p>删除数组最后一个元素,并返回删除的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.pop();</div><div class=\"line\">console.log(m);\t// o</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>unshift()方法</li>\n</ul>\n<p>用于向数组头部添加元素，并返回新数组的长度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.unshift(<span class=\"string\">'h'</span>);</div><div class=\"line\">console.log(m);\t// 5</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>shift()方法</li>\n</ul>\n<p>删除数组中的第一个元素，并返回删除的第一个元素的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.shift();</div><div class=\"line\">console.log(m);\t// h</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"事件绑定和普通事件\"><a href=\"#事件绑定和普通事件\" class=\"headerlink\" title=\"事件绑定和普通事件\"></a>事件绑定和普通事件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;button id=<span class=\"string\">\"btn\"</span>&gt;点击按钮&lt;/button&gt;</div><div class=\"line\">\t&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">\t\tvar btn = document.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">\t\tbtn.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"普通事件1\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbtn.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"普通事件2\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"绑定事件1\"</span>);</div><div class=\"line\">\t\t&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\">\t\tbtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"绑定事件2\"</span>);</div><div class=\"line\">\t\t&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码输出为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">普通2</div><div class=\"line\">绑定1</div><div class=\"line\">绑定2</div></pre></td></tr></table></figure>\n<p>由此可以得出结论：</p>\n<p>普通事件中的onclick只支持单个事件，之前的事件会被之后的onclick事件覆盖，而事件绑定中的addEventListener可以添加多个事件，之前的事件不会被覆盖。</p>\n<h3 id=\"IE和DOM事件流的区别\"><a href=\"#IE和DOM事件流的区别\" class=\"headerlink\" title=\"IE和DOM事件流的区别\"></a>IE和DOM事件流的区别</h3><p>1.参数的差别</p>\n<p>attachEvent()的第一个参数比addEventListener()的事件名多一个”on”，且没有第三个参数，因为IE事件模型只支持冒泡事件流;</p>\n<p>2.事件处理函数作用域的区别</p>\n<p>IE中事件处理程序处于全局作用域，其内的this会指向window;</p>\n<p>而用DOM（0或2）级事件的事件处理程序的作用域是元素作用域，其内的this指向其所属的元素.</p>\n<p>例:<br>document.addEventListener(“click”, function(){<br>  if(this == document){<br>    alert(“此时this指向document”);<br>  }<br>}, false);</p>\n<p>3.事件对象event的属性方法的差别</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">IE</th>\n<th style=\"text-align:left\">DOM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cancelBubble = true</td>\n<td style=\"text-align:left\">stopPropagation() //停止冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">returnValue = false</td>\n<td style=\"text-align:left\">preventDefault() //阻止元素默认事件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">srcEelement</td>\n<td style=\"text-align:left\">target //事件目标</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IE和标准下兼容性的写法举例\"><a href=\"#IE和标准下兼容性的写法举例\" class=\"headerlink\" title=\"IE和标准下兼容性的写法举例\"></a>IE和标准下兼容性的写法举例</h3><p>var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>var target = ev.srcElement||ev.target</p>\n<h3 id=\"get和post的区别\"><a href=\"#get和post的区别\" class=\"headerlink\" title=\"get和post的区别\"></a>get和post的区别</h3><ul>\n<li><p>GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，以?分割URL和传输数据，参数之间以&amp;相连。POST把提交的数据则放置在是HTTP包的Request body包体中。</p>\n</li>\n<li><p>GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB。</p>\n</li>\n<li><p>在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。</p>\n</li>\n<li><p>POST的安全性要比GET的安全性高。</p>\n</li>\n<li><p>Get是向服务器发送取数据的一种请求，而Post是向服务器提交数据的一种请求。</p>\n</li>\n</ul>\n<h3 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h3><p>call和apply方法都是用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<p>唯一区别就是call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。</p>\n<p>具体联系和区别，点击<a href=\"https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#call和apply\">链接</a>查看</p>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>\n<h3 id=\"阻止事件冒泡和默认事件\"><a href=\"#阻止事件冒泡和默认事件\" class=\"headerlink\" title=\"阻止事件冒泡和默认事件\"></a>阻止事件冒泡和默认事件</h3><p>1.阻止事件冒泡,使成为捕获型事件触发机制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> stopBubble(e) &#123; </div><div class=\"line\">\t//如果提供了事件对象，则这是一个非IE浏览器</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.stopPropagation)</div><div class=\"line\">\t\t//因此它支持W3C的stopPropagation()方法</div><div class=\"line\">\t\te.stopPropagation();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t//否则，我们需要使用IE的方式来取消事件冒泡</div><div class=\"line\">\t\twindow.event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.停止默认事件默认行为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//阻止浏览器的默认行为 </div><div class=\"line\"><span class=\"keyword\">function</span> stopDefault( e ) &#123; </div><div class=\"line\">\t//阻止默认浏览器动作(W3C)</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.preventDefault)</div><div class=\"line\">\t\te.preventDefault();</div><div class=\"line\">\t\t//IE中阻止函数器默认动作的方式</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\twindow.event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</div><div class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">\t&lt;script src=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">\t&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">\t\t$(document).ready(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'div.c1'</span>).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了div C1'</span>);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'div.c2'</span>).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了div C2'</span>);stopBubble(e);&#125;);</div><div class=\"line\">\t\t\t$(document).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了document'</span>);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).val(<span class=\"string\">'123'</span>);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).click(<span class=\"keyword\">function</span>(e)&#123;stopBubble(e);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).keydown(<span class=\"keyword\">function</span>(e)&#123;stopDefault(e);alert(<span class=\"string\">'按下了键值'</span>+e.keyCode); &#125;);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t<span class=\"keyword\">function</span> stopBubble(e) &#123;</div><div class=\"line\">\t\t\t//如果提供了事件对象，则这是一个非IE浏览器</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.stopPropagation )</div><div class=\"line\">\t\t\t\t//因此它支持W3C的stopPropagation()方法</div><div class=\"line\">\t\t\t\te.stopPropagation();</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t//否则，我们需要使用IE的方式来取消事件冒泡</div><div class=\"line\">\t\t\t\twindow.event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//阻止浏览器的默认行为</div><div class=\"line\">\t\t<span class=\"keyword\">function</span> stopDefault( e ) &#123;</div><div class=\"line\">\t\t\t//阻止默认浏览器动作(W3C)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.preventDefault )</div><div class=\"line\">\t\t\t\te.preventDefault();</div><div class=\"line\">\t\t\t\t//IE中阻止函数器默认动作的方式</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\twindow.event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"c1\"</span>&gt;测试的文字,这里是样式C1,单击以冒泡的形式触发事件.&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"c2\"</span>&gt;测试的文字,这里是样式C2,单击以捕获的形式触发事件.&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">\t&lt;div&gt;&lt;input id=<span class=\"string\">\"txt1\"</span> name=<span class=\"string\">\"Text1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> /&gt;&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"JSONP原理\"><a href=\"#JSONP原理\" class=\"headerlink\" title=\"JSONP原理\"></a>JSONP原理</h3><p>利用&lt;script&gt;标签没有跨域限制的“漏洞”,来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个&lt;script&gt;元素，地址指向第三方的API网址，例如：&lt;script src = &quot;http：//www.example.net/api?param1=1&amp;param2=2&quot;&gt;&lt;/script&gt;,并提供一个回调函数来接收数据(函数名可约定，或通过地址参数传递)。第三方产生的响应为json数据的包装(故称之为jsonp,即json padding)，形如：callback({“name”:”hax”,”gender”:”Male”}).这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。</p>\n<h3 id=\"js本地对象，内置对象和宿主对象\"><a href=\"#js本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"js本地对象，内置对象和宿主对象\"></a>js本地对象，内置对象和宿主对象</h3><p>宿主环境：一般宿主环境由外壳程序创建与维护，只要能提供js引擎执行的环境都可称之为外壳程序。如：web浏览器，一些桌面应用系统等。即由web浏览器或是这些桌面应用系统早就的环境即宿主环境。</p>\n<p>1.本地对象：独立于宿主环境的 ECMAScript 实现提供的对象。</p>\n<p>“本地对象”包括：</p>\n<p>Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError</p>\n<p>本地对象是ECMA-2定义的类（引用类型）。</p>\n<p>2.内置对象：由ECMAScript实现提供的，独立与宿主环境的所有对象，在ECMAScript程序开始执行时出现。</p>\n<p>Global 和 Math。</p>\n<p>内置对象其实也是本地对象。</p>\n<p>3.宿主对象</p>\n<p>由ECMAScript实现的宿主环境提供的对象，可以理解为：浏览器提供的对象。所有的BOM和DOM都是宿主对象。</p>\n<h3 id=\"onload和document-ready\"><a href=\"#onload和document-ready\" class=\"headerlink\" title=\"onload和document.ready\"></a>onload和document.ready</h3><p>window.onload方法必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>\n<p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>\n<p>也就是说，先执行ready方法，再执行onload方法。</p>\n<h3 id=\"“-”和”-”\"><a href=\"#“-”和”-”\" class=\"headerlink\" title=\"“==”和”===”\"></a>“==”和”===”</h3><p>“===”叫做严格运算符，”==”叫做相等运算符。</p>\n<p>严格运算符的运算规则如下:</p>\n<ul>\n<li>不同类型值如果两个值的类型不同，直接返回false。</li>\n<li>同一类的原始类型值同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。</li>\n<li>同一类的复合类型值两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。</li>\n<li>undefined和nullundefined 和 null 与自身严格相等。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(null === null);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(undefined === undefined);\t//<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。</p>\n<p>在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。</p>\n<p>类型转换规则如下：</p>\n<ul>\n<li>原始类型的值原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。</li>\n<li>对象与原始类型值比较对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。</li>\n<li>undefined和nullundefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。</li>\n<li>相等运算符的缺点相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(<span class=\"string\">''</span> == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(0 == <span class=\"string\">''</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(0 == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == <span class=\"string\">'false'</span>);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == undefined);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == null);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(null == undefined);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"string\">' \\t\\r\\n '</span> == 0);\t// <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>这就是为什么建议尽量不要使用相等运算符。至于使用相等运算符会不会对后续代码造成意外影响，答案是有可能会。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(!a)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"1\"</span>); //1</div><div class=\"line\">&#125;</div><div class=\"line\">var b = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(b == null)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"2\"</span>); //2</div><div class=\"line\">&#125;</div><div class=\"line\">var c = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(c === null)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"3\"</span>); //无输出</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也就是说当a为undefined时，输出的值会有变化，而在编程中对象变成undefined实在是太常见了。</p>\n<h3 id=\"Javascript同源策略\"><a href=\"#Javascript同源策略\" class=\"headerlink\" title=\"Javascript同源策略\"></a>Javascript同源策略</h3><ul>\n<li><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准，其目的是防止某个文档或脚本从多个不同源装载。</p>\n</li>\n<li><p>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>\n</li>\n<li><p>不遵循同源策略的标签：&lt;script&gt;,&lt;img&gt;,&lt;iframe&gt;中的src，href都可以任意链接网络资源。</p>\n</li>\n</ul>\n<p>本章完！</p>\n","excerpt":"","more":"<p>本文讲述了部分前端面试经常遇到的问题。</p>\n<h2 id=\"HTML和CSS\"><a href=\"#HTML和CSS\" class=\"headerlink\" title=\"HTML和CSS\"></a>HTML和CSS</h2><h3 id=\"对WEB标准以及W3C的理解\"><a href=\"#对WEB标准以及W3C的理解\" class=\"headerlink\" title=\"对WEB标准以及W3C的理解\"></a>对WEB标准以及W3C的理解</h3><p>1.写代码的时候注意</p>\n<ul>\n<li>标签闭合</li>\n<li>标签小写</li>\n<li>不能随意嵌套</li>\n</ul>\n<p>2.提高搜索引擎搜到几率</p>\n<p>mate中的name变量(其中keywords和description尤其重要)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meta name=<span class=\"string\">\"Keywords\"</span> Lang=<span class=\"string\">\"EN\"</span> Content=<span class=\"string\">\"vacation,greece,sunshine\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Description\"</span> Content=<span class=\"string\">\"你网页的简述\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Robots\"</span> Content=<span class=\"string\">\"All|None|Index|Noindex|Follow|Nofollow\"</span> </div><div class=\"line\">  [all：文件将被检索，且页面上的链接可以被查询； </div><div class=\"line\">  none：文件将不被检索，且页面上的链接不可以被查询；(和 <span class=\"string\">\"noindex, no follow\"</span> 起相同作用) </div><div class=\"line\">  index：文件将被检索；（让robot/spider登录） </div><div class=\"line\">  follow：页面上的链接可以被查询； </div><div class=\"line\">  noindex：文件将不被检索，但页面上的链接可以被查询；(不让robot/spider登录) </div><div class=\"line\">  nofollow：文件将不被检索，页面上的链接可以被查询。(不让robot/spider顺着此页的连接往下探找)]  </div><div class=\"line\">Meta name=<span class=\"string\">\"Author\"</span> Content=<span class=\"string\">\"张三，abc@sina.com\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Copyright\"</span> Content=<span class=\"string\">\"本页版权归Zerospace所有。All Rights Reserved\"</span></div><div class=\"line\">Meta name=<span class=\"string\">\"Generator\"</span> Content=<span class=\"string\">\"PCDATA|FrontPage|\"</span></div><div class=\"line\">META name=<span class=\"string\">\"revisit-after\"</span> CONTENT=<span class=\"string\">\"7 days\"</span></div></pre></td></tr></table></figure>\n<p>3.提高网页加载速度</p>\n<ul>\n<li>把js和css写到外部文档、实现结构行为表现的分离。</li>\n<li>去掉不必要的空格和注释等。</li>\n<li>尽量不使用table布局，尽量使用不嵌套的table布局。</li>\n<li>指定图像和table的大小。</li>\n<li>尽量不要使用图像来代替文本(例如在导航栏)。</li>\n<li>延迟js脚本加载，将脚本放在页面底部。</li>\n<li>尽量使用png格式的图像.</li>\n</ul>\n<h3 id=\"XHTML和HTML的区别\"><a href=\"#XHTML和HTML的区别\" class=\"headerlink\" title=\"XHTML和HTML的区别\"></a>XHTML和HTML的区别</h3><p>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言。</p>\n<p>最主要的不同：</p>\n<ul>\n<li>XHTML元素必须被正确地嵌套。<br>  标签由外到内，一层层包覆着，所以假设你先写div后写h1，结尾就要先写h1后写div。只要记住一个原则“先进后出”，先弹出的标签要后结尾。</li>\n<li>XHTML元素必须被关闭。<br>  当出现一个标签时，必须要有对应的结束标签，缺一不可，就像在任何程序语言中的括号一样。对于空标签，也必须使用结束标签，或者其开始标签必须使用”/&gt;”结尾。</li>\n<li>元素必须用小写字母。</li>\n<li>XHTML文档必须拥有根元素。<br>  所有的 XHTML 元素必须被嵌套于&lt;html&gt; 根元素中。其余所有的元素均可有子元素。子元素必须是成对的且被嵌套在其父元素之中。</li>\n</ul>\n<h3 id=\"严格模式与混杂模式\"><a href=\"#严格模式与混杂模式\" class=\"headerlink\" title=\"严格模式与混杂模式\"></a>严格模式与混杂模式</h3><p>1.Doctype的作用</p>\n<p>&lt;!DOCTYPE&gt;声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。&lt;!DOCTYPE&gt;声明必须在HTML文档的第一行，这并不是一个HTML标签。</p>\n<p>2.严格模式与混杂模式的来源</p>\n<p>当年Netscape4（网景公司早期的浏览器）和IE4（微软公司早期的浏览器）实现CSS机制时，并没有遵循W3C提出的标准。Netscape4 提供了糟糕的支持，而IE4 虽然接近标准，但依旧未能完全正确的支持标准。尽管IE 5 修复了IE4 许多的问题，但是依然延续CSS实现中的其它故障（主要是盒模型问题）。</p>\n<p>为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用css，因此大部分网站的css实现并不符合W3C规范的标准。</p>\n<p>然而随着标准一致性越来越重要，浏览器开发商不得不面临一个艰难的抉择：逐渐遵循W3C的标准是前进的方向。但是改变现有的 css，完全去遵循标准，会使许多旧网站或多或少受到破坏，如果浏览器突然以正确的方式解析现存的css，陈旧的网站的显示必然会受到影响。所以，所有的浏览器都需要提供两种模式：混杂模式服务于旧式规则，而严格模式服务于标准规则。</p>\n<p>3.概念</p>\n<p>严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。</p>\n<p>混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。</p>\n<p>4.区分</p>\n<p>浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。</p>\n<ul>\n<li>如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） </li>\n<li>包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） </li>\n<li>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）</li>\n<li>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）</li>\n</ul>\n<p>严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。</p>\n<p>5.两种模式不同点</p>\n<ul>\n<li>盒模型的高宽包含内边距padding和边框border<br>  在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。</li>\n<li>可以设置行内元素的高宽<br>  在严格模式下，给span等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。</li>\n<li>可设置百分比的高度<br>  在严格模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。</li>\n<li>用margin:0 auto设置水平居中在IE下会失效<br>  使用margin:0 auto在严格模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:body{text-align:center};#content{text-align:left}</li>\n<li>quirk模式下设置图片的padding会失效</li>\n<li>quirk模式下Table中的字体属性不能继承上层的设置</li>\n<li>quirk模式下white-space:pre会失效</li>\n</ul>\n<p>6.常用的具体声明</p>\n<ul>\n<li><p>HTML5(一种)：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML 4.01(三种)<br>  严格模式包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；过渡模式包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font），不允许框架集（Framesets）；框架模式等同于过渡模式，但允许框架集内容。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML 4.01 Strict ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</div><div class=\"line\">HTML 4.01 Transitional ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</div><div class=\"line\">HTML 4.01 Frameset ：</div><div class=\"line\">  &lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Frameset//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/html4/frameset.dtd\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>XHTML 1.0(四种)<br>  前三种模式同上，XHML 必须以格式正确的 XML 来编写标记。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">XHTML 1.0 Strict ：</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Strict//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.0 Transitional ：</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span> <span class=\"string\">\" http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.0 Frameset： </div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.0 Frameset//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"</span>&gt;</div><div class=\"line\">XHTML 1.1 的 DTD 等同于 XHTML 1.0 Strict，但允许添加模型。</div><div class=\"line\">  &lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD XHTML 1.1//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a>行内元素与块级元素</h3><p>1.区别</p>\n<ul>\n<li>默认情况下，多个行内元素会在同一行，水平排列。块级元素每个元素独占一行，多个块级元素垂直方向排列。</li>\n<li>块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。</li>\n<li>行内元素与块级元素属性的不同，主要是盒模型属性上。行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效</li>\n</ul>\n<p>2.示例</p>\n<p>行内元素：&lt;span&gt; &lt;select&gt; &lt;a&gt; &lt;img&gt; &lt;label&gt; &lt;textarea&gt;等。</p>\n<p>块级元素：&lt;div&gt; &lt;h1&gt; &lt;li&gt; &lt;p&gt; &lt;table&gt; &lt;fieldset&gt; &lt;caption&gt;等。</p>\n<p>3.相互转换</p>\n<p>行内元素转块级元素：定义该元素的css样式display:block;<br>块级元素转行内元素：定义该元素的css样式display:inline;</p>\n<h3 id=\"CSS盒模型\"><a href=\"#CSS盒模型\" class=\"headerlink\" title=\"CSS盒模型\"></a>CSS盒模型</h3><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"400\" height=\"260\"><path d=\"M0,0 L350,0 L350,250 L0,250 L0,0\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:2\" /><path d=\"M30,30 L320,30 L320,210 L30,210 L30,30\" style=\"fill:#0f0;stroke:black;stroke-width:1\" /><path d=\"M60,60 L290,60 L290,180 L60,180 L60,60\" style=\"fill:#fff;stroke:black;stroke-width:1\" /><path d=\"M90,90 L260,90 L260,150 L90,150 L90,90\" style=\"fill:#fff;stroke:black;stroke-width:1;stroke-dasharray:4\" /><text x=\"145\" y=\"20\" textLength=\"60\">margin</text><text x=\"145\" y=\"50\" textLength=\"60\">border</text><text x=\"145\" y=\"80\" textLength=\"60\">padding</text><text x=\"145\" y=\"110\" textLength=\"60\">content</text></svg>\n\n<p>1.说明</p>\n<ul>\n<li>Margin(外边距) - 盒子与其他元素之间的边距。</li>\n<li>Border(边框) - 盒子的边框宽度。</li>\n<li>Padding(内边距) - 盒子内边距，即边框与文字的间距。</li>\n<li>Content(内容) - 盒子的内容，显示文本和图像。</li>\n</ul>\n<p>2.元素的宽度和高度</p>\n<p>当指定一个CSS元素的宽度和高度属性时，只是设置了内容区域的宽度和高度。</p>\n<p>最终元素的总宽度计算公式是这样的：</p>\n<p><strong> 总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距 </strong></p>\n<p>元素的总高度最终计算公式是这样的：</p>\n<p><strong> 总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距 </strong></p>\n<p>3.浏览器的兼容性问题</p>\n<p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>\n<p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>\n<p>IE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。</p>\n<p>解决IE8及更早版本不兼容问题可以在HTML页面声明 &lt;!DOCTYPE html&gt;即可。</p>\n<h3 id=\"CSS引入方式及link和-import区别\"><a href=\"#CSS引入方式及link和-import区别\" class=\"headerlink\" title=\"CSS引入方式及link和@import区别\"></a>CSS引入方式及link和@import区别</h3><p>引入css共有四种方式：内联 内嵌 外链 导入。</p>\n<p>1.内联</p>\n<p>内联方式是指直接在标签元素的style属性中添加CSS样式。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"font-size: 20px\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>这通常是个很不好的书写方式，它只能改变当前标签的样式，如果希望多个div 拥有相同的样式，你不得不重复地为每个div添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。</p>\n<p>2.嵌入</p>\n<p>嵌入方式是指在页面head中的style标签下书写CSS代码。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;style&gt;</div><div class=\"line\">\t\t.content &#123;</div><div class=\"line\">\t\t\tbackground: red;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。</p>\n<p>3.链接</p>\n<p>链接方式是指在页面head中引入外部的CSS文件。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"style.css\"</span> /&gt;</div><div class=\"line\">&lt;/head&gt;</div></pre></td></tr></table></figure>\n<p>这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。</p>\n<p>4.导入</p>\n<p>导入方式指的是使用 CSS 规则引入外部 CSS 文件。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">\t@import url(style.css);</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>5.link和@import的区别</p>\n<ul>\n<li><p>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p>\n</li>\n<li><p>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>\n</li>\n<li><p>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p>\n</li>\n<li><p>link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>\n</li>\n</ul>\n<h3 id=\"CSS选择器及优先级\"><a href=\"#CSS选择器及优先级\" class=\"headerlink\" title=\"CSS选择器及优先级\"></a>CSS选择器及优先级</h3><p>1.CSS选择器<br>CSS选择器基本可以分为通配选择器，标签选择器，类选择器，ID选择器，简单属性选择，具体属性选择，根据部分属性值选择，特定属性选择，从结构上来分还有后代选择器，子元素选择器，相邻兄弟选择器以及伪类。</p>\n<ul>\n<li><p>包含选择符（又称后代选择符） E1 E2{}</p>\n</li>\n<li><p>子对象选择符 E1&gt;E2{}</p>\n</li>\n<li><p>ID选择符 #ID{}</p>\n</li>\n<li><p>类选择符 E.className{}</p>\n</li>\n<li><p>选择符分组 E1,E2,E3{}</p>\n</li>\n</ul>\n<p>2.CSS属性继承</p>\n<p>CSS属性继承即父元素定义的CSS属性，子元素也默认使用了该属性。</p>\n<p>可以继承的有 font-size font-family color等</p>\n<p>不可以继承的有 border padding margin background-color width height等</p>\n<p>3.CSS优先级</p>\n<ul>\n<li>相同权值情况下，CSS样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：</li>\n</ul>\n<p>优先级为：!important &gt; id &gt; class &gt; tag</p>\n<ul>\n<li>权值不同时，浏览器是根据权值来判断使用哪种css样式的，哪种样式权值高就使用哪种样式。</li>\n</ul>\n<p>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。</p>\n<ul>\n<li>!important的优先级比内联样式优先级高。</li>\n</ul>\n<h3 id=\"前端页面结构\"><a href=\"#前端页面结构\" class=\"headerlink\" title=\"前端页面结构\"></a>前端页面结构</h3><p>1.结构层(HTML)</p>\n<p>对网页内容做出了描述。</p>\n<p>2.表现层(CSS)</p>\n<p>对网页内容的样式进行渲染。</p>\n<p>3.行为层(Javascript)</p>\n<p>对网页的各种交互行为进行定义。</p>\n<h3 id=\"css的基本语句构成\"><a href=\"#css的基本语句构成\" class=\"headerlink\" title=\"css的基本语句构成\"></a>css的基本语句构成</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">自定义样式名称 &#123;</div><div class=\"line\">\t属性1:值1;</div><div class=\"line\">\t属性2:值2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"常见浏览器及内核\"><a href=\"#常见浏览器及内核\" class=\"headerlink\" title=\"常见浏览器及内核\"></a>常见浏览器及内核</h3><ul>\n<li>IE浏览器(Ie内核、Trident内核)</li>\n<li>Firefox浏览器(Gecko)</li>\n<li>谷歌浏览器(webkit)</li>\n<li>opear浏览器(Presto)</li>\n<li>Safari浏览器(webkit)</li>\n</ul>\n<h3 id=\"几种IE6的BUG及解决方法\"><a href=\"#几种IE6的BUG及解决方法\" class=\"headerlink\" title=\"几种IE6的BUG及解决方法\"></a>几种IE6的BUG及解决方法</h3><ul>\n<li><p>IE6怪异解析之padding与border算入宽高<br>  原因：未加文档声明造成非盒模型解析<br>  解决方法：加入文档声明&lt;!doctype html&gt;</p>\n</li>\n<li><p>IE6在块元素、左右浮动、设定marin时造成margin双倍(双边距)<br>  解决方法：display:inline</p>\n</li>\n<li><p>内部盒模型超出父级时，父级被撑大<br>  解决方法：父标签使用overflow:hidden</p>\n</li>\n<li><p>line-height默认行高bug<br>  解决方法：line-height设值</p>\n</li>\n<li><p>行标签之间会有一小段空白<br>  解决方法：float或结构并排(可读性差，不建议)</p>\n</li>\n<li><p>标签高度无法小于19px<br>  解决方法：overflow: hidden;</p>\n</li>\n<li><p>左浮元素margin-bottom失效<br>  解决方法：<br>  1.显示设置高度<br>  2.父标签设置_padding-bottom代替子标签的margin-bottom<br>  3.再放个标签让父标签浮动，子标签margin-bottom，即(margin-bottom与float不同时作用于一个标签)</p>\n</li>\n<li><p>img于块元素中，底边多出空白<br>  解决方法：父级设置overflow: hidden; 或 img { display: block; } 或 _margin: -5px;</p>\n</li>\n<li><p>li之间会有间距<br>  解决方法：float: left;</p>\n</li>\n<li><p>块元素中有文字及右浮动的行元素，行元素换行<br>  解决方法：将行元素置于块元素内的文字前</p>\n</li>\n<li><p>position下的left，bottom错位<br>  解决方法：为父级(relative层)设置宽高或添加*zoom:1</p>\n</li>\n<li><p>子级中有设置position，则父级overflow失效<br>  解决方法：为父级设置position:relative</p>\n</li>\n</ul>\n<h3 id=\"title与alt的区别\"><a href=\"#title与alt的区别\" class=\"headerlink\" title=\"title与alt的区别\"></a>title与alt的区别</h3><p>Alt：当图片不显示时，显示alt中的内容。</p>\n<p>Title：为元素提供信息，鼠标悬停在该元素时，等待1s左右，显示title中的内容。</p>\n<h3 id=\"css中的reset\"><a href=\"#css中的reset\" class=\"headerlink\" title=\"css中的reset\"></a>css中的reset</h3><p>1.常用的CSS reset</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">html, body, div, span, applet, object, iframe, h1, h2, h3, </div><div class=\"line\">h4, h5, h6, p, blockquote, pre, a, abbr, acronym, </div><div class=\"line\">address, big, cite, code, del, dfn, em, font, img, ins, </div><div class=\"line\">kbd, q, s, samp, small, strike, strong, sub, sup, tt, </div><div class=\"line\">var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, </div><div class=\"line\">table, caption, tbody, tfoot, thead, tr, th, td &#123; </div><div class=\"line\">  margin: 0; </div><div class=\"line\">  padding: 0; </div><div class=\"line\">  border: 0; </div><div class=\"line\">  outline: 0; </div><div class=\"line\">  font-weight: inherit; </div><div class=\"line\">  font-style: inherit; </div><div class=\"line\">  font-size: 100%; </div><div class=\"line\">  font-family: inherit; </div><div class=\"line\">  vertical-align: baseline; </div><div class=\"line\">&#125; </div><div class=\"line\">:focus &#123;</div><div class=\"line\">  outline: 0;</div><div class=\"line\">&#125; </div><div class=\"line\">a, a:link, a:visited, a:hover, a:active&#123;</div><div class=\"line\">  text-decoration:none</div><div class=\"line\">&#125; </div><div class=\"line\">table &#123;</div><div class=\"line\">  border-collapse: separate;</div><div class=\"line\">  border-spacing: 0;</div><div class=\"line\">&#125; </div><div class=\"line\">th, td &#123;</div><div class=\"line\">  text-align: left;</div><div class=\"line\">  font-weight: normal;</div><div class=\"line\">&#125; </div><div class=\"line\">img, iframe &#123;</div><div class=\"line\">  border: none;</div><div class=\"line\">  text-decoration:none;</div><div class=\"line\">&#125; </div><div class=\"line\">ol, ul &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">&#125; </div><div class=\"line\">input, textarea, select, button &#123;</div><div class=\"line\">  font-size: 100%;</div><div class=\"line\">  font-family: inherit;</div><div class=\"line\">&#125; </div><div class=\"line\">select &#123;</div><div class=\"line\">  margin: inherit;</div><div class=\"line\">&#125; </div><div class=\"line\">hr &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">  border: 0;</div><div class=\"line\">  color: <span class=\"comment\">#000;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#000;</span></div><div class=\"line\">  height: 1px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.CSS reset作用</p>\n<p>在 HTML标签在浏览器里有默认的样式，不同浏览器的默认样式之间也会有差别。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最简单的做法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。</p>\n<h3 id=\"CSS-sprites\"><a href=\"#CSS-sprites\" class=\"headerlink\" title=\"CSS sprites\"></a>CSS sprites</h3><p>1.CSS Sprites简介</p>\n<p>客户端每显示一张图片都会向服务器发送请求，而图片越多请求次数越多，造成延迟的可能性也就越大，给服务器造成的压力也很大，所以通过CSS Sprites技术将多张小图片整合为一张图片，减少对服务器的压力。</p>\n<p>2.CSS Sprites原理</p>\n<p>CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。</p>\n<p>3.优缺点</p>\n<p><strong> 优点 </strong></p>\n<ul>\n<li><p>利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；</p>\n</li>\n<li><p>CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p>\n</li>\n<li><p>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</p>\n</li>\n<li><p>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便s。</p>\n</li>\n</ul>\n<p><strong> 缺点 </strong></p>\n<ul>\n<li><p>在图片合并的时候，要把多张图片有序的合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景；这些还好，最痛苦的是在宽屏，高分辨率的屏幕下的自适应页面，你的图片如果不够宽，很容易出现背景断裂；</p>\n</li>\n<li><p>CSS Sprites在开发的时候比较麻烦，要通过photoshop或其他工具测量计算每一个背景单元的精确位置，非常繁琐。</p>\n</li>\n<li><p>CSS Sprites在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片，无需改的地方最好不要动，这样避免改动更多的css，如果在原来的地方放不下，又只能往下加图片，这样图片的字节就增加了，还要改动css。</p>\n</li>\n</ul>\n<h3 id=\"对网站优化的解决方案\"><a href=\"#对网站优化的解决方案\" class=\"headerlink\" title=\"对网站优化的解决方案\"></a>对网站优化的解决方案</h3><ul>\n<li>尽可能减少http请求次数，将css, js, 图片各自合并</li>\n<li>使用CDN托管，降低通信距离</li>\n<li>添加Expire/Cache-Control头，提供缓存</li>\n<li>启用Gzip压缩文件</li>\n<li>将css放在页面最上面</li>\n<li>将script放在页面最下面</li>\n<li>避免在css中使用表达式</li>\n<li>将css, js都放在外部文件中</li>\n<li>减少DNS查询</li>\n<li>最小化css, js，减小文件体积</li>\n<li>避免重定向</li>\n<li>移除重复脚本</li>\n<li>配置实体标签ETag</li>\n<li>使用AJAX缓存，让网站内容分批加载，局部更新</li>\n</ul>\n<h3 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h3><p>1.什么是HTML语义化</p>\n<p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p>\n<p>2.为什么要语义化？</p>\n<ul>\n<li>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；</li>\n<li>用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；</li>\n<li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li>\n<li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li>\n<li>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</li>\n</ul>\n<p>3.写HTML代码时应注意什么</p>\n<ul>\n<li>尽可能少的使用无语义的标签div和span；</li>\n<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>\n<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>\n<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>\n<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>\n<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li>\n<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li>\n</ul>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。<br>而且同样的代码，在各种浏览器中显示效果也有可能不相同，这样让清除浮动更难了。</p>\n<ul>\n<li>父级div定义height</li>\n<li>结尾处加空div标签clear:both</li>\n<li>父级div定义伪类:after和zoom</li>\n<li>父级div定义overflow:hidden</li>\n<li>父级div定义overflow:auto</li>\n<li>父级div也一起浮动</li>\n<li>父级div定义display:table</li>\n<li>结尾处加br标签clear:both</li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"Javascript数据类型\"><a href=\"#Javascript数据类型\" class=\"headerlink\" title=\"Javascript数据类型\"></a>Javascript数据类型</h3><p>1.Javascript共有7种数据类型</p>\n<p>基本数据类型：Boolean、Number和String。</p>\n<p>复杂数据类型：object。</p>\n<p>特殊数据类型：Undefined、Null。</p>\n<p>2.typeof函数可以返回6种数据类型</p>\n<p>string、number、object、boolean、undefined、function。</p>\n<p>可以点击<a href=\"https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#typeof和instanceof\">链接</a>查看详情</p>\n<h3 id=\"显式类型转换与隐式类型转换\"><a href=\"#显式类型转换与隐式类型转换\" class=\"headerlink\" title=\"显式类型转换与隐式类型转换\"></a>显式类型转换与隐式类型转换</h3><p>Javascript属于弱类型语言，声明变量不需要指定类型，对变量赋值也不需要类型检查，但是在有的情况下需要特别转换变量的类型。</p>\n<p>1.显式类型转换</p>\n<p>如下函数属于显式类型转换函数：</p>\n<ul>\n<li>toString() 转换为字符串</li>\n<li>parseInt() 转换为数字</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>等</li>\n</ul>\n<p>2.隐式类型转换</p>\n<p>如下函数属于显式类型转换函数：</p>\n<ul>\n<li>‘+’加法运算符</li>\n<li>==</li>\n</ul>\n<p>有的人可能看不太懂为什么 “+” 和 “==” 也是隐式类型转换，我举一个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var m = 5 + <span class=\"literal\">true</span>;</div><div class=\"line\">console.log(m);\t//6</div><div class=\"line\"></div><div class=\"line\">console.log(1 == <span class=\"literal\">true</span>);\t// <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>也就是说，”+”运算符将true转换成了number类型的1，所以可以和5相加，得到结果6。而”==”运算符把true转换成了1，然后来比较，即: 1 == 1 ,所以为true。</p>\n<h3 id=\"split-join-reverse-函数\"><a href=\"#split-join-reverse-函数\" class=\"headerlink\" title=\"split(),join(),reverse()函数\"></a>split(),join(),reverse()函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = new Array();</div><div class=\"line\">a[0] = <span class=\"string\">\"HTML\"</span>;</div><div class=\"line\">a[1] = <span class=\"string\">\"CSS\"</span>;</div><div class=\"line\">a[2] = <span class=\"string\">\"JavaScript\"</span>;</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"JavaScript\"</span>]</div><div class=\"line\">console.log(a.join());\t// HTML,CSS,JavaScript</div><div class=\"line\">console.log(a.reverse());\t// [<span class=\"string\">\"JavaScript\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"HTML\"</span>]</div><div class=\"line\">var b = <span class=\"string\">'hello JavaScript'</span>;</div><div class=\"line\">console.log(b.split(<span class=\"string\">\"\"</span>));\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\" \"</span>, <span class=\"string\">\"J\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"t\"</span>]</div><div class=\"line\">console.log(b.split(<span class=\"string\">\" \"</span>));\t// [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"JavaScript\"</span>]</div></pre></td></tr></table></figure>\n<p>由实例可以看出：</p>\n<ul>\n<li>split函数用来将字符串分割为数组</li>\n<li>join函数可以将数组中的所有元素拼接为一个字符串</li>\n<li>reverse函数用来将原数组中元素的顺序颠倒。</li>\n</ul>\n<h3 id=\"数组方法pop-push-unshift-shift\"><a href=\"#数组方法pop-push-unshift-shift\" class=\"headerlink\" title=\"数组方法pop,push,unshift,shift\"></a>数组方法pop,push,unshift,shift</h3><ul>\n<li>push()方法</li>\n</ul>\n<p>用于向数组末尾添加元素,并返回新数组的长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>];</div><div class=\"line\">var m = a.push(<span class=\"string\">'o'</span>);</div><div class=\"line\">console.log(m);\t// 5</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>pop()方法</li>\n</ul>\n<p>删除数组最后一个元素,并返回删除的元素。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.pop();</div><div class=\"line\">console.log(m);\t// o</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>unshift()方法</li>\n</ul>\n<p>用于向数组头部添加元素，并返回新数组的长度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.unshift(<span class=\"string\">'h'</span>);</div><div class=\"line\">console.log(m);\t// 5</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"h\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>shift()方法</li>\n</ul>\n<p>删除数组中的第一个元素，并返回删除的第一个元素的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>];</div><div class=\"line\">var m = a.shift();</div><div class=\"line\">console.log(m);\t// h</div><div class=\"line\">console.log(a);\t// [<span class=\"string\">\"e\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"o\"</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"事件绑定和普通事件\"><a href=\"#事件绑定和普通事件\" class=\"headerlink\" title=\"事件绑定和普通事件\"></a>事件绑定和普通事件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;button id=<span class=\"string\">\"btn\"</span>&gt;点击按钮&lt;/button&gt;</div><div class=\"line\">\t&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">\t\tvar btn = document.getElementById(<span class=\"string\">\"btn\"</span>);</div><div class=\"line\">\t\tbtn.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"普通事件1\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbtn.onclick = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"普通事件2\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"绑定事件1\"</span>);</div><div class=\"line\">\t\t&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\">\t\tbtn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\tconsole.log(<span class=\"string\">\"绑定事件2\"</span>);</div><div class=\"line\">\t\t&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码输出为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">普通2</div><div class=\"line\">绑定1</div><div class=\"line\">绑定2</div></pre></td></tr></table></figure>\n<p>由此可以得出结论：</p>\n<p>普通事件中的onclick只支持单个事件，之前的事件会被之后的onclick事件覆盖，而事件绑定中的addEventListener可以添加多个事件，之前的事件不会被覆盖。</p>\n<h3 id=\"IE和DOM事件流的区别\"><a href=\"#IE和DOM事件流的区别\" class=\"headerlink\" title=\"IE和DOM事件流的区别\"></a>IE和DOM事件流的区别</h3><p>1.参数的差别</p>\n<p>attachEvent()的第一个参数比addEventListener()的事件名多一个”on”，且没有第三个参数，因为IE事件模型只支持冒泡事件流;</p>\n<p>2.事件处理函数作用域的区别</p>\n<p>IE中事件处理程序处于全局作用域，其内的this会指向window;</p>\n<p>而用DOM（0或2）级事件的事件处理程序的作用域是元素作用域，其内的this指向其所属的元素.</p>\n<p>例:<br>document.addEventListener(“click”, function(){<br>  if(this == document){<br>    alert(“此时this指向document”);<br>  }<br>}, false);</p>\n<p>3.事件对象event的属性方法的差别</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">IE</th>\n<th style=\"text-align:left\">DOM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cancelBubble = true</td>\n<td style=\"text-align:left\">stopPropagation() //停止冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">returnValue = false</td>\n<td style=\"text-align:left\">preventDefault() //阻止元素默认事件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">srcEelement</td>\n<td style=\"text-align:left\">target //事件目标</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IE和标准下兼容性的写法举例\"><a href=\"#IE和标准下兼容性的写法举例\" class=\"headerlink\" title=\"IE和标准下兼容性的写法举例\"></a>IE和标准下兼容性的写法举例</h3><p>var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>var target = ev.srcElement||ev.target</p>\n<h3 id=\"get和post的区别\"><a href=\"#get和post的区别\" class=\"headerlink\" title=\"get和post的区别\"></a>get和post的区别</h3><ul>\n<li><p>GET请求的数据会附在URL之后(就是把数据放置在HTTP协议头中)，以?分割URL和传输数据，参数之间以&amp;相连。POST把提交的数据则放置在是HTTP包的Request body包体中。</p>\n</li>\n<li><p>GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB。</p>\n</li>\n<li><p>在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。</p>\n</li>\n<li><p>POST的安全性要比GET的安全性高。</p>\n</li>\n<li><p>Get是向服务器发送取数据的一种请求，而Post是向服务器提交数据的一种请求。</p>\n</li>\n</ul>\n<h3 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h3><p>call和apply方法都是用来调用一个对象的一个方法，以另一个对象来替换当前对象。</p>\n<p>唯一区别就是call方法的第二个参数及之后的参数可以是任意类型，而apply的第二个参数必须是数组形式。</p>\n<p>具体联系和区别，点击<a href=\"https://yk1062008412.github.io/2017/02/27/js容易混淆的几个函数/#call和apply\">链接</a>查看</p>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>\n<h3 id=\"阻止事件冒泡和默认事件\"><a href=\"#阻止事件冒泡和默认事件\" class=\"headerlink\" title=\"阻止事件冒泡和默认事件\"></a>阻止事件冒泡和默认事件</h3><p>1.阻止事件冒泡,使成为捕获型事件触发机制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> stopBubble(e) &#123; </div><div class=\"line\">\t//如果提供了事件对象，则这是一个非IE浏览器</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.stopPropagation)</div><div class=\"line\">\t\t//因此它支持W3C的stopPropagation()方法</div><div class=\"line\">\t\te.stopPropagation();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t//否则，我们需要使用IE的方式来取消事件冒泡</div><div class=\"line\">\t\twindow.event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.停止默认事件默认行为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//阻止浏览器的默认行为 </div><div class=\"line\"><span class=\"keyword\">function</span> stopDefault( e ) &#123; </div><div class=\"line\">\t//阻止默认浏览器动作(W3C)</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.preventDefault)</div><div class=\"line\">\t\te.preventDefault();</div><div class=\"line\">\t\t//IE中阻止函数器默认动作的方式</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\twindow.event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</div><div class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">\t&lt;script src=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">\t&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">\t\t$(document).ready(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'div.c1'</span>).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了div C1'</span>);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'div.c2'</span>).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了div C2'</span>);stopBubble(e);&#125;);</div><div class=\"line\">\t\t\t$(document).click(<span class=\"keyword\">function</span>(e)&#123;alert(<span class=\"string\">'单击了document'</span>);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).val(<span class=\"string\">'123'</span>);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).click(<span class=\"keyword\">function</span>(e)&#123;stopBubble(e);&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#txt1'</span>).keydown(<span class=\"keyword\">function</span>(e)&#123;stopDefault(e);alert(<span class=\"string\">'按下了键值'</span>+e.keyCode); &#125;);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t<span class=\"keyword\">function</span> stopBubble(e) &#123;</div><div class=\"line\">\t\t\t//如果提供了事件对象，则这是一个非IE浏览器</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.stopPropagation )</div><div class=\"line\">\t\t\t\t//因此它支持W3C的stopPropagation()方法</div><div class=\"line\">\t\t\t\te.stopPropagation();</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t//否则，我们需要使用IE的方式来取消事件冒泡</div><div class=\"line\">\t\t\t\twindow.event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//阻止浏览器的默认行为</div><div class=\"line\">\t\t<span class=\"keyword\">function</span> stopDefault( e ) &#123;</div><div class=\"line\">\t\t\t//阻止默认浏览器动作(W3C)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( e &amp;&amp; e.preventDefault )</div><div class=\"line\">\t\t\t\te.preventDefault();</div><div class=\"line\">\t\t\t\t//IE中阻止函数器默认动作的方式</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\twindow.event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"c1\"</span>&gt;测试的文字,这里是样式C1,单击以冒泡的形式触发事件.&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"c2\"</span>&gt;测试的文字,这里是样式C2,单击以捕获的形式触发事件.&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">\t&lt;div&gt;&lt;input id=<span class=\"string\">\"txt1\"</span> name=<span class=\"string\">\"Text1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> /&gt;&lt;/div&gt;&lt;hr/&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"JSONP原理\"><a href=\"#JSONP原理\" class=\"headerlink\" title=\"JSONP原理\"></a>JSONP原理</h3><p>利用&lt;script&gt;标签没有跨域限制的“漏洞”,来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个&lt;script&gt;元素，地址指向第三方的API网址，例如：&lt;script src = &quot;http：//www.example.net/api?param1=1&amp;param2=2&quot;&gt;&lt;/script&gt;,并提供一个回调函数来接收数据(函数名可约定，或通过地址参数传递)。第三方产生的响应为json数据的包装(故称之为jsonp,即json padding)，形如：callback({“name”:”hax”,”gender”:”Male”}).这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。</p>\n<h3 id=\"js本地对象，内置对象和宿主对象\"><a href=\"#js本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"js本地对象，内置对象和宿主对象\"></a>js本地对象，内置对象和宿主对象</h3><p>宿主环境：一般宿主环境由外壳程序创建与维护，只要能提供js引擎执行的环境都可称之为外壳程序。如：web浏览器，一些桌面应用系统等。即由web浏览器或是这些桌面应用系统早就的环境即宿主环境。</p>\n<p>1.本地对象：独立于宿主环境的 ECMAScript 实现提供的对象。</p>\n<p>“本地对象”包括：</p>\n<p>Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError</p>\n<p>本地对象是ECMA-2定义的类（引用类型）。</p>\n<p>2.内置对象：由ECMAScript实现提供的，独立与宿主环境的所有对象，在ECMAScript程序开始执行时出现。</p>\n<p>Global 和 Math。</p>\n<p>内置对象其实也是本地对象。</p>\n<p>3.宿主对象</p>\n<p>由ECMAScript实现的宿主环境提供的对象，可以理解为：浏览器提供的对象。所有的BOM和DOM都是宿主对象。</p>\n<h3 id=\"onload和document-ready\"><a href=\"#onload和document-ready\" class=\"headerlink\" title=\"onload和document.ready\"></a>onload和document.ready</h3><p>window.onload方法必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>\n<p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>\n<p>也就是说，先执行ready方法，再执行onload方法。</p>\n<h3 id=\"“-”和”-”\"><a href=\"#“-”和”-”\" class=\"headerlink\" title=\"“==”和”===”\"></a>“==”和”===”</h3><p>“===”叫做严格运算符，”==”叫做相等运算符。</p>\n<p>严格运算符的运算规则如下:</p>\n<ul>\n<li>不同类型值如果两个值的类型不同，直接返回false。</li>\n<li>同一类的原始类型值同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。</li>\n<li>同一类的复合类型值两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。</li>\n<li>undefined和nullundefined 和 null 与自身严格相等。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(null === null);\t//<span class=\"literal\">true</span></div><div class=\"line\">console.log(undefined === undefined);\t//<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。</p>\n<p>在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。</p>\n<p>类型转换规则如下：</p>\n<ul>\n<li>原始类型的值原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。</li>\n<li>对象与原始类型值比较对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。</li>\n<li>undefined和nullundefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。</li>\n<li>相等运算符的缺点相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(<span class=\"string\">''</span> == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(0 == <span class=\"string\">''</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(0 == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == <span class=\"string\">'false'</span>);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == <span class=\"string\">'0'</span>);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == undefined);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(<span class=\"literal\">false</span> == null);\t// <span class=\"literal\">false</span></div><div class=\"line\">console.log(null == undefined);\t// <span class=\"literal\">true</span></div><div class=\"line\">console.log(<span class=\"string\">' \\t\\r\\n '</span> == 0);\t// <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>这就是为什么建议尽量不要使用相等运算符。至于使用相等运算符会不会对后续代码造成意外影响，答案是有可能会。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(!a)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"1\"</span>); //1</div><div class=\"line\">&#125;</div><div class=\"line\">var b = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(b == null)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"2\"</span>); //2</div><div class=\"line\">&#125;</div><div class=\"line\">var c = undefined;</div><div class=\"line\"><span class=\"keyword\">if</span>(c === null)&#123;</div><div class=\"line\">\tconsole.log(<span class=\"string\">\"3\"</span>); //无输出</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也就是说当a为undefined时，输出的值会有变化，而在编程中对象变成undefined实在是太常见了。</p>\n<h3 id=\"Javascript同源策略\"><a href=\"#Javascript同源策略\" class=\"headerlink\" title=\"Javascript同源策略\"></a>Javascript同源策略</h3><ul>\n<li><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准，其目的是防止某个文档或脚本从多个不同源装载。</p>\n</li>\n<li><p>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>\n</li>\n<li><p>不遵循同源策略的标签：&lt;script&gt;,&lt;img&gt;,&lt;iframe&gt;中的src，href都可以任意链接网络资源。</p>\n</li>\n</ul>\n<p>本章完！</p>\n"},{"title":"数据结构的相互转换","date":"2017-04-06T02:30:43.000Z","_content":"\n本文介绍 Map与Array,Object,JSON之间的相互转换\n\n## Map转为Array\n\nMap转为Array,直接使用es6引入的扩展运算符(...)。\n\n``` bash\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\nconsole.log(myMap);\t\t\t// Map {true => 7, Object {foo: 3} => ['abc']}\nconsole.log([...myMap]);\t// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]\n```\n\n## Array转为Map\n\n将Array转入Map构造函数，就可以转为Map。\n\n``` bash\nlet myMap = new Map([[true, 7], [{foo: 3}, ['abc']]])\nconsole.log(myMap);\t\t\t// Map {true => 7, Object {foo: 3} => ['abc']}\n```\n\n## Map转为Object\n\n如果所有Map的键都是字符串，它可以转为Object。\n\n``` bash\n方法:\nfunction strMapToObj(strMap) {\n\tlet obj = Object.create(null);\n\tfor (let [k,v] of strMap) {\n\t\tobj[k] = v;\n\t}\n\treturn obj;\n}\n使用:\nlet myMap = new Map().set('yes', true).set('no', false);\nconsole.log(myMap);\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\nlet obj = strMapToObj(myMap);\nconsole.log(obj);\t\t\t\t// Object {yes: true, no: false}\n```\n\n## Object转为Map\n\n``` bash\nfunction objToStrMap(obj) {\n\tlet strMap = new Map();\n\tfor (let k of Object.keys(obj)) {\n\t\tstrMap.set(k, obj[k]);\n\t}\n\treturn strMap;\n}\nlet obj = {yes: true, no: false};\nconsole.log(obj);\t\t\t\t// Object {yes: true, no: false}\nlet myMap = objToStrMap(obj);\nconsole.log(myMap);\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\n```\n\n## Map转为JSON\n\nMap转为JSON要区分两种情况。一种情况是，Map的键名都是字符串，这时可以选择转为对象JSON.\n\n另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。\n\n### Map转为对象JSON\n\n``` bash\nfunction strMapToJson(strMap) {\n\tlet obj = Object.create(null);\n\tfor (let [k,v] of strMap) {\n\t\tobj[k] = v;\n\t}\n\treturn JSON.stringify(obj);\n}\nlet myMap = new Map().set('yes', true).set('no', false);\nconsole.log(myMap);\t\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\nlet objJson = strMapToJson(myMap);\nconsole.log(objJson);\t\t\t\t// {\"yes\":true,\"no\":false}\n```\n\n### Map转为数组JSON\n\n``` bash\nfunction mapToArrayJson(map) {\n\treturn JSON.stringify([...map]);\n}\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\nconsole.log(myMap);\t\t\t\t\t// Map {true => 7, Object {foo: 3} => [\"abc\"]}\nlet arrJson = mapToArrayJson(myMap);\nconsole.log(arrJson);\t\t\t\t// [[true,7],[{\"foo\":3},[\"abc\"]]]\n```\n\n## JSON转为Map\n\nJSON转为Map，正常情况下，所有键名都是字符串。\n\n但是，有一种特殊情况，整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为Map。这往往是数组转为JSON的逆操作。\n\n### JSON键名是字符串\n\n``` bash\nfunction jsonToStrMap(jsonStr) {\n\tlet obj = JSON.parse(jsonStr);\n\tlet strMap = new Map();\n\tfor (let k of Object.keys(obj)) {\n\t\tstrMap.set(k, obj[k]);\n\t}\n\treturn strMap;\n}\nlet strJson = '{\"yes\":true,\"no\":false}';\nconsole.log(strJson);\t\t\t\t// {\"yes\":true,\"no\":false}\nlet myMap = jsonToStrMap(strJson);\nconsole.log(myMap);\t\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\n```\n\n### JSON数组\n\n``` bash\nfunction jsonToMap(jsonStr) {\n\treturn new Map(JSON.parse(jsonStr));\n}\nlet arrJson = '[[true,7],[{\"foo\":3},[\"abc\"]]]';\nconsole.log(arrJson);\t\t\t// [[true,7],[{\"foo\":3},[\"abc\"]]]\nlet myMap = jsonToMap(arrJson);\nconsole.log(myMap);\t\t\t\t// Map {true => 7, Object {foo: 3} => [\"abc\"]}\n```\n\n本文完！\n","source":"_posts/数据结构的相互转换.md","raw":"---\ntitle: 数据结构的相互转换\ndate: 2017-04-06 10:30:43\ncategories: \"ECMAScript 6\"\ntags:\n\t- ES6\n\t- Javascript\n---\n\n本文介绍 Map与Array,Object,JSON之间的相互转换\n\n## Map转为Array\n\nMap转为Array,直接使用es6引入的扩展运算符(...)。\n\n``` bash\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\nconsole.log(myMap);\t\t\t// Map {true => 7, Object {foo: 3} => ['abc']}\nconsole.log([...myMap]);\t// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]\n```\n\n## Array转为Map\n\n将Array转入Map构造函数，就可以转为Map。\n\n``` bash\nlet myMap = new Map([[true, 7], [{foo: 3}, ['abc']]])\nconsole.log(myMap);\t\t\t// Map {true => 7, Object {foo: 3} => ['abc']}\n```\n\n## Map转为Object\n\n如果所有Map的键都是字符串，它可以转为Object。\n\n``` bash\n方法:\nfunction strMapToObj(strMap) {\n\tlet obj = Object.create(null);\n\tfor (let [k,v] of strMap) {\n\t\tobj[k] = v;\n\t}\n\treturn obj;\n}\n使用:\nlet myMap = new Map().set('yes', true).set('no', false);\nconsole.log(myMap);\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\nlet obj = strMapToObj(myMap);\nconsole.log(obj);\t\t\t\t// Object {yes: true, no: false}\n```\n\n## Object转为Map\n\n``` bash\nfunction objToStrMap(obj) {\n\tlet strMap = new Map();\n\tfor (let k of Object.keys(obj)) {\n\t\tstrMap.set(k, obj[k]);\n\t}\n\treturn strMap;\n}\nlet obj = {yes: true, no: false};\nconsole.log(obj);\t\t\t\t// Object {yes: true, no: false}\nlet myMap = objToStrMap(obj);\nconsole.log(myMap);\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\n```\n\n## Map转为JSON\n\nMap转为JSON要区分两种情况。一种情况是，Map的键名都是字符串，这时可以选择转为对象JSON.\n\n另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。\n\n### Map转为对象JSON\n\n``` bash\nfunction strMapToJson(strMap) {\n\tlet obj = Object.create(null);\n\tfor (let [k,v] of strMap) {\n\t\tobj[k] = v;\n\t}\n\treturn JSON.stringify(obj);\n}\nlet myMap = new Map().set('yes', true).set('no', false);\nconsole.log(myMap);\t\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\nlet objJson = strMapToJson(myMap);\nconsole.log(objJson);\t\t\t\t// {\"yes\":true,\"no\":false}\n```\n\n### Map转为数组JSON\n\n``` bash\nfunction mapToArrayJson(map) {\n\treturn JSON.stringify([...map]);\n}\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\nconsole.log(myMap);\t\t\t\t\t// Map {true => 7, Object {foo: 3} => [\"abc\"]}\nlet arrJson = mapToArrayJson(myMap);\nconsole.log(arrJson);\t\t\t\t// [[true,7],[{\"foo\":3},[\"abc\"]]]\n```\n\n## JSON转为Map\n\nJSON转为Map，正常情况下，所有键名都是字符串。\n\n但是，有一种特殊情况，整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为Map。这往往是数组转为JSON的逆操作。\n\n### JSON键名是字符串\n\n``` bash\nfunction jsonToStrMap(jsonStr) {\n\tlet obj = JSON.parse(jsonStr);\n\tlet strMap = new Map();\n\tfor (let k of Object.keys(obj)) {\n\t\tstrMap.set(k, obj[k]);\n\t}\n\treturn strMap;\n}\nlet strJson = '{\"yes\":true,\"no\":false}';\nconsole.log(strJson);\t\t\t\t// {\"yes\":true,\"no\":false}\nlet myMap = jsonToStrMap(strJson);\nconsole.log(myMap);\t\t\t\t\t// Map {\"yes\" => true, \"no\" => false}\n```\n\n### JSON数组\n\n``` bash\nfunction jsonToMap(jsonStr) {\n\treturn new Map(JSON.parse(jsonStr));\n}\nlet arrJson = '[[true,7],[{\"foo\":3},[\"abc\"]]]';\nconsole.log(arrJson);\t\t\t// [[true,7],[{\"foo\":3},[\"abc\"]]]\nlet myMap = jsonToMap(arrJson);\nconsole.log(myMap);\t\t\t\t// Map {true => 7, Object {foo: 3} => [\"abc\"]}\n```\n\n本文完！\n","slug":"数据结构的相互转换","published":1,"updated":"2017-04-06T03:28:28.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxzn000t1gwdi2gvn0g1","content":"<p>本文介绍 Map与Array,Object,JSON之间的相互转换</p>\n<h2 id=\"Map转为Array\"><a href=\"#Map转为Array\" class=\"headerlink\" title=\"Map转为Array\"></a>Map转为Array</h2><p>Map转为Array,直接使用es6引入的扩展运算符(…)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"literal\">true</span>, 7).set(&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]);</div><div class=\"line\">console.log(myMap);\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">'abc'</span>]&#125;</div><div class=\"line\">console.log([...myMap]);\t// [ [ <span class=\"literal\">true</span>, 7 ], [ &#123; foo: 3 &#125;, [ <span class=\"string\">'abc'</span> ] ] ]</div></pre></td></tr></table></figure>\n<h2 id=\"Array转为Map\"><a href=\"#Array转为Map\" class=\"headerlink\" title=\"Array转为Map\"></a>Array转为Map</h2><p>将Array转入Map构造函数，就可以转为Map。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map([[<span class=\"literal\">true</span>, 7], [&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]]])</div><div class=\"line\">console.log(myMap);\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">'abc'</span>]&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Map转为Object\"><a href=\"#Map转为Object\" class=\"headerlink\" title=\"Map转为Object\"></a>Map转为Object</h2><p>如果所有Map的键都是字符串，它可以转为Object。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法:</div><div class=\"line\"><span class=\"keyword\">function</span> strMapToObj(strMap) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = Object.create(null);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> [k,v] of strMap) &#123;</div><div class=\"line\">\t\tobj[k] = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\">使用:</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"string\">'yes'</span>, <span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> obj = strMapToObj(myMap);</div><div class=\"line\">console.log(obj);\t\t\t\t// Object &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Object转为Map\"><a href=\"#Object转为Map\" class=\"headerlink\" title=\"Object转为Map\"></a>Object转为Map</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> objToStrMap(obj) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> strMap = new Map();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> k of Object.keys(obj)) &#123;</div><div class=\"line\">\t\tstrMap.set(k, obj[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> strMap;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> obj = &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;;</div><div class=\"line\">console.log(obj);\t\t\t\t// Object &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = objToStrMap(obj);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Map转为JSON\"><a href=\"#Map转为JSON\" class=\"headerlink\" title=\"Map转为JSON\"></a>Map转为JSON</h2><p>Map转为JSON要区分两种情况。一种情况是，Map的键名都是字符串，这时可以选择转为对象JSON.</p>\n<p>另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。</p>\n<h3 id=\"Map转为对象JSON\"><a href=\"#Map转为对象JSON\" class=\"headerlink\" title=\"Map转为对象JSON\"></a>Map转为对象JSON</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> strMapToJson(strMap) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = Object.create(null);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> [k,v] of strMap) &#123;</div><div class=\"line\">\t\tobj[k] = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> JSON.stringify(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"string\">'yes'</span>, <span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> objJson = strMapToJson(myMap);</div><div class=\"line\">console.log(objJson);\t\t\t\t// &#123;<span class=\"string\">\"yes\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"no\"</span>:<span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Map转为数组JSON\"><a href=\"#Map转为数组JSON\" class=\"headerlink\" title=\"Map转为数组JSON\"></a>Map转为数组JSON</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> mapToArrayJson(map) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> JSON.stringify([...map]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"literal\">true</span>, 7).set(&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">\"abc\"</span>]&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> arrJson = mapToArrayJson(myMap);</div><div class=\"line\">console.log(arrJson);\t\t\t\t// [[<span class=\"literal\">true</span>,7],[&#123;<span class=\"string\">\"foo\"</span>:3&#125;,[<span class=\"string\">\"abc\"</span>]]]</div></pre></td></tr></table></figure>\n<h2 id=\"JSON转为Map\"><a href=\"#JSON转为Map\" class=\"headerlink\" title=\"JSON转为Map\"></a>JSON转为Map</h2><p>JSON转为Map，正常情况下，所有键名都是字符串。</p>\n<p>但是，有一种特殊情况，整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为Map。这往往是数组转为JSON的逆操作。</p>\n<h3 id=\"JSON键名是字符串\"><a href=\"#JSON键名是字符串\" class=\"headerlink\" title=\"JSON键名是字符串\"></a>JSON键名是字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> jsonToStrMap(jsonStr) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = JSON.parse(jsonStr);</div><div class=\"line\">\t<span class=\"built_in\">let</span> strMap = new Map();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> k of Object.keys(obj)) &#123;</div><div class=\"line\">\t\tstrMap.set(k, obj[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> strMap;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> strJson = <span class=\"string\">'&#123;\"yes\":true,\"no\":false&#125;'</span>;</div><div class=\"line\">console.log(strJson);\t\t\t\t// &#123;<span class=\"string\">\"yes\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"no\"</span>:<span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = jsonToStrMap(strJson);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JSON数组\"><a href=\"#JSON数组\" class=\"headerlink\" title=\"JSON数组\"></a>JSON数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> jsonToMap(jsonStr) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> new Map(JSON.parse(jsonStr));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> arrJson = <span class=\"string\">'[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]'</span>;</div><div class=\"line\">console.log(arrJson);\t\t\t// [[<span class=\"literal\">true</span>,7],[&#123;<span class=\"string\">\"foo\"</span>:3&#125;,[<span class=\"string\">\"abc\"</span>]]]</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = jsonToMap(arrJson);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">\"abc\"</span>]&#125;</div></pre></td></tr></table></figure>\n<p>本文完！</p>\n","excerpt":"","more":"<p>本文介绍 Map与Array,Object,JSON之间的相互转换</p>\n<h2 id=\"Map转为Array\"><a href=\"#Map转为Array\" class=\"headerlink\" title=\"Map转为Array\"></a>Map转为Array</h2><p>Map转为Array,直接使用es6引入的扩展运算符(…)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"literal\">true</span>, 7).set(&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]);</div><div class=\"line\">console.log(myMap);\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">'abc'</span>]&#125;</div><div class=\"line\">console.log([...myMap]);\t// [ [ <span class=\"literal\">true</span>, 7 ], [ &#123; foo: 3 &#125;, [ <span class=\"string\">'abc'</span> ] ] ]</div></pre></td></tr></table></figure>\n<h2 id=\"Array转为Map\"><a href=\"#Array转为Map\" class=\"headerlink\" title=\"Array转为Map\"></a>Array转为Map</h2><p>将Array转入Map构造函数，就可以转为Map。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map([[<span class=\"literal\">true</span>, 7], [&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]]])</div><div class=\"line\">console.log(myMap);\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">'abc'</span>]&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Map转为Object\"><a href=\"#Map转为Object\" class=\"headerlink\" title=\"Map转为Object\"></a>Map转为Object</h2><p>如果所有Map的键都是字符串，它可以转为Object。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">方法:</div><div class=\"line\"><span class=\"keyword\">function</span> strMapToObj(strMap) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = Object.create(null);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> [k,v] of strMap) &#123;</div><div class=\"line\">\t\tobj[k] = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\">使用:</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"string\">'yes'</span>, <span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> obj = strMapToObj(myMap);</div><div class=\"line\">console.log(obj);\t\t\t\t// Object &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Object转为Map\"><a href=\"#Object转为Map\" class=\"headerlink\" title=\"Object转为Map\"></a>Object转为Map</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> objToStrMap(obj) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> strMap = new Map();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> k of Object.keys(obj)) &#123;</div><div class=\"line\">\t\tstrMap.set(k, obj[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> strMap;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> obj = &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;;</div><div class=\"line\">console.log(obj);\t\t\t\t// Object &#123;yes: <span class=\"literal\">true</span>, no: <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = objToStrMap(obj);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Map转为JSON\"><a href=\"#Map转为JSON\" class=\"headerlink\" title=\"Map转为JSON\"></a>Map转为JSON</h2><p>Map转为JSON要区分两种情况。一种情况是，Map的键名都是字符串，这时可以选择转为对象JSON.</p>\n<p>另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。</p>\n<h3 id=\"Map转为对象JSON\"><a href=\"#Map转为对象JSON\" class=\"headerlink\" title=\"Map转为对象JSON\"></a>Map转为对象JSON</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> strMapToJson(strMap) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = Object.create(null);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> [k,v] of strMap) &#123;</div><div class=\"line\">\t\tobj[k] = v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> JSON.stringify(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"string\">'yes'</span>, <span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> objJson = strMapToJson(myMap);</div><div class=\"line\">console.log(objJson);\t\t\t\t// &#123;<span class=\"string\">\"yes\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"no\"</span>:<span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Map转为数组JSON\"><a href=\"#Map转为数组JSON\" class=\"headerlink\" title=\"Map转为数组JSON\"></a>Map转为数组JSON</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> mapToArrayJson(map) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> JSON.stringify([...map]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = new Map().set(<span class=\"literal\">true</span>, 7).set(&#123;foo: 3&#125;, [<span class=\"string\">'abc'</span>]);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">\"abc\"</span>]&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> arrJson = mapToArrayJson(myMap);</div><div class=\"line\">console.log(arrJson);\t\t\t\t// [[<span class=\"literal\">true</span>,7],[&#123;<span class=\"string\">\"foo\"</span>:3&#125;,[<span class=\"string\">\"abc\"</span>]]]</div></pre></td></tr></table></figure>\n<h2 id=\"JSON转为Map\"><a href=\"#JSON转为Map\" class=\"headerlink\" title=\"JSON转为Map\"></a>JSON转为Map</h2><p>JSON转为Map，正常情况下，所有键名都是字符串。</p>\n<p>但是，有一种特殊情况，整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为Map。这往往是数组转为JSON的逆操作。</p>\n<h3 id=\"JSON键名是字符串\"><a href=\"#JSON键名是字符串\" class=\"headerlink\" title=\"JSON键名是字符串\"></a>JSON键名是字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> jsonToStrMap(jsonStr) &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> obj = JSON.parse(jsonStr);</div><div class=\"line\">\t<span class=\"built_in\">let</span> strMap = new Map();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> k of Object.keys(obj)) &#123;</div><div class=\"line\">\t\tstrMap.set(k, obj[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> strMap;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> strJson = <span class=\"string\">'&#123;\"yes\":true,\"no\":false&#125;'</span>;</div><div class=\"line\">console.log(strJson);\t\t\t\t// &#123;<span class=\"string\">\"yes\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"no\"</span>:<span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = jsonToStrMap(strJson);</div><div class=\"line\">console.log(myMap);\t\t\t\t\t// Map &#123;<span class=\"string\">\"yes\"</span> =&gt; <span class=\"literal\">true</span>, <span class=\"string\">\"no\"</span> =&gt; <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JSON数组\"><a href=\"#JSON数组\" class=\"headerlink\" title=\"JSON数组\"></a>JSON数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> jsonToMap(jsonStr) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> new Map(JSON.parse(jsonStr));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> arrJson = <span class=\"string\">'[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]'</span>;</div><div class=\"line\">console.log(arrJson);\t\t\t// [[<span class=\"literal\">true</span>,7],[&#123;<span class=\"string\">\"foo\"</span>:3&#125;,[<span class=\"string\">\"abc\"</span>]]]</div><div class=\"line\"><span class=\"built_in\">let</span> myMap = jsonToMap(arrJson);</div><div class=\"line\">console.log(myMap);\t\t\t\t// Map &#123;<span class=\"literal\">true</span> =&gt; 7, Object &#123;foo: 3&#125; =&gt; [<span class=\"string\">\"abc\"</span>]&#125;</div></pre></td></tr></table></figure>\n<p>本文完！</p>\n"},{"title":"谷歌HTML/CSS规范","date":"2017-04-24T01:52:16.000Z","_content":"\n原文链接：[https://google.github.io/styleguide/htmlcssguide.html](https://google.github.io/styleguide/htmlcssguide.html)\n\n## 背景\n\n这篇文章定义了 HTML 和 CSS 的格式和代码规范，旨在提高代码质量和协作效率。\n\n## 通用\n\n### 通用样式规范\n\n#### URL协议\n\n省略img图片、css样式、Javascript脚本以及其他媒体文件 URL 的协议部分(http:,https:),除非文件在两种协议下都不可用。这种方案称为 protocol-relative URL，好处是无论你是使用HTTPS 还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，同时可以节省一部分字节。\n\n``` bash\n<!-- 不推荐使用 -->\n<script src=\"https://www.google.com/js/gweb/analytics/autotrack.js\"></script>\n  \n<!-- 推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"></script>\n```\n\n``` bash\n<!-- 不推荐使用 -->\n.example {\n  background: url(https://www.google.com/images/example);\n}\n  \n<!-- 推荐使用 -->\n.example {\n  background: url(//www.google.com/images/example);\n}\n```\n\n### 通用格式规范\n\n#### 代码缩进\n\n一次缩进2个空格\n\n不要使用制表符(tab键)或混合tab键和空格进行缩进。\n\n``` bash\n<!-- 推荐使用 -->\n<ul>\n  <li></li>\n  <li></li>\n</ul>\n```\n\n``` bash\n.example{\n  color:blue;\n}\n```\n\n#### 大小写\n\n以下元素都应尽量使用小写：\nHTML元素名称、属性、属性值(除非text/CDATA)，CSS选择器，属性和属性值(字符串除外)。\n\n``` bash\n<!-- 不推荐使用 -->\n<A HREF=\"/\">Home</A>\n  \n<!-- 推荐使用 -->\n<img src=\"google.png\" alt=\"Google\">\n```\n\n``` bash\n/* 不推荐使用 */\ncolor: #E5E5E5;\n  \n/* 推荐使用 */\ncolor: #e5e5e5;\n```\n\n#### 结尾空格\n\n结尾的空格是比较多余的，可能使代码更加复杂化。\n\n``` bash\n<!-- 不推荐使用 -->\n<p>What?_</p>\n  \n<!-- 推荐使用 -->\n<p>Yes please.</p>\n```\n\n### 通用元规范\n\n#### 编码\n\n在 HTML 中需要指定编码方式，CSS 中不需要指定，因为默认是 UTF-8。\n\n#### 注释\n\n使用注释来解释代码：包含的模块，功能以及优点。便于后期维护。\n\n#### 任务项\n\n用 TODO 来标记待办事项，而不是用一些其他的标记，像 @@。\n\n``` bash\n<!-- 推荐使用 -->\n  \n<!-- TODO: remove optional tags -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n  \n<!-- 不推荐使用 -->\n  \n<!-- @ remove optional tags @ -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n```\n\n## HTML\n\n### HTML 风格规范\n\n#### 文档类型\n\nHTML 文档应使用 HTML5 的文档类型：<!DOCTYPE html>。\n单标记标签无需封闭自身，<br> 不要写成 <br />。\n\n#### HTML 正确性\n\n尽可能使用正确的 HTML。\n\n``` bash\n<!-- 不推荐使用 -->\n<title>Test</title>\n<article>This is only a test.\n  \n<!-- 推荐使用 -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Test</title>\n<article>This is only a test.</article>\n```\n\n#### 语义化\n\n根据使用场景选择正确的 HTML 元素（有时被错误的称为“标签”）。例如，使用  h1 元素创建标题，p 元素创建段落，a 元素创建链接等等。正确的使用 HTML 元素对于可访问性、可重用性、搜索引擎以及编码效率都很重要。\n\n``` bash\n<!-- 不推荐使用 -->\n<div onclick=\"goToRecommendations();\">All recommendations</div>\n  \n<!-- 推荐使用 -->\n<a href=\"recommendations/\">All recommendations</a>\n```\n\n#### 多媒体元素降级\n\n对于像图片、视频、canvas 动画等多媒体元素，确保提供其他可访问的内容。图片可以使用替代文本（alt），视频和音频可以使用文字版本。\n\n``` bash\n<!-- 不推荐使用 -->\n<img src=\"spreadsheet.png\">\n  \n<!-- 推荐使用 -->\n<img src=\"spreadsheet.png\" alt=\"Spreadsheet screenshot.\">\n```\n\n#### 关注分离\n\n标记、样式和脚本分离，确保相互耦合最小化。\n\n#### 实体引用\n\n如果团队中文件和编辑器使用同样的编码方式，就没必要使用实体引用，如 <code>& mdash;</code>，<code>& rdquo;</code>，<code>& #x263a;</code>，除了一些在 HTML 中有特殊含义的字符（如 < 和 &）以及不可见的字符（如空格）。\n\n``` bash\n<!-- 不推荐使用 -->\nThe currency symbol for the Euro is &ldquo;&eur;&rdquo;.\n  \n<!-- 推荐使用 -->\nThe currency symbol for the Euro is “€”.\n```\n\n#### type 属性\n\n在引用样式表和脚本时，不要指定 type 属性，除非不是 CSS 或 JavaScript。\n因为 HTML5 中已经默认指定样式变的 type 是 text/css，脚本的type 是 text/javascript。\n\n``` bash\n<!-- 不推荐使用 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\" type=\"text/css\">\n  \n<!-- 推荐使用 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\">\n  \n<!-- 不推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\" type=\"text/javascript\"></script>\n  \n<!-- 推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"></script>\n```\n\n### HTML格式规范\n\n#### HTML 引号\n\n属性值应该使用双引号。\n\n``` bash\n<!-- 不推荐使用 -->\n<a class='maia-button maia-button-secondary'>Sign in</a>\n  \n<!-- 推荐使用 -->\n<a class=\"maia-button maia-button-secondary\">Sign in</a>\n```\n\n## CSS\n\n### CSS样式规则\n\n#### ID 和 Class 命名\n\n使用有含义的 id 和 class 名称。\n\n``` bash\n/* 不推荐使用: meaningless */\n#yee-1901 {}\n  \n/* 不推荐使用: presentational */\n.button-green {}\n.clear {}\n  \n/* 推荐使用: specific */\n#gallery {}\n#login {}\n.video {}\n  \n/* 推荐使用: generic */\n.aux {}\n.alt {}\n```\n\n#### ID 和 Class 命名风格\n\nid 和 class 应该尽量简短，同时要容易理解。\n\n``` bash\n/* 不推荐使用 */\n#navigation {}\n.atr {}\n  \n/* 推荐使用 */\n#nav {}\n.author {}\n```\n\n#### 选择器\n\n除非需要，否则不要在 id 或 class 前加元素名。\n\n``` bash\n/* 不推荐使用 */\nul#example {}\ndiv.error {}\n  \n/* 推荐使用 */\n#example {}\n.error {}\n```\n\n#### 属性简写\n\n尽量使用 CSS 中可以简写的属性 (如 font)，可以提高编码效率以及代码可读性。\n\n``` bash\n/* 不推荐使用 */\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n  \n/* 推荐使用 */\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n#### 0 和单位\n\n值为 0 时不用添加单位。\n\n``` bash\nmargin: 0;\npadding: 0;\n```\n\n#### 开头的 0\n\n值在 -1 和 1 之间时，不需要加 0。\n\n``` bash\nfont-size: .8em;\n```\n\n#### 16进制表示法\n\n``` bash\n/* 不推荐使用 */\ncolor: #eebbcc;\n  \n/* 推荐使用 */\ncolor: #ebc;\n```\n\n#### 前缀\n\n使用带前缀的命名空间可以防止命名冲突，同时提高代码可维护性。\n\n``` bash\n.adw-help {} /* AdWords */\n#maia-note {} /* Maia */\n```\n\n#### ID 和 Class 命名分隔符\n\n选择器中使用连字符可以提高可读性。\n\n``` bash\n/* 不推荐使用: 因为没有将“demo” 和 “image” 用分隔符分开 */\n.demoimage {}\n  \n/* 不推荐使用: 因为使用了下划线，而不是分隔符 */\n.error_status {}\n  \n/* 推荐使用 */\n#video-id {}\n.ads-sample {}\n```\n\n### CSS格式规则\n\n#### 书写顺序\n\n按照属性首字母顺序书写 CSS 易于阅读和维护，排序时可以忽略带有浏览器前缀的属性。\n\n``` bash\nbackground: fuchsia;\nborder: 1px solid;\n-moz-border-radius: 4px;\n-webkit-border-radius: 4px;\nborder-radius: 4px;\ncolor: black;\ntext-align: center;\ntext-indent: 2em;\n```\n\n#### 块级内容缩进\n\n为了反映层级关系和提高可读性，块级内容都应缩进。\n\n``` bash\n@media screen, projection {\n  \n  html {\n    background: #fff;\n    color: #444;\n  }\n  \n}\n```\n\n#### 声明结束\n\n每行 CSS 都应以分号结尾。\n\n``` bash\n/* 不推荐使用 */\n.test {\n  display: block;\n  height: 100px\n}\n  \n/* 推荐使用 */\n.test {\n  display: block;\n  height: 100px;\n}\n```\n\n#### 属性名结尾\n\n属性名和值之间都应有一个空格。\n\n``` bash\n/* 不推荐使用 */\nh3 {\n  font-weight:bold;\n}\n  \n/* 推荐使用 */\nh3 {\n  font-weight: bold;\n}\n```\n\n#### 声明样式块的分隔\n\n在选择器和 {} 之间用空格隔开。\n\n``` bash\n/* 不推荐使用: 因为缺少空格 */\n#video{\n  margin-top: 1em;\n}\n  \n/* 不推荐使用: 因为有不必要的换行符 */\n#video\n{\n  margin-top: 1em;\n}\n  \n/* 推荐使用 */\n#video {\n  margin-top: 1em;\n}\n```\n\n#### 选择器分隔\n\n每个选择器都另起一行。\n\n``` bash\n/* 不推荐使用 */\na:focus, a:active {\n  position: relative; top: 1px;\n}\n  \n/* 推荐使用 */\nh1,\nh2,\nh3 {\n  font-weight: normal;\n  line-height: 1.2;\n}\n```\n\n#### 规则分隔\n\n规则之间都用空行隔开。\n\n``` bash\nhtml {\n  background: #fff;\n}\n  \nbody {\n  margin: auto;\n  width: 50%;\n}\n```\n\n#### CSS 引号\n\n属性选择器和属性值用单引号，URI 的值不需要引号。\n\n``` bash\n/* 不推荐使用 */\n@import url(\"//www.google.com/css/maia.css\");\n  \nhtml {\n  font-family: \"open sans\", arial, sans-serif;\n}\n  \n/* 推荐使用 */\n@import url(//www.google.com/css/maia.css);\n  \nhtml {\n  font-family: 'open sans', arial, sans-serif;\n}\n```\n\n### CSS元规则\n\n#### 分段注释\n\n用注释把 CSS 分成各个部分。\n\n``` bash\n/* Header */\n  \n#adw-header {}\n  \n/* Footer */\n  \n#adw-footer {}\n  \n/* Gallery */\n  \n.adw-gallery {}\n```\n\n## 结语\n\n坚持遵循代码规范。\n写代码前先看看周围同事的代码，然后决定代码风格。\n代码规范的意义在于提供一个参照物。这里提供了一份全局的规范，但是你也得参照公司内部的规范，否则阅读你代码的人会很痛苦。\n\n本章完！\n","source":"_posts/谷歌HTML-CSS规范.md","raw":"---\ntitle: 谷歌HTML/CSS规范\ndate: 2017-04-24 09:52:16\ncategories: \"前端开发\"\ntags:\n\t- HTML\n---\n\n原文链接：[https://google.github.io/styleguide/htmlcssguide.html](https://google.github.io/styleguide/htmlcssguide.html)\n\n## 背景\n\n这篇文章定义了 HTML 和 CSS 的格式和代码规范，旨在提高代码质量和协作效率。\n\n## 通用\n\n### 通用样式规范\n\n#### URL协议\n\n省略img图片、css样式、Javascript脚本以及其他媒体文件 URL 的协议部分(http:,https:),除非文件在两种协议下都不可用。这种方案称为 protocol-relative URL，好处是无论你是使用HTTPS 还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，同时可以节省一部分字节。\n\n``` bash\n<!-- 不推荐使用 -->\n<script src=\"https://www.google.com/js/gweb/analytics/autotrack.js\"></script>\n  \n<!-- 推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"></script>\n```\n\n``` bash\n<!-- 不推荐使用 -->\n.example {\n  background: url(https://www.google.com/images/example);\n}\n  \n<!-- 推荐使用 -->\n.example {\n  background: url(//www.google.com/images/example);\n}\n```\n\n### 通用格式规范\n\n#### 代码缩进\n\n一次缩进2个空格\n\n不要使用制表符(tab键)或混合tab键和空格进行缩进。\n\n``` bash\n<!-- 推荐使用 -->\n<ul>\n  <li></li>\n  <li></li>\n</ul>\n```\n\n``` bash\n.example{\n  color:blue;\n}\n```\n\n#### 大小写\n\n以下元素都应尽量使用小写：\nHTML元素名称、属性、属性值(除非text/CDATA)，CSS选择器，属性和属性值(字符串除外)。\n\n``` bash\n<!-- 不推荐使用 -->\n<A HREF=\"/\">Home</A>\n  \n<!-- 推荐使用 -->\n<img src=\"google.png\" alt=\"Google\">\n```\n\n``` bash\n/* 不推荐使用 */\ncolor: #E5E5E5;\n  \n/* 推荐使用 */\ncolor: #e5e5e5;\n```\n\n#### 结尾空格\n\n结尾的空格是比较多余的，可能使代码更加复杂化。\n\n``` bash\n<!-- 不推荐使用 -->\n<p>What?_</p>\n  \n<!-- 推荐使用 -->\n<p>Yes please.</p>\n```\n\n### 通用元规范\n\n#### 编码\n\n在 HTML 中需要指定编码方式，CSS 中不需要指定，因为默认是 UTF-8。\n\n#### 注释\n\n使用注释来解释代码：包含的模块，功能以及优点。便于后期维护。\n\n#### 任务项\n\n用 TODO 来标记待办事项，而不是用一些其他的标记，像 @@。\n\n``` bash\n<!-- 推荐使用 -->\n  \n<!-- TODO: remove optional tags -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n  \n<!-- 不推荐使用 -->\n  \n<!-- @ remove optional tags @ -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n```\n\n## HTML\n\n### HTML 风格规范\n\n#### 文档类型\n\nHTML 文档应使用 HTML5 的文档类型：<!DOCTYPE html>。\n单标记标签无需封闭自身，<br> 不要写成 <br />。\n\n#### HTML 正确性\n\n尽可能使用正确的 HTML。\n\n``` bash\n<!-- 不推荐使用 -->\n<title>Test</title>\n<article>This is only a test.\n  \n<!-- 推荐使用 -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Test</title>\n<article>This is only a test.</article>\n```\n\n#### 语义化\n\n根据使用场景选择正确的 HTML 元素（有时被错误的称为“标签”）。例如，使用  h1 元素创建标题，p 元素创建段落，a 元素创建链接等等。正确的使用 HTML 元素对于可访问性、可重用性、搜索引擎以及编码效率都很重要。\n\n``` bash\n<!-- 不推荐使用 -->\n<div onclick=\"goToRecommendations();\">All recommendations</div>\n  \n<!-- 推荐使用 -->\n<a href=\"recommendations/\">All recommendations</a>\n```\n\n#### 多媒体元素降级\n\n对于像图片、视频、canvas 动画等多媒体元素，确保提供其他可访问的内容。图片可以使用替代文本（alt），视频和音频可以使用文字版本。\n\n``` bash\n<!-- 不推荐使用 -->\n<img src=\"spreadsheet.png\">\n  \n<!-- 推荐使用 -->\n<img src=\"spreadsheet.png\" alt=\"Spreadsheet screenshot.\">\n```\n\n#### 关注分离\n\n标记、样式和脚本分离，确保相互耦合最小化。\n\n#### 实体引用\n\n如果团队中文件和编辑器使用同样的编码方式，就没必要使用实体引用，如 <code>& mdash;</code>，<code>& rdquo;</code>，<code>& #x263a;</code>，除了一些在 HTML 中有特殊含义的字符（如 < 和 &）以及不可见的字符（如空格）。\n\n``` bash\n<!-- 不推荐使用 -->\nThe currency symbol for the Euro is &ldquo;&eur;&rdquo;.\n  \n<!-- 推荐使用 -->\nThe currency symbol for the Euro is “€”.\n```\n\n#### type 属性\n\n在引用样式表和脚本时，不要指定 type 属性，除非不是 CSS 或 JavaScript。\n因为 HTML5 中已经默认指定样式变的 type 是 text/css，脚本的type 是 text/javascript。\n\n``` bash\n<!-- 不推荐使用 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\" type=\"text/css\">\n  \n<!-- 推荐使用 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\">\n  \n<!-- 不推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\" type=\"text/javascript\"></script>\n  \n<!-- 推荐使用 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"></script>\n```\n\n### HTML格式规范\n\n#### HTML 引号\n\n属性值应该使用双引号。\n\n``` bash\n<!-- 不推荐使用 -->\n<a class='maia-button maia-button-secondary'>Sign in</a>\n  \n<!-- 推荐使用 -->\n<a class=\"maia-button maia-button-secondary\">Sign in</a>\n```\n\n## CSS\n\n### CSS样式规则\n\n#### ID 和 Class 命名\n\n使用有含义的 id 和 class 名称。\n\n``` bash\n/* 不推荐使用: meaningless */\n#yee-1901 {}\n  \n/* 不推荐使用: presentational */\n.button-green {}\n.clear {}\n  \n/* 推荐使用: specific */\n#gallery {}\n#login {}\n.video {}\n  \n/* 推荐使用: generic */\n.aux {}\n.alt {}\n```\n\n#### ID 和 Class 命名风格\n\nid 和 class 应该尽量简短，同时要容易理解。\n\n``` bash\n/* 不推荐使用 */\n#navigation {}\n.atr {}\n  \n/* 推荐使用 */\n#nav {}\n.author {}\n```\n\n#### 选择器\n\n除非需要，否则不要在 id 或 class 前加元素名。\n\n``` bash\n/* 不推荐使用 */\nul#example {}\ndiv.error {}\n  \n/* 推荐使用 */\n#example {}\n.error {}\n```\n\n#### 属性简写\n\n尽量使用 CSS 中可以简写的属性 (如 font)，可以提高编码效率以及代码可读性。\n\n``` bash\n/* 不推荐使用 */\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n  \n/* 推荐使用 */\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n#### 0 和单位\n\n值为 0 时不用添加单位。\n\n``` bash\nmargin: 0;\npadding: 0;\n```\n\n#### 开头的 0\n\n值在 -1 和 1 之间时，不需要加 0。\n\n``` bash\nfont-size: .8em;\n```\n\n#### 16进制表示法\n\n``` bash\n/* 不推荐使用 */\ncolor: #eebbcc;\n  \n/* 推荐使用 */\ncolor: #ebc;\n```\n\n#### 前缀\n\n使用带前缀的命名空间可以防止命名冲突，同时提高代码可维护性。\n\n``` bash\n.adw-help {} /* AdWords */\n#maia-note {} /* Maia */\n```\n\n#### ID 和 Class 命名分隔符\n\n选择器中使用连字符可以提高可读性。\n\n``` bash\n/* 不推荐使用: 因为没有将“demo” 和 “image” 用分隔符分开 */\n.demoimage {}\n  \n/* 不推荐使用: 因为使用了下划线，而不是分隔符 */\n.error_status {}\n  \n/* 推荐使用 */\n#video-id {}\n.ads-sample {}\n```\n\n### CSS格式规则\n\n#### 书写顺序\n\n按照属性首字母顺序书写 CSS 易于阅读和维护，排序时可以忽略带有浏览器前缀的属性。\n\n``` bash\nbackground: fuchsia;\nborder: 1px solid;\n-moz-border-radius: 4px;\n-webkit-border-radius: 4px;\nborder-radius: 4px;\ncolor: black;\ntext-align: center;\ntext-indent: 2em;\n```\n\n#### 块级内容缩进\n\n为了反映层级关系和提高可读性，块级内容都应缩进。\n\n``` bash\n@media screen, projection {\n  \n  html {\n    background: #fff;\n    color: #444;\n  }\n  \n}\n```\n\n#### 声明结束\n\n每行 CSS 都应以分号结尾。\n\n``` bash\n/* 不推荐使用 */\n.test {\n  display: block;\n  height: 100px\n}\n  \n/* 推荐使用 */\n.test {\n  display: block;\n  height: 100px;\n}\n```\n\n#### 属性名结尾\n\n属性名和值之间都应有一个空格。\n\n``` bash\n/* 不推荐使用 */\nh3 {\n  font-weight:bold;\n}\n  \n/* 推荐使用 */\nh3 {\n  font-weight: bold;\n}\n```\n\n#### 声明样式块的分隔\n\n在选择器和 {} 之间用空格隔开。\n\n``` bash\n/* 不推荐使用: 因为缺少空格 */\n#video{\n  margin-top: 1em;\n}\n  \n/* 不推荐使用: 因为有不必要的换行符 */\n#video\n{\n  margin-top: 1em;\n}\n  \n/* 推荐使用 */\n#video {\n  margin-top: 1em;\n}\n```\n\n#### 选择器分隔\n\n每个选择器都另起一行。\n\n``` bash\n/* 不推荐使用 */\na:focus, a:active {\n  position: relative; top: 1px;\n}\n  \n/* 推荐使用 */\nh1,\nh2,\nh3 {\n  font-weight: normal;\n  line-height: 1.2;\n}\n```\n\n#### 规则分隔\n\n规则之间都用空行隔开。\n\n``` bash\nhtml {\n  background: #fff;\n}\n  \nbody {\n  margin: auto;\n  width: 50%;\n}\n```\n\n#### CSS 引号\n\n属性选择器和属性值用单引号，URI 的值不需要引号。\n\n``` bash\n/* 不推荐使用 */\n@import url(\"//www.google.com/css/maia.css\");\n  \nhtml {\n  font-family: \"open sans\", arial, sans-serif;\n}\n  \n/* 推荐使用 */\n@import url(//www.google.com/css/maia.css);\n  \nhtml {\n  font-family: 'open sans', arial, sans-serif;\n}\n```\n\n### CSS元规则\n\n#### 分段注释\n\n用注释把 CSS 分成各个部分。\n\n``` bash\n/* Header */\n  \n#adw-header {}\n  \n/* Footer */\n  \n#adw-footer {}\n  \n/* Gallery */\n  \n.adw-gallery {}\n```\n\n## 结语\n\n坚持遵循代码规范。\n写代码前先看看周围同事的代码，然后决定代码风格。\n代码规范的意义在于提供一个参照物。这里提供了一份全局的规范，但是你也得参照公司内部的规范，否则阅读你代码的人会很痛苦。\n\n本章完！\n","slug":"谷歌HTML-CSS规范","published":1,"updated":"2017-04-24T03:54:27.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3l2uxzt000x1gwd5fq0rm2j","content":"<p>原文链接：<a href=\"https://google.github.io/styleguide/htmlcssguide.html\" target=\"_blank\" rel=\"external\">https://google.github.io/styleguide/htmlcssguide.html</a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这篇文章定义了 HTML 和 CSS 的格式和代码规范，旨在提高代码质量和协作效率。</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><h3 id=\"通用样式规范\"><a href=\"#通用样式规范\" class=\"headerlink\" title=\"通用样式规范\"></a>通用样式规范</h3><h4 id=\"URL协议\"><a href=\"#URL协议\" class=\"headerlink\" title=\"URL协议\"></a>URL协议</h4><p>省略img图片、css样式、Javascript脚本以及其他媒体文件 URL 的协议部分(http:,https:),除非文件在两种协议下都不可用。这种方案称为 protocol-relative URL，好处是无论你是使用HTTPS 还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，同时可以节省一部分字节。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"https://www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">.example &#123;</div><div class=\"line\">  background: url(https://www.google.com/images/example);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">.example &#123;</div><div class=\"line\">  background: url(//www.google.com/images/example);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"通用格式规范\"><a href=\"#通用格式规范\" class=\"headerlink\" title=\"通用格式规范\"></a>通用格式规范</h3><h4 id=\"代码缩进\"><a href=\"#代码缩进\" class=\"headerlink\" title=\"代码缩进\"></a>代码缩进</h4><p>一次缩进2个空格</p>\n<p>不要使用制表符(tab键)或混合tab键和空格进行缩进。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.example&#123;</div><div class=\"line\">  color:blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h4><p>以下元素都应尽量使用小写：<br>HTML元素名称、属性、属性值(除非text/CDATA)，CSS选择器，属性和属性值(字符串除外)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;A HREF=<span class=\"string\">\"/\"</span>&gt;Home&lt;/A&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"google.png\"</span> alt=<span class=\"string\">\"Google\"</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#E5E5E5;</span></div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#e5e5e5;</span></div></pre></td></tr></table></figure>\n<h4 id=\"结尾空格\"><a href=\"#结尾空格\" class=\"headerlink\" title=\"结尾空格\"></a>结尾空格</h4><p>结尾的空格是比较多余的，可能使代码更加复杂化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;p&gt;What?_&lt;/p&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;p&gt;Yes please.&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"通用元规范\"><a href=\"#通用元规范\" class=\"headerlink\" title=\"通用元规范\"></a>通用元规范</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><p>在 HTML 中需要指定编码方式，CSS 中不需要指定，因为默认是 UTF-8。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>使用注释来解释代码：包含的模块，功能以及优点。便于后期维护。</p>\n<h4 id=\"任务项\"><a href=\"#任务项\" class=\"headerlink\" title=\"任务项\"></a>任务项</h4><p>用 TODO 来标记待办事项，而不是用一些其他的标记，像 @@。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- TODO: remove optional tags --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;Apples&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;Oranges&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- @ remove optional tags @ --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;Apples&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;Oranges&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"HTML-风格规范\"><a href=\"#HTML-风格规范\" class=\"headerlink\" title=\"HTML 风格规范\"></a>HTML 风格规范</h3><h4 id=\"文档类型\"><a href=\"#文档类型\" class=\"headerlink\" title=\"文档类型\"></a>文档类型</h4><p>HTML 文档应使用 HTML5 的文档类型：&lt;!DOCTYPE html&gt;。<br>单标记标签无需封闭自身，<br> 不要写成 <br>。</p>\n<h4 id=\"HTML-正确性\"><a href=\"#HTML-正确性\" class=\"headerlink\" title=\"HTML 正确性\"></a>HTML 正确性</h4><p>尽可能使用正确的 HTML。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;title&gt;Test&lt;/title&gt;</div><div class=\"line\">&lt;article&gt;This is only a test.</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</div><div class=\"line\">&lt;title&gt;Test&lt;/title&gt;</div><div class=\"line\">&lt;article&gt;This is only a test.&lt;/article&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h4><p>根据使用场景选择正确的 HTML 元素（有时被错误的称为“标签”）。例如，使用  h1 元素创建标题，p 元素创建段落，a 元素创建链接等等。正确的使用 HTML 元素对于可访问性、可重用性、搜索引擎以及编码效率都很重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;div onclick=<span class=\"string\">\"goToRecommendations();\"</span>&gt;All recommendations&lt;/div&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"recommendations/\"</span>&gt;All recommendations&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"多媒体元素降级\"><a href=\"#多媒体元素降级\" class=\"headerlink\" title=\"多媒体元素降级\"></a>多媒体元素降级</h4><p>对于像图片、视频、canvas 动画等多媒体元素，确保提供其他可访问的内容。图片可以使用替代文本（alt），视频和音频可以使用文字版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"spreadsheet.png\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"spreadsheet.png\"</span> alt=<span class=\"string\">\"Spreadsheet screenshot.\"</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"关注分离\"><a href=\"#关注分离\" class=\"headerlink\" title=\"关注分离\"></a>关注分离</h4><p>标记、样式和脚本分离，确保相互耦合最小化。</p>\n<h4 id=\"实体引用\"><a href=\"#实体引用\" class=\"headerlink\" title=\"实体引用\"></a>实体引用</h4><p>如果团队中文件和编辑器使用同样的编码方式，就没必要使用实体引用，如 <code>&amp; mdash;</code>，<code>&amp; rdquo;</code>，<code>&amp; #x263a;</code>，除了一些在 HTML 中有特殊含义的字符（如 &lt; 和 &amp;）以及不可见的字符（如空格）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">The currency symbol <span class=\"keyword\">for</span> the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">The currency symbol <span class=\"keyword\">for</span> the Euro is “€”.</div></pre></td></tr></table></figure>\n<h4 id=\"type-属性\"><a href=\"#type-属性\" class=\"headerlink\" title=\"type 属性\"></a>type 属性</h4><p>在引用样式表和脚本时，不要指定 type 属性，除非不是 CSS 或 JavaScript。<br>因为 HTML5 中已经默认指定样式变的 type 是 text/css，脚本的type 是 text/javascript。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//www.google.com/css/maia.css\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//www.google.com/css/maia.css\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML格式规范\"><a href=\"#HTML格式规范\" class=\"headerlink\" title=\"HTML格式规范\"></a>HTML格式规范</h3><h4 id=\"HTML-引号\"><a href=\"#HTML-引号\" class=\"headerlink\" title=\"HTML 引号\"></a>HTML 引号</h4><p>属性值应该使用双引号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;a class=<span class=\"string\">'maia-button maia-button-secondary'</span>&gt;Sign <span class=\"keyword\">in</span>&lt;/a&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;a class=<span class=\"string\">\"maia-button maia-button-secondary\"</span>&gt;Sign <span class=\"keyword\">in</span>&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS样式规则\"><a href=\"#CSS样式规则\" class=\"headerlink\" title=\"CSS样式规则\"></a>CSS样式规则</h3><h4 id=\"ID-和-Class-命名\"><a href=\"#ID-和-Class-命名\" class=\"headerlink\" title=\"ID 和 Class 命名\"></a>ID 和 Class 命名</h4><p>使用有含义的 id 和 class 名称。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: meaningless */</div><div class=\"line\"><span class=\"comment\">#yee-1901 &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: presentational */</div><div class=\"line\">.button-green &#123;&#125;</div><div class=\"line\">.clear &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用: specific */</div><div class=\"line\"><span class=\"comment\">#gallery &#123;&#125;</span></div><div class=\"line\"><span class=\"comment\">#login &#123;&#125;</span></div><div class=\"line\">.video &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用: generic */</div><div class=\"line\">.aux &#123;&#125;</div><div class=\"line\">.alt &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ID-和-Class-命名风格\"><a href=\"#ID-和-Class-命名风格\" class=\"headerlink\" title=\"ID 和 Class 命名风格\"></a>ID 和 Class 命名风格</h4><p>id 和 class 应该尽量简短，同时要容易理解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\"><span class=\"comment\">#navigation &#123;&#125;</span></div><div class=\"line\">.atr &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#nav &#123;&#125;</span></div><div class=\"line\">.author &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><p>除非需要，否则不要在 id 或 class 前加元素名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">ul<span class=\"comment\">#example &#123;&#125;</span></div><div class=\"line\">div.error &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#example &#123;&#125;</span></div><div class=\"line\">.error &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"属性简写\"><a href=\"#属性简写\" class=\"headerlink\" title=\"属性简写\"></a>属性简写</h4><p>尽量使用 CSS 中可以简写的属性 (如 font)，可以提高编码效率以及代码可读性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">border-top-style: none;</div><div class=\"line\">font-family: palatino, georgia, serif;</div><div class=\"line\">font-size: 100%;</div><div class=\"line\">line-height: 1.6;</div><div class=\"line\">padding-bottom: 2em;</div><div class=\"line\">padding-left: 1em;</div><div class=\"line\">padding-right: 1em;</div><div class=\"line\">padding-top: 0;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">border-top: 0;</div><div class=\"line\">font: 100%/1.6 palatino, georgia, serif;</div><div class=\"line\">padding: 0 1em 2em;</div></pre></td></tr></table></figure>\n<h4 id=\"0-和单位\"><a href=\"#0-和单位\" class=\"headerlink\" title=\"0 和单位\"></a>0 和单位</h4><p>值为 0 时不用添加单位。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: 0;</div><div class=\"line\">padding: 0;</div></pre></td></tr></table></figure>\n<h4 id=\"开头的-0\"><a href=\"#开头的-0\" class=\"headerlink\" title=\"开头的 0\"></a>开头的 0</h4><p>值在 -1 和 1 之间时，不需要加 0。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-size: .8em;</div></pre></td></tr></table></figure>\n<h4 id=\"16进制表示法\"><a href=\"#16进制表示法\" class=\"headerlink\" title=\"16进制表示法\"></a>16进制表示法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#eebbcc;</span></div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#ebc;</span></div></pre></td></tr></table></figure>\n<h4 id=\"前缀\"><a href=\"#前缀\" class=\"headerlink\" title=\"前缀\"></a>前缀</h4><p>使用带前缀的命名空间可以防止命名冲突，同时提高代码可维护性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.adw-help &#123;&#125; /* AdWords */</div><div class=\"line\"><span class=\"comment\">#maia-note &#123;&#125; /* Maia */</span></div></pre></td></tr></table></figure>\n<h4 id=\"ID-和-Class-命名分隔符\"><a href=\"#ID-和-Class-命名分隔符\" class=\"headerlink\" title=\"ID 和 Class 命名分隔符\"></a>ID 和 Class 命名分隔符</h4><p>选择器中使用连字符可以提高可读性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: 因为没有将“demo” 和 “image” 用分隔符分开 */</div><div class=\"line\">.demoimage &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: 因为使用了下划线，而不是分隔符 */</div><div class=\"line\">.error_status &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#video-id &#123;&#125;</span></div><div class=\"line\">.ads-sample &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CSS格式规则\"><a href=\"#CSS格式规则\" class=\"headerlink\" title=\"CSS格式规则\"></a>CSS格式规则</h3><h4 id=\"书写顺序\"><a href=\"#书写顺序\" class=\"headerlink\" title=\"书写顺序\"></a>书写顺序</h4><p>按照属性首字母顺序书写 CSS 易于阅读和维护，排序时可以忽略带有浏览器前缀的属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: fuchsia;</div><div class=\"line\">border: 1px solid;</div><div class=\"line\">-moz-border-radius: 4px;</div><div class=\"line\">-webkit-border-radius: 4px;</div><div class=\"line\">border-radius: 4px;</div><div class=\"line\">color: black;</div><div class=\"line\">text-align: center;</div><div class=\"line\">text-indent: 2em;</div></pre></td></tr></table></figure>\n<h4 id=\"块级内容缩进\"><a href=\"#块级内容缩进\" class=\"headerlink\" title=\"块级内容缩进\"></a>块级内容缩进</h4><p>为了反映层级关系和提高可读性，块级内容都应缩进。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen, projection &#123;</div><div class=\"line\">  </div><div class=\"line\">  html &#123;</div><div class=\"line\">    background: <span class=\"comment\">#fff;</span></div><div class=\"line\">    color: <span class=\"comment\">#444;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明结束\"><a href=\"#声明结束\" class=\"headerlink\" title=\"声明结束\"></a>声明结束</h4><p>每行 CSS 都应以分号结尾。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">.test &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  height: 100px</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">.test &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"属性名结尾\"><a href=\"#属性名结尾\" class=\"headerlink\" title=\"属性名结尾\"></a>属性名结尾</h4><p>属性名和值之间都应有一个空格。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight:bold;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明样式块的分隔\"><a href=\"#声明样式块的分隔\" class=\"headerlink\" title=\"声明样式块的分隔\"></a>声明样式块的分隔</h4><p>在选择器和 {} 之间用空格隔开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: 因为缺少空格 */</div><div class=\"line\"><span class=\"comment\">#video&#123;</span></div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: 因为有不必要的换行符 */</div><div class=\"line\"><span class=\"comment\">#video</span></div><div class=\"line\">&#123;</div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#video &#123;</span></div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择器分隔\"><a href=\"#选择器分隔\" class=\"headerlink\" title=\"选择器分隔\"></a>选择器分隔</h4><p>每个选择器都另起一行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">a:focus, a:active &#123;</div><div class=\"line\">  position: relative; top: 1px;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">h1,</div><div class=\"line\">h2,</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight: normal;</div><div class=\"line\">  line-height: 1.2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"规则分隔\"><a href=\"#规则分隔\" class=\"headerlink\" title=\"规则分隔\"></a>规则分隔</h4><p>规则之间都用空行隔开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">html &#123;</div><div class=\"line\">  background: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: auto;</div><div class=\"line\">  width: 50%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS-引号\"><a href=\"#CSS-引号\" class=\"headerlink\" title=\"CSS 引号\"></a>CSS 引号</h4><p>属性选择器和属性值用单引号，URI 的值不需要引号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">@import url(<span class=\"string\">\"//www.google.com/css/maia.css\"</span>);</div><div class=\"line\">  </div><div class=\"line\">html &#123;</div><div class=\"line\">  font-family: <span class=\"string\">\"open sans\"</span>, arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">@import url(//www.google.com/css/maia.css);</div><div class=\"line\">  </div><div class=\"line\">html &#123;</div><div class=\"line\">  font-family: <span class=\"string\">'open sans'</span>, arial, sans-serif;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CSS元规则\"><a href=\"#CSS元规则\" class=\"headerlink\" title=\"CSS元规则\"></a>CSS元规则</h3><h4 id=\"分段注释\"><a href=\"#分段注释\" class=\"headerlink\" title=\"分段注释\"></a>分段注释</h4><p>用注释把 CSS 分成各个部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* Header */</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#adw-header &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* Footer */</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#adw-footer &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* Gallery */</div><div class=\"line\">  </div><div class=\"line\">.adw-gallery &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>坚持遵循代码规范。<br>写代码前先看看周围同事的代码，然后决定代码风格。<br>代码规范的意义在于提供一个参照物。这里提供了一份全局的规范，但是你也得参照公司内部的规范，否则阅读你代码的人会很痛苦。</p>\n<p>本章完！</p>\n","excerpt":"","more":"<p>原文链接：<a href=\"https://google.github.io/styleguide/htmlcssguide.html\">https://google.github.io/styleguide/htmlcssguide.html</a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这篇文章定义了 HTML 和 CSS 的格式和代码规范，旨在提高代码质量和协作效率。</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><h3 id=\"通用样式规范\"><a href=\"#通用样式规范\" class=\"headerlink\" title=\"通用样式规范\"></a>通用样式规范</h3><h4 id=\"URL协议\"><a href=\"#URL协议\" class=\"headerlink\" title=\"URL协议\"></a>URL协议</h4><p>省略img图片、css样式、Javascript脚本以及其他媒体文件 URL 的协议部分(http:,https:),除非文件在两种协议下都不可用。这种方案称为 protocol-relative URL，好处是无论你是使用HTTPS 还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，同时可以节省一部分字节。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"https://www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">.example &#123;</div><div class=\"line\">  background: url(https://www.google.com/images/example);</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">.example &#123;</div><div class=\"line\">  background: url(//www.google.com/images/example);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"通用格式规范\"><a href=\"#通用格式规范\" class=\"headerlink\" title=\"通用格式规范\"></a>通用格式规范</h3><h4 id=\"代码缩进\"><a href=\"#代码缩进\" class=\"headerlink\" title=\"代码缩进\"></a>代码缩进</h4><p>一次缩进2个空格</p>\n<p>不要使用制表符(tab键)或混合tab键和空格进行缩进。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.example&#123;</div><div class=\"line\">  color:blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h4><p>以下元素都应尽量使用小写：<br>HTML元素名称、属性、属性值(除非text/CDATA)，CSS选择器，属性和属性值(字符串除外)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;A HREF=<span class=\"string\">\"/\"</span>&gt;Home&lt;/A&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"google.png\"</span> alt=<span class=\"string\">\"Google\"</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#E5E5E5;</span></div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#e5e5e5;</span></div></pre></td></tr></table></figure>\n<h4 id=\"结尾空格\"><a href=\"#结尾空格\" class=\"headerlink\" title=\"结尾空格\"></a>结尾空格</h4><p>结尾的空格是比较多余的，可能使代码更加复杂化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;p&gt;What?_&lt;/p&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;p&gt;Yes please.&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"通用元规范\"><a href=\"#通用元规范\" class=\"headerlink\" title=\"通用元规范\"></a>通用元规范</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><p>在 HTML 中需要指定编码方式，CSS 中不需要指定，因为默认是 UTF-8。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>使用注释来解释代码：包含的模块，功能以及优点。便于后期维护。</p>\n<h4 id=\"任务项\"><a href=\"#任务项\" class=\"headerlink\" title=\"任务项\"></a>任务项</h4><p>用 TODO 来标记待办事项，而不是用一些其他的标记，像 @@。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- TODO: remove optional tags --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;Apples&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;Oranges&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- @ remove optional tags @ --&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;Apples&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;Oranges&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"HTML-风格规范\"><a href=\"#HTML-风格规范\" class=\"headerlink\" title=\"HTML 风格规范\"></a>HTML 风格规范</h3><h4 id=\"文档类型\"><a href=\"#文档类型\" class=\"headerlink\" title=\"文档类型\"></a>文档类型</h4><p>HTML 文档应使用 HTML5 的文档类型：&lt;!DOCTYPE html&gt;。<br>单标记标签无需封闭自身，<br> 不要写成 <br />。</p>\n<h4 id=\"HTML-正确性\"><a href=\"#HTML-正确性\" class=\"headerlink\" title=\"HTML 正确性\"></a>HTML 正确性</h4><p>尽可能使用正确的 HTML。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;title&gt;Test&lt;/title&gt;</div><div class=\"line\">&lt;article&gt;This is only a test.</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</div><div class=\"line\">&lt;title&gt;Test&lt;/title&gt;</div><div class=\"line\">&lt;article&gt;This is only a test.&lt;/article&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h4><p>根据使用场景选择正确的 HTML 元素（有时被错误的称为“标签”）。例如，使用  h1 元素创建标题，p 元素创建段落，a 元素创建链接等等。正确的使用 HTML 元素对于可访问性、可重用性、搜索引擎以及编码效率都很重要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;div onclick=<span class=\"string\">\"goToRecommendations();\"</span>&gt;All recommendations&lt;/div&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"recommendations/\"</span>&gt;All recommendations&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"多媒体元素降级\"><a href=\"#多媒体元素降级\" class=\"headerlink\" title=\"多媒体元素降级\"></a>多媒体元素降级</h4><p>对于像图片、视频、canvas 动画等多媒体元素，确保提供其他可访问的内容。图片可以使用替代文本（alt），视频和音频可以使用文字版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"spreadsheet.png\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"spreadsheet.png\"</span> alt=<span class=\"string\">\"Spreadsheet screenshot.\"</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"关注分离\"><a href=\"#关注分离\" class=\"headerlink\" title=\"关注分离\"></a>关注分离</h4><p>标记、样式和脚本分离，确保相互耦合最小化。</p>\n<h4 id=\"实体引用\"><a href=\"#实体引用\" class=\"headerlink\" title=\"实体引用\"></a>实体引用</h4><p>如果团队中文件和编辑器使用同样的编码方式，就没必要使用实体引用，如 <code>&amp; mdash;</code>，<code>&amp; rdquo;</code>，<code>&amp; #x263a;</code>，除了一些在 HTML 中有特殊含义的字符（如 &lt; 和 &amp;）以及不可见的字符（如空格）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">The currency symbol <span class=\"keyword\">for</span> the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">The currency symbol <span class=\"keyword\">for</span> the Euro is “€”.</div></pre></td></tr></table></figure>\n<h4 id=\"type-属性\"><a href=\"#type-属性\" class=\"headerlink\" title=\"type 属性\"></a>type 属性</h4><p>在引用样式表和脚本时，不要指定 type 属性，除非不是 CSS 或 JavaScript。<br>因为 HTML5 中已经默认指定样式变的 type 是 text/css，脚本的type 是 text/javascript。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//www.google.com/css/maia.css\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//www.google.com/css/maia.css\"</span>&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"//www.google.com/js/gweb/analytics/autotrack.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML格式规范\"><a href=\"#HTML格式规范\" class=\"headerlink\" title=\"HTML格式规范\"></a>HTML格式规范</h3><h4 id=\"HTML-引号\"><a href=\"#HTML-引号\" class=\"headerlink\" title=\"HTML 引号\"></a>HTML 引号</h4><p>属性值应该使用双引号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 不推荐使用 --&gt;</div><div class=\"line\">&lt;a class=<span class=\"string\">'maia-button maia-button-secondary'</span>&gt;Sign <span class=\"keyword\">in</span>&lt;/a&gt;</div><div class=\"line\">  </div><div class=\"line\">&lt;!-- 推荐使用 --&gt;</div><div class=\"line\">&lt;a class=<span class=\"string\">\"maia-button maia-button-secondary\"</span>&gt;Sign <span class=\"keyword\">in</span>&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS样式规则\"><a href=\"#CSS样式规则\" class=\"headerlink\" title=\"CSS样式规则\"></a>CSS样式规则</h3><h4 id=\"ID-和-Class-命名\"><a href=\"#ID-和-Class-命名\" class=\"headerlink\" title=\"ID 和 Class 命名\"></a>ID 和 Class 命名</h4><p>使用有含义的 id 和 class 名称。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: meaningless */</div><div class=\"line\"><span class=\"comment\">#yee-1901 &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: presentational */</div><div class=\"line\">.button-green &#123;&#125;</div><div class=\"line\">.clear &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用: specific */</div><div class=\"line\"><span class=\"comment\">#gallery &#123;&#125;</span></div><div class=\"line\"><span class=\"comment\">#login &#123;&#125;</span></div><div class=\"line\">.video &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用: generic */</div><div class=\"line\">.aux &#123;&#125;</div><div class=\"line\">.alt &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ID-和-Class-命名风格\"><a href=\"#ID-和-Class-命名风格\" class=\"headerlink\" title=\"ID 和 Class 命名风格\"></a>ID 和 Class 命名风格</h4><p>id 和 class 应该尽量简短，同时要容易理解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\"><span class=\"comment\">#navigation &#123;&#125;</span></div><div class=\"line\">.atr &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#nav &#123;&#125;</span></div><div class=\"line\">.author &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><p>除非需要，否则不要在 id 或 class 前加元素名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">ul<span class=\"comment\">#example &#123;&#125;</span></div><div class=\"line\">div.error &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#example &#123;&#125;</span></div><div class=\"line\">.error &#123;&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"属性简写\"><a href=\"#属性简写\" class=\"headerlink\" title=\"属性简写\"></a>属性简写</h4><p>尽量使用 CSS 中可以简写的属性 (如 font)，可以提高编码效率以及代码可读性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">border-top-style: none;</div><div class=\"line\">font-family: palatino, georgia, serif;</div><div class=\"line\">font-size: 100%;</div><div class=\"line\">line-height: 1.6;</div><div class=\"line\">padding-bottom: 2em;</div><div class=\"line\">padding-left: 1em;</div><div class=\"line\">padding-right: 1em;</div><div class=\"line\">padding-top: 0;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">border-top: 0;</div><div class=\"line\">font: 100%/1.6 palatino, georgia, serif;</div><div class=\"line\">padding: 0 1em 2em;</div></pre></td></tr></table></figure>\n<h4 id=\"0-和单位\"><a href=\"#0-和单位\" class=\"headerlink\" title=\"0 和单位\"></a>0 和单位</h4><p>值为 0 时不用添加单位。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">margin: 0;</div><div class=\"line\">padding: 0;</div></pre></td></tr></table></figure>\n<h4 id=\"开头的-0\"><a href=\"#开头的-0\" class=\"headerlink\" title=\"开头的 0\"></a>开头的 0</h4><p>值在 -1 和 1 之间时，不需要加 0。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-size: .8em;</div></pre></td></tr></table></figure>\n<h4 id=\"16进制表示法\"><a href=\"#16进制表示法\" class=\"headerlink\" title=\"16进制表示法\"></a>16进制表示法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#eebbcc;</span></div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">color: <span class=\"comment\">#ebc;</span></div></pre></td></tr></table></figure>\n<h4 id=\"前缀\"><a href=\"#前缀\" class=\"headerlink\" title=\"前缀\"></a>前缀</h4><p>使用带前缀的命名空间可以防止命名冲突，同时提高代码可维护性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.adw-help &#123;&#125; /* AdWords */</div><div class=\"line\"><span class=\"comment\">#maia-note &#123;&#125; /* Maia */</span></div></pre></td></tr></table></figure>\n<h4 id=\"ID-和-Class-命名分隔符\"><a href=\"#ID-和-Class-命名分隔符\" class=\"headerlink\" title=\"ID 和 Class 命名分隔符\"></a>ID 和 Class 命名分隔符</h4><p>选择器中使用连字符可以提高可读性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: 因为没有将“demo” 和 “image” 用分隔符分开 */</div><div class=\"line\">.demoimage &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: 因为使用了下划线，而不是分隔符 */</div><div class=\"line\">.error_status &#123;&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#video-id &#123;&#125;</span></div><div class=\"line\">.ads-sample &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CSS格式规则\"><a href=\"#CSS格式规则\" class=\"headerlink\" title=\"CSS格式规则\"></a>CSS格式规则</h3><h4 id=\"书写顺序\"><a href=\"#书写顺序\" class=\"headerlink\" title=\"书写顺序\"></a>书写顺序</h4><p>按照属性首字母顺序书写 CSS 易于阅读和维护，排序时可以忽略带有浏览器前缀的属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">background: fuchsia;</div><div class=\"line\">border: 1px solid;</div><div class=\"line\">-moz-border-radius: 4px;</div><div class=\"line\">-webkit-border-radius: 4px;</div><div class=\"line\">border-radius: 4px;</div><div class=\"line\">color: black;</div><div class=\"line\">text-align: center;</div><div class=\"line\">text-indent: 2em;</div></pre></td></tr></table></figure>\n<h4 id=\"块级内容缩进\"><a href=\"#块级内容缩进\" class=\"headerlink\" title=\"块级内容缩进\"></a>块级内容缩进</h4><p>为了反映层级关系和提高可读性，块级内容都应缩进。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen, projection &#123;</div><div class=\"line\">  </div><div class=\"line\">  html &#123;</div><div class=\"line\">    background: <span class=\"comment\">#fff;</span></div><div class=\"line\">    color: <span class=\"comment\">#444;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明结束\"><a href=\"#声明结束\" class=\"headerlink\" title=\"声明结束\"></a>声明结束</h4><p>每行 CSS 都应以分号结尾。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">.test &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  height: 100px</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">.test &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"属性名结尾\"><a href=\"#属性名结尾\" class=\"headerlink\" title=\"属性名结尾\"></a>属性名结尾</h4><p>属性名和值之间都应有一个空格。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight:bold;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明样式块的分隔\"><a href=\"#声明样式块的分隔\" class=\"headerlink\" title=\"声明样式块的分隔\"></a>声明样式块的分隔</h4><p>在选择器和 {} 之间用空格隔开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用: 因为缺少空格 */</div><div class=\"line\"><span class=\"comment\">#video&#123;</span></div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 不推荐使用: 因为有不必要的换行符 */</div><div class=\"line\"><span class=\"comment\">#video</span></div><div class=\"line\">&#123;</div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\"><span class=\"comment\">#video &#123;</span></div><div class=\"line\">  margin-top: 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择器分隔\"><a href=\"#选择器分隔\" class=\"headerlink\" title=\"选择器分隔\"></a>选择器分隔</h4><p>每个选择器都另起一行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">a:focus, a:active &#123;</div><div class=\"line\">  position: relative; top: 1px;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">h1,</div><div class=\"line\">h2,</div><div class=\"line\">h3 &#123;</div><div class=\"line\">  font-weight: normal;</div><div class=\"line\">  line-height: 1.2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"规则分隔\"><a href=\"#规则分隔\" class=\"headerlink\" title=\"规则分隔\"></a>规则分隔</h4><p>规则之间都用空行隔开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">html &#123;</div><div class=\"line\">  background: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: auto;</div><div class=\"line\">  width: 50%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS-引号\"><a href=\"#CSS-引号\" class=\"headerlink\" title=\"CSS 引号\"></a>CSS 引号</h4><p>属性选择器和属性值用单引号，URI 的值不需要引号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 不推荐使用 */</div><div class=\"line\">@import url(<span class=\"string\">\"//www.google.com/css/maia.css\"</span>);</div><div class=\"line\">  </div><div class=\"line\">html &#123;</div><div class=\"line\">  font-family: <span class=\"string\">\"open sans\"</span>, arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">/* 推荐使用 */</div><div class=\"line\">@import url(//www.google.com/css/maia.css);</div><div class=\"line\">  </div><div class=\"line\">html &#123;</div><div class=\"line\">  font-family: <span class=\"string\">'open sans'</span>, arial, sans-serif;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"CSS元规则\"><a href=\"#CSS元规则\" class=\"headerlink\" title=\"CSS元规则\"></a>CSS元规则</h3><h4 id=\"分段注释\"><a href=\"#分段注释\" class=\"headerlink\" title=\"分段注释\"></a>分段注释</h4><p>用注释把 CSS 分成各个部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* Header */</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#adw-header &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* Footer */</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">#adw-footer &#123;&#125;</span></div><div class=\"line\">  </div><div class=\"line\">/* Gallery */</div><div class=\"line\">  </div><div class=\"line\">.adw-gallery &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>坚持遵循代码规范。<br>写代码前先看看周围同事的代码，然后决定代码风格。<br>代码规范的意义在于提供一个参照物。这里提供了一份全局的规范，但是你也得参照公司内部的规范，否则阅读你代码的人会很痛苦。</p>\n<p>本章完！</p>\n"}],"PostAsset":[{"_id":"source/_posts/SASS用法/goToDir.jpg","post":"cj3l2uxy000021gwds2ilmbfq","slug":"goToDir.jpg","modified":1,"renderable":1},{"_id":"source/_posts/SASS用法/openRuby.jpg","post":"cj3l2uxy000021gwds2ilmbfq","slug":"openRuby.jpg","modified":1,"renderable":1},{"_id":"source/_posts/SASS用法/runTestscss.jpg","post":"cj3l2uxy000021gwds2ilmbfq","slug":"runTestscss.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj3l2uxyj00081gwdsvzp8gju","category_id":"cj3l2uxy500041gwdnx98nr1q","_id":"cj3l2uxyy000f1gwdfln5lx64"},{"post_id":"cj3l2uxxp00001gwdoohubl8s","category_id":"cj3l2uxy500041gwdnx98nr1q","_id":"cj3l2uxza000k1gwd8bemqmwb"},{"post_id":"cj3l2uxy000021gwds2ilmbfq","category_id":"cj3l2uxy500041gwdnx98nr1q","_id":"cj3l2uxzd000m1gwdrarqoenn"},{"post_id":"cj3l2uxyb00061gwd7mep8884","category_id":"cj3l2uxy500041gwdnx98nr1q","_id":"cj3l2uxzm000s1gwdjm6j62st"},{"post_id":"cj3l2uxyv000e1gwd906jygkg","category_id":"cj3l2uxzg000o1gwd4vpiz892","_id":"cj3l2uxzy000z1gwd71hjo0mm"},{"post_id":"cj3l2uxz0000h1gwddn3eju6t","category_id":"cj3l2uxzq000u1gwdb65xe9ky","_id":"cj3l2uy0400131gwdrboso6k6"},{"post_id":"cj3l2uxzb000l1gwdxygto0p2","category_id":"cj3l2uxzq000u1gwdb65xe9ky","_id":"cj3l2uy0b00171gwdtwok9dwz"},{"post_id":"cj3l2uxzf000n1gwdaugqlc0q","category_id":"cj3l2uy0400141gwd91ovqqld","_id":"cj3l2uy0h001b1gwd4d7m6bne"},{"post_id":"cj3l2uxzj000q1gwdy9kgjj7y","category_id":"cj3l2uy0400141gwd91ovqqld","_id":"cj3l2uy0j001f1gwd74zq5ajl"},{"post_id":"cj3l2uxzn000t1gwdi2gvn0g1","category_id":"cj3l2uy0h001c1gwdfwk787rf","_id":"cj3l2uy0l001j1gwdjs41jk55"},{"post_id":"cj3l2uxzt000x1gwd5fq0rm2j","category_id":"cj3l2uy0400141gwd91ovqqld","_id":"cj3l2uy0m001l1gwdbnt7h458"}],"PostTag":[{"post_id":"cj3l2uxyj00081gwdsvzp8gju","tag_id":"cj3l2uxy900051gwd28p9xa94","_id":"cj3l2uxyv000d1gwdifx2azqs"},{"post_id":"cj3l2uxxp00001gwdoohubl8s","tag_id":"cj3l2uxy900051gwd28p9xa94","_id":"cj3l2uxyy000g1gwdkmbb9e43"},{"post_id":"cj3l2uxy000021gwds2ilmbfq","tag_id":"cj3l2uxyt000c1gwdz09kb76c","_id":"cj3l2uxzm000r1gwdkvx2om3v"},{"post_id":"cj3l2uxy000021gwds2ilmbfq","tag_id":"cj3l2uxz7000j1gwdgph82j5s","_id":"cj3l2uxzq000v1gwd7itb18on"},{"post_id":"cj3l2uxyb00061gwd7mep8884","tag_id":"cj3l2uxy900051gwd28p9xa94","_id":"cj3l2uxzx000y1gwdb0x6f5n9"},{"post_id":"cj3l2uxyv000e1gwd906jygkg","tag_id":"cj3l2uxzr000w1gwddy409qx4","_id":"cj3l2uy0300121gwd2nidst2z"},{"post_id":"cj3l2uxz0000h1gwddn3eju6t","tag_id":"cj3l2uxzz00111gwd6us527jq","_id":"cj3l2uy0b00161gwdrjobie83"},{"post_id":"cj3l2uxzb000l1gwdxygto0p2","tag_id":"cj3l2uxzz00111gwd6us527jq","_id":"cj3l2uy0f001a1gwdgzgqvxu2"},{"post_id":"cj3l2uxzf000n1gwdaugqlc0q","tag_id":"cj3l2uxzz00111gwd6us527jq","_id":"cj3l2uy0i001e1gwd9tkky3eh"},{"post_id":"cj3l2uxzj000q1gwdy9kgjj7y","tag_id":"cj3l2uy0i001d1gwd21v6knih","_id":"cj3l2uy0l001i1gwd5y18x2ap"},{"post_id":"cj3l2uxzn000t1gwdi2gvn0g1","tag_id":"cj3l2uy0j001h1gwdx3llhrh2","_id":"cj3l2uy0o001n1gwdo3wk0uge"},{"post_id":"cj3l2uxzn000t1gwdi2gvn0g1","tag_id":"cj3l2uxzz00111gwd6us527jq","_id":"cj3l2uy0o001o1gwdt90e31t7"},{"post_id":"cj3l2uxzt000x1gwd5fq0rm2j","tag_id":"cj3l2uy0m001m1gwd1ei8uo23","_id":"cj3l2uy0p001p1gwde9iwcnpj"}],"Tag":[{"name":"CSS3","_id":"cj3l2uxy900051gwd28p9xa94"},{"name":"CSS","_id":"cj3l2uxyt000c1gwdz09kb76c"},{"name":"SASS","_id":"cj3l2uxz7000j1gwdgph82j5s"},{"name":"hexo","_id":"cj3l2uxzr000w1gwddy409qx4"},{"name":"Javascript","_id":"cj3l2uxzz00111gwd6us527jq"},{"name":"前端面试","_id":"cj3l2uy0i001d1gwd21v6knih"},{"name":"ES6","_id":"cj3l2uy0j001h1gwdx3llhrh2"},{"name":"HTML","_id":"cj3l2uy0m001m1gwd1ei8uo23"}]}}